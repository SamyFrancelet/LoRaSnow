
LoRaSnow_LIDARLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a0  080043a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a8  080043a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004420  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004420  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d041  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e54  00000000  00000000  0002d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002563f  00000000  00000000  000303c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd8f  00000000  00000000  000559ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6e4d  00000000  00000000  0006278e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001495db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  00149630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800429c 	.word	0x0800429c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800429c 	.word	0x0800429c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <LIDAR_init>:

#include "../Inc/LIDARLite_v4LED.h"

//Initialize the I2C port
bool LIDAR_init(LIDARLite_TypeDef* lidar, uint8_t addr, I2C_HandleTypeDef* i2cPort)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	460b      	mov	r3, r1
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	72fb      	strb	r3, [r7, #11]
	lidar->addr = addr;		//Save LIDAR address
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	7afa      	ldrb	r2, [r7, #11]
 80005ca:	701a      	strb	r2, [r3, #0]
	_i2cPort = i2cPort;		//Save I2C port
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <LIDAR_init+0x38>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]

	//Read status to check if lidar is connected
	lidar->isConnected = LIDAR_read(lidar, STATUS, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 f894 	bl	8000704 <LIDAR_read>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	735a      	strb	r2, [r3, #13]

	return lidar->isConnected;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	7b5b      	ldrb	r3, [r3, #13]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000009c 	.word	0x2000009c

080005f4 <LIDAR_takeRange>:
/*------------------------------------------------------------------------------
  Take Range
  Initiate a distance measurement by writing to register 0x00.
------------------------------------------------------------------------------*/
void LIDAR_takeRange(LIDARLite_TypeDef* lidar)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	lidar->buf[0] = 0x04;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2204      	movs	r2, #4
 8000600:	705a      	strb	r2, [r3, #1]
	LIDAR_write(lidar, ACQ_COMMANDS, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f852 	bl	80006b0 <LIDAR_write>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <LIDAR_waitForBusy>:
/*------------------------------------------------------------------------------
  Wait for Busy Flag
  Blocking function to wait until the Lidar Lite's internal busy flag goes low
------------------------------------------------------------------------------*/
void LIDAR_waitForBusy(LIDARLite_TypeDef* lidar)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag;

	do
	{
		busyFlag = LIDAR_getBusyFlag(lidar);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f80a 	bl	8000636 <LIDAR_getBusyFlag>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	} while (busyFlag);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f7      	bne.n	800061c <LIDAR_waitForBusy+0x8>
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LIDAR_getBusyFlag>:
/*------------------------------------------------------------------------------
  Get Busy Flag
  Read BUSY flag from device registers. Function will return 0x00 if not busy.
------------------------------------------------------------------------------*/
uint8_t LIDAR_getBusyFlag(LIDARLite_TypeDef* lidar)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag; // busyFlag monitors when the device is done with a measurement

	// Read status register to check busy flag
	LIDAR_read(lidar, STATUS, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f85e 	bl	8000704 <LIDAR_read>

	// STATUS bit 0 is busyFlag
	busyFlag = lidar->buf[0] & 0x01;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]

	return busyFlag;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LIDAR_readDistance>:
/*------------------------------------------------------------------------------
  Read Distance
  Read and return the result of the most recent distance measurement.
------------------------------------------------------------------------------*/
uint16_t LIDAR_readDistance(LIDARLite_TypeDef* lidar)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint16_t distance;

	// Read two bytes from registers 0x10 and 0x11
	LIDAR_read(lidar, FULL_DELAY_LOW, 2);
 8000664:	2202      	movs	r2, #2
 8000666:	2110      	movs	r1, #16
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f84b 	bl	8000704 <LIDAR_read>

	distance = lidar->buf[0] + (lidar->buf[1]<<8);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	b29b      	uxth	r3, r3
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	81fb      	strh	r3, [r7, #14]

	return distance; //This is the distance in centimeters
 8000682:	89fb      	ldrh	r3, [r7, #14]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <LIDAR_getDistance>:


//Get distance measurement function
uint16_t LIDAR_getDistance(LIDARLite_TypeDef* lidar)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	// 1. Trigger a range measurement.
	LIDAR_takeRange(lidar);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffad 	bl	80005f4 <LIDAR_takeRange>

	// 2. Wait for busyFlag to indicate the device is idle.
	LIDAR_waitForBusy(lidar);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffba 	bl	8000614 <LIDAR_waitForBusy>

	// 3. Read new distance data from device registers
	return LIDAR_readDistance(lidar);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffdb 	bl	800065c <LIDAR_readDistance>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LIDAR_write>:
  regAddr:   register address to write to
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to write
------------------------------------------------------------------------------*/
bool LIDAR_write(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	4613      	mov	r3, r2
 80006be:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <LIDAR_write+0x50>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b299      	uxth	r1, r3
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	b29c      	uxth	r4, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	78ba      	ldrb	r2, [r7, #2]
 80006d4:	b292      	uxth	r2, r2
 80006d6:	f04f 35ff 	mov.w	r5, #4294967295
 80006da:	9502      	str	r5, [sp, #8]
 80006dc:	9201      	str	r2, [sp, #4]
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	4622      	mov	r2, r4
 80006e4:	f000 ff48 	bl	8001578 <HAL_I2C_Mem_Write>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in transmission
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <LIDAR_write+0x46>
		return false;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <LIDAR_write+0x48>
	else
		return true;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000700:	2000009c 	.word	0x2000009c

08000704 <LIDAR_read>:
  regAddr:   register address to read
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to read
------------------------------------------------------------------------------*/
bool LIDAR_read(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af04      	add	r7, sp, #16
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
 8000710:	4613      	mov	r3, r2
 8000712:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <LIDAR_read+0x50>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b299      	uxth	r1, r3
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	b29c      	uxth	r4, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	78ba      	ldrb	r2, [r7, #2]
 8000728:	b292      	uxth	r2, r2
 800072a:	f04f 35ff 	mov.w	r5, #4294967295
 800072e:	9502      	str	r5, [sp, #8]
 8000730:	9201      	str	r2, [sp, #4]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	4622      	mov	r2, r4
 8000738:	f001 f832 	bl	80017a0 <HAL_I2C_Mem_Read>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in reception
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <LIDAR_read+0x46>
		return false;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <LIDAR_read+0x48>
	else
		return true;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bdb0      	pop	{r4, r5, r7, pc}
 8000754:	2000009c 	.word	0x2000009c

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b0a6      	sub	sp, #152	; 0x98
 800075c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075e:	b672      	cpsid	i
}
 8000760:	bf00      	nop
	//Variables
	LIDARLite_TypeDef lidar;	//Our LIDAR
	char str[100];				//String buffer
	uint16_t distance;			//The distance, in cm

	uint16_t dToMeasure[] = {20, 40, 60, 80, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600};
 8000762:	4b63      	ldr	r3, [pc, #396]	; (80008f0 <main+0x198>)
 8000764:	463c      	mov	r4, r7
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000770:	c407      	stmia	r4!, {r0, r1, r2}
 8000772:	8023      	strh	r3, [r4, #0]
	uint8_t size = 15;
 8000774:	230f      	movs	r3, #15
 8000776:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fb5a 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f8c7 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f9c7 	bl	8000b14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000786:	f000 f955 	bl	8000a34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800078a:	f000 f993 	bl	8000ab4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_I2C1_Init();
 800078e:	f000 f951 	bl	8000a34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000792:	f000 f98f 	bl	8000ab4 <MX_USART1_UART_Init>

  //Connect to LIDAR
  bool connect = LIDAR_init(&lidar, LIDAR_DEFAULT_ADDR, &hi2c1);
 8000796:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800079a:	4a56      	ldr	r2, [pc, #344]	; (80008f4 <main+0x19c>)
 800079c:	21c4      	movs	r1, #196	; 0xc4
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff0a 	bl	80005b8 <LIDAR_init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

  if(connect)
 80007aa:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00b      	beq.n	80007ca <main+0x72>
	  strcpy(str, "Successfully connected.\r\n");
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4a50      	ldr	r2, [pc, #320]	; (80008f8 <main+0x1a0>)
 80007b8:	461c      	mov	r4, r3
 80007ba:	4615      	mov	r5, r2
 80007bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c4:	c403      	stmia	r4!, {r0, r1}
 80007c6:	8022      	strh	r2, [r4, #0]
 80007c8:	e005      	b.n	80007d6 <main+0x7e>
  else
	  strcpy(str, "Error.\r\n");
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <main+0x1a4>)
 80007d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d2:	c303      	stmia	r3!, {r0, r1}
 80007d4:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd18 	bl	8000210 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f107 0120 	add.w	r1, r7, #32
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	4844      	ldr	r0, [pc, #272]	; (8000900 <main+0x1a8>)
 80007ee:	f002 fcad 	bl	800314c <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 80007f2:	b662      	cpsie	i
}
 80007f4:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t i = 0, j = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80007fc:	2300      	movs	r3, #0
 80007fe:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

  while (1)
  {
	  for(j = 0; j < size; j++)
 8000802:	2300      	movs	r3, #0
 8000804:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000808:	e06b      	b.n	80008e2 <main+0x18a>
	  {
		  sprintf(str, "Measuring a real distance of %i.\r\n", dToMeasure[j]);
 800080a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000814:	4413      	add	r3, r2
 8000816:	f833 3c98 	ldrh.w	r3, [r3, #-152]
 800081a:	461a      	mov	r2, r3
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4938      	ldr	r1, [pc, #224]	; (8000904 <main+0x1ac>)
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f90c 	bl	8003a40 <siprintf>
		  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fcef 	bl	8000210 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 0120 	add.w	r1, r7, #32
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	4830      	ldr	r0, [pc, #192]	; (8000900 <main+0x1a8>)
 8000840:	f002 fc84 	bl	800314c <HAL_UART_Transmit>

		  for(i = 0; i < 10; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800084a:	e026      	b.n	800089a <main+0x142>
		  {
			  distance = LIDAR_getDistance(&lidar);
 800084c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff1b 	bl	800068c <LIDAR_getDistance>
 8000856:	4603      	mov	r3, r0
 8000858:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

			  sprintf(str, "%i\r\n", distance);
 800085c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4928      	ldr	r1, [pc, #160]	; (8000908 <main+0x1b0>)
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f8ea 	bl	8003a40 <siprintf>
			  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fccd 	bl	8000210 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0120 	add.w	r1, r7, #32
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	481f      	ldr	r0, [pc, #124]	; (8000900 <main+0x1a8>)
 8000884:	f002 fc62 	bl	800314c <HAL_UART_Transmit>

			  HAL_Delay(500);
 8000888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088c:	f000 fb2e 	bl	8000eec <HAL_Delay>
		  for(i = 0; i < 10; i++)
 8000890:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000894:	3301      	adds	r3, #1
 8000896:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800089a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800089e:	2b09      	cmp	r3, #9
 80008a0:	d9d4      	bls.n	800084c <main+0xf4>
		  }

		  i = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  sprintf(str, "Finished. You have 10 seconds to move.\r\n");
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4917      	ldr	r1, [pc, #92]	; (800090c <main+0x1b4>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 f8c6 	bl	8003a40 <siprintf>
		  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fca9 	bl	8000210 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f107 0120 	add.w	r1, r7, #32
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <main+0x1a8>)
 80008cc:	f002 fc3e 	bl	800314c <HAL_UART_Transmit>

		  HAL_Delay(10000);
 80008d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80008d4:	f000 fb0a 	bl	8000eec <HAL_Delay>
	  for(j = 0; j < size; j++)
 80008d8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80008dc:	3301      	adds	r3, #1
 80008de:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80008e2:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80008e6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d38d      	bcc.n	800080a <main+0xb2>
 80008ee:	e788      	b.n	8000802 <main+0xaa>
 80008f0:	08004334 	.word	0x08004334
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	080042b4 	.word	0x080042b4
 80008fc:	080042d0 	.word	0x080042d0
 8000900:	200000ec 	.word	0x200000ec
 8000904:	080042dc 	.word	0x080042dc
 8000908:	08004300 	.word	0x08004300
 800090c:	08004308 	.word	0x08004308

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0b4      	sub	sp, #208	; 0xd0
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 f886 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2284      	movs	r2, #132	; 0x84
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f877 	bl	8003a30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <SystemClock_Config+0x11c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <SystemClock_Config+0x11c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <SystemClock_Config+0x11c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095a:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <SystemClock_Config+0x120>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <SystemClock_Config+0x120>)
 8000960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <SystemClock_Config+0x120>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	2302      	movs	r3, #2
 8000974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097e:	2310      	movs	r3, #16
 8000980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000996:	23d8      	movs	r3, #216	; 0xd8
 8000998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fb15 	bl	8001fdc <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009b8:	f000 f8d0 	bl	8000b5c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009bc:	f001 fabe 	bl	8001f3c <HAL_PWREx_EnableOverDrive>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009c6:	f000 f8c9 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009f0:	2107      	movs	r1, #7
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fd96 	bl	8002524 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80009fe:	f000 f8ad 	bl	8000b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000a02:	f244 0340 	movw	r3, #16448	; 0x4040
 8000a06:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 ff5b 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000a20:	f000 f89c 	bl	8000b5c <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	37d0      	adds	r7, #208	; 0xd0
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a70:	f000 fcf2 	bl	8001458 <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 f86f 	bl	8000b5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a82:	f001 f9c3 	bl	8001e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 f866 	bl	8000b5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a94:	f001 fa05 	bl	8001ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f85d 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000a0 	.word	0x200000a0
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	6000030d 	.word	0x6000030d

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_USART1_UART_Init+0x5c>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART1_UART_Init+0x58>)
 8000af8:	f002 fada 	bl	80030b0 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b02:	f000 f82b 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ec 	.word	0x200000ec
 8000b10:	40011000 	.word	0x40011000

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_GPIO_Init+0x44>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d128      	bne.n	8000c24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_I2C_MspInit+0x84>)
 8000c08:	f000 fa7a 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_I2C_MspInit+0x80>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a25      	ldr	r2, [pc, #148]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d144      	bne.n	8000ce4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <HAL_UART_MspInit+0xbc>)
 8000cbe:	f000 fa1f 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_UART_MspInit+0xc0>)
 8000ce0:	f000 fa0e 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f8b0 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f002 fe2c 	bl	80039dc <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20050000 	.word	0x20050000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	20000188 	.word	0x20000188

08000dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fdeb 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fca1 	bl	8000758 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e24:	080043b0 	.word	0x080043b0
  ldr r2, =_sbss
 8000e28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e2c:	20000184 	.word	0x20000184

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>

08000e32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f92e 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	f000 f805 	bl	8000e4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fe91 	bl	8000b68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f93b 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f911 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000170 	.word	0x20000170

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000170 	.word	0x20000170

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	05fa0000 	.word	0x05fa0000

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5c 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e175      	b.n	800140c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8164 	bne.w	8001406 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00b      	beq.n	800115e <HAL_GPIO_Init+0x5e>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001152:	2b11      	cmp	r3, #17
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x100>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80be 	beq.w	8001406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b66      	ldr	r3, [pc, #408]	; (8001424 <HAL_GPIO_Init+0x324>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a65      	ldr	r2, [pc, #404]	; (8001424 <HAL_GPIO_Init+0x324>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_GPIO_Init+0x324>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d037      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_GPIO_Init+0x334>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <HAL_GPIO_Init+0x338>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_GPIO_Init+0x33c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a53      	ldr	r2, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x340>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x22a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x344>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x348>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x34c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x21a>
 8001316:	2309      	movs	r3, #9
 8001318:	e012      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131a:	230a      	movs	r3, #10
 800131c:	e010      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131e:	2308      	movs	r3, #8
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001322:	2307      	movs	r3, #7
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x328>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_GPIO_Init+0x354>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae86 	bls.w	8001120 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40022000 	.word	0x40022000
 8001450:	40022400 	.word	0x40022400
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e07f      	b.n	800156a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fb96 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	e006      	b.n	80014e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d104      	bne.n	80014f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_I2C_Init+0x11c>)
 80014fe:	430b      	orrs	r3, r1
 8001500:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	ea42 0103 	orr.w	r1, r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	021a      	lsls	r2, r3, #8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69d9      	ldr	r1, [r3, #28]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	02008000 	.word	0x02008000

08001578 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b20      	cmp	r3, #32
 800159c:	f040 80f9 	bne.w	8001792 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_I2C_Mem_Write+0x34>
 80015a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0ed      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Mem_Write+0x4e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0e6      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ce:	f7ff fc81 	bl	8000ed4 <HAL_GetTick>
 80015d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2319      	movs	r3, #25
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fac3 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0d1      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2221      	movs	r2, #33	; 0x21
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001618:	88f8      	ldrh	r0, [r7, #6]
 800161a:	893a      	ldrh	r2, [r7, #8]
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4603      	mov	r3, r0
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f9d3 	bl	80019d4 <I2C_RequestMemoryWrite>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0a9      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d90e      	bls.n	8001668 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001654:	b2da      	uxtb	r2, r3
 8001656:	8979      	ldrh	r1, [r7, #10]
 8001658:	2300      	movs	r3, #0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fba5 	bl	8001db0 <I2C_TransferConfig>
 8001666:	e00f      	b.n	8001688 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	b2da      	uxtb	r2, r3
 8001678:	8979      	ldrh	r1, [r7, #10]
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fb94 	bl	8001db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 faad 	bl	8001bec <I2C_WaitOnTXISFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e07b      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d034      	beq.n	8001740 <HAL_I2C_Mem_Write+0x1c8>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d130      	bne.n	8001740 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	2200      	movs	r2, #0
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fa3f 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e04d      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d90e      	bls.n	8001720 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	b2da      	uxtb	r2, r3
 800170e:	8979      	ldrh	r1, [r7, #10]
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fb49 	bl	8001db0 <I2C_TransferConfig>
 800171e:	e00f      	b.n	8001740 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	b2da      	uxtb	r2, r3
 8001730:	8979      	ldrh	r1, [r7, #10]
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fb38 	bl	8001db0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d19e      	bne.n	8001688 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fa8c 	bl	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e01a      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2220      	movs	r2, #32
 8001764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_I2C_Mem_Write+0x224>)
 8001772:	400b      	ands	r3, r1
 8001774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
  }
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	fe00e800 	.word	0xfe00e800

080017a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	817b      	strh	r3, [r7, #10]
 80017b2:	460b      	mov	r3, r1
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	4613      	mov	r3, r2
 80017b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	f040 80fd 	bne.w	80019c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_I2C_Mem_Read+0x34>
 80017ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0f1      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_I2C_Mem_Read+0x4e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e0ea      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f6:	f7ff fb6d 	bl	8000ed4 <HAL_GetTick>
 80017fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2319      	movs	r3, #25
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f9af 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0d5      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2222      	movs	r2, #34	; 0x22
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2240      	movs	r2, #64	; 0x40
 8001824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a3a      	ldr	r2, [r7, #32]
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001840:	88f8      	ldrh	r0, [r7, #6]
 8001842:	893a      	ldrh	r2, [r7, #8]
 8001844:	8979      	ldrh	r1, [r7, #10]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	4603      	mov	r3, r0
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f913 	bl	8001a7c <I2C_RequestMemoryRead>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0ad      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d90e      	bls.n	8001890 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	22ff      	movs	r2, #255	; 0xff
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	4b52      	ldr	r3, [pc, #328]	; (80019cc <HAL_I2C_Mem_Read+0x22c>)
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 fa91 	bl	8001db0 <I2C_TransferConfig>
 800188e:	e00f      	b.n	80018b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <HAL_I2C_Mem_Read+0x22c>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fa80 	bl	8001db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	2200      	movs	r2, #0
 80018b8:	2104      	movs	r1, #4
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f956 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07c      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d034      	beq.n	8001970 <HAL_I2C_Mem_Read+0x1d0>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	2b00      	cmp	r3, #0
 800190c:	d130      	bne.n	8001970 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	2200      	movs	r2, #0
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f927 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e04d      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	d90e      	bls.n	8001950 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	22ff      	movs	r2, #255	; 0xff
 8001936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	b2da      	uxtb	r2, r3
 800193e:	8979      	ldrh	r1, [r7, #10]
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fa31 	bl	8001db0 <I2C_TransferConfig>
 800194e:	e00f      	b.n	8001970 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	8979      	ldrh	r1, [r7, #10]
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 fa20 	bl	8001db0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d19a      	bne.n	80018b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f974 	bl	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e01a      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2220      	movs	r2, #32
 8001994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_I2C_Mem_Read+0x230>)
 80019a2:	400b      	ands	r3, r1
 80019a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	80002400 	.word	0x80002400
 80019d0:	fe00e800 	.word	0xfe00e800

080019d4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	817b      	strh	r3, [r7, #10]
 80019e6:	460b      	mov	r3, r1
 80019e8:	813b      	strh	r3, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	8979      	ldrh	r1, [r7, #10]
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <I2C_RequestMemoryWrite+0xa4>)
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f9d7 	bl	8001db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f8f0 	bl	8001bec <I2C_WaitOnTXISFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e02c      	b.n	8001a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a1c:	893b      	ldrh	r3, [r7, #8]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
 8001a26:	e015      	b.n	8001a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a28:	893b      	ldrh	r3, [r7, #8]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	69b9      	ldr	r1, [r7, #24]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f8d6 	bl	8001bec <I2C_WaitOnTXISFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e012      	b.n	8001a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a4a:	893b      	ldrh	r3, [r7, #8]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f884 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	80002000 	.word	0x80002000

08001a7c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	817b      	strh	r3, [r7, #10]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	813b      	strh	r3, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	8979      	ldrh	r1, [r7, #10]
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <I2C_RequestMemoryRead+0xa4>)
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f984 	bl	8001db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f89d 	bl	8001bec <I2C_WaitOnTXISFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e02c      	b.n	8001b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac2:	893b      	ldrh	r3, [r7, #8]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
 8001acc:	e015      	b.n	8001afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	69b9      	ldr	r1, [r7, #24]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f883 	bl	8001bec <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e012      	b.n	8001b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001af0:	893b      	ldrh	r3, [r7, #8]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2140      	movs	r1, #64	; 0x40
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f831 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	80002000 	.word	0x80002000

08001b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d103      	bne.n	8001b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d007      	beq.n	8001b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	619a      	str	r2, [r3, #24]
  }
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	e022      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d01e      	beq.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff f9a5 	bl	8000ed4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d113      	bne.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e00f      	b.n	8001be4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d0cd      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bf8:	e02c      	b.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f870 	bl	8001ce4 <I2C_IsAcknowledgeFailed>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02a      	b.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d01e      	beq.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff f95d 	bl	8000ed4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f043 0220 	orr.w	r2, r3, #32
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e007      	b.n	8001c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d1cb      	bne.n	8001bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c78:	e028      	b.n	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f830 	bl	8001ce4 <I2C_IsAcknowledgeFailed>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e026      	b.n	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7ff f921 	bl	8000ed4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d113      	bne.n	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e007      	b.n	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d1cf      	bne.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d151      	bne.n	8001da2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cfe:	e022      	b.n	8001d46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d01e      	beq.n	8001d46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d08:	f7ff f8e4 	bl	8000ed4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d302      	bcc.n	8001d1e <I2C_IsAcknowledgeFailed+0x3a>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d113      	bne.n	8001d46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f043 0220 	orr.w	r2, r3, #32
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e02e      	b.n	8001da4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d1d5      	bne.n	8001d00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2210      	movs	r2, #16
 8001d5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fedd 	bl	8001b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <I2C_IsAcknowledgeFailed+0xc8>)
 8001d76:	400b      	ands	r3, r1
 8001d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	0d5b      	lsrs	r3, r3, #21
 8001dcc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <I2C_TransferConfig+0x58>)
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	ea02 0103 	and.w	r1, r2, r3
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001de0:	7a7b      	ldrb	r3, [r7, #9]
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	03ff63ff 	.word	0x03ff63ff

08001e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d138      	bne.n	8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e032      	b.n	8001e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	; 0x24
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d139      	bne.n	8001f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e033      	b.n	8001f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2224      	movs	r2, #36	; 0x24
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6a:	f7fe ffb3 	bl	8000ed4 <HAL_GetTick>
 8001f6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f70:	e009      	b.n	8001f86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f72:	f7fe ffaf 	bl	8000ed4 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f80:	d901      	bls.n	8001f86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e022      	b.n	8001fcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d1ee      	bne.n	8001f72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7fe ff98 	bl	8000ed4 <HAL_GetTick>
 8001fa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fa6:	e009      	b.n	8001fbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fa8:	f7fe ff94 	bl	8000ed4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb6:	d901      	bls.n	8001fbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e007      	b.n	8001fcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e291      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8087 	beq.w	800210e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002000:	4b96      	ldr	r3, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	d00c      	beq.n	8002026 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200c:	4b93      	ldr	r3, [pc, #588]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	d112      	bne.n	800203e <HAL_RCC_OscConfig+0x62>
 8002018:	4b90      	ldr	r3, [pc, #576]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002024:	d10b      	bne.n	800203e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b8d      	ldr	r3, [pc, #564]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d06c      	beq.n	800210c <HAL_RCC_OscConfig+0x130>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d168      	bne.n	800210c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e26b      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x7a>
 8002048:	4b84      	ldr	r3, [pc, #528]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a83      	ldr	r2, [pc, #524]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e02e      	b.n	80020b4 <HAL_RCC_OscConfig+0xd8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x9c>
 800205e:	4b7f      	ldr	r3, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7e      	ldr	r2, [pc, #504]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b7c      	ldr	r3, [pc, #496]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7b      	ldr	r2, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xd8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0xc0>
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b73      	ldr	r3, [pc, #460]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a72      	ldr	r2, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xd8>
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6b      	ldr	r2, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff0a 	bl	8000ed4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7fe ff06 	bl	8000ed4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e21f      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b61      	ldr	r3, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe8>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fef6 	bl	8000ed4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe fef2 	bl	8000ed4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e20b      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	4b57      	ldr	r3, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x110>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d069      	beq.n	80021ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800211a:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002126:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	d11c      	bne.n	800216c <HAL_RCC_OscConfig+0x190>
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x17a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1df      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	493d      	ldr	r1, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	e040      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a38      	ldr	r2, [pc, #224]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fea8 	bl	8000ed4 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe fea4 	bl	8000ed4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1bd      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4929      	ldr	r1, [pc, #164]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe84 	bl	8000ed4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe fe80 	bl	8000ed4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e199      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d038      	beq.n	800226c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d019      	beq.n	8002236 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe fe61 	bl	8000ed4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe fe5d 	bl	8000ed4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e176      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x23a>
 8002234:	e01a      	b.n	800226c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_OscConfig+0x280>)
 8002238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_RCC_OscConfig+0x280>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7fe fe47 	bl	8000ed4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7fe fe43 	bl	8000ed4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d903      	bls.n	8002260 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e15c      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
 800225c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ee      	bne.n	800224a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a4 	beq.w	80023c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a87      	ldr	r2, [pc, #540]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	4b82      	ldr	r3, [pc, #520]	; (80024ac <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022ae:	4b7f      	ldr	r3, [pc, #508]	; (80024ac <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7e      	ldr	r2, [pc, #504]	; (80024ac <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fe0b 	bl	8000ed4 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe fe07 	bl	8000ed4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e120      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x31a>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a6e      	ldr	r2, [pc, #440]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e02d      	b.n	8002352 <HAL_RCC_OscConfig+0x376>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x33c>
 80022fe:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x376>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x35e>
 8002320:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a60      	ldr	r2, [pc, #384]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x376>
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fdbb 	bl	8000ed4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fdb7 	bl	8000ed4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0ce      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCC_OscConfig+0x386>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fda5 	bl	8000ed4 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fda1 	bl	8000ed4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ee      	bne.n	800238e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a3b      	ldr	r2, [pc, #236]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80a4 	beq.w	8002514 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d06b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d149      	bne.n	8002474 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd72 	bl	8000ed4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fd6e 	bl	8000ed4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e087      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	3b01      	subs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	4313      	orrs	r3, r2
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800243a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800243e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fd42 	bl	8000ed4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fd3e 	bl	8000ed4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e057      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x478>
 8002472:	e04f      	b.n	8002514 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fd28 	bl	8000ed4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fd24 	bl	8000ed4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e03d      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x4ac>
 80024a6:	e035      	b.n	8002514 <HAL_RCC_OscConfig+0x538>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x544>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d028      	beq.n	8002510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d121      	bne.n	8002510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11a      	bne.n	8002510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d0      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e073      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fc5c 	bl	8000ed4 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe fc58 	bl	8000ed4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e053      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d210      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1cc>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1d0>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fbb8 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08004354 	.word	0x08004354
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b5b0      	push	{r4, r5, r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002702:	2100      	movs	r1, #0
 8002704:	6079      	str	r1, [r7, #4]
 8002706:	2100      	movs	r1, #0
 8002708:	60f9      	str	r1, [r7, #12]
 800270a:	2100      	movs	r1, #0
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800270e:	2100      	movs	r1, #0
 8002710:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002712:	4952      	ldr	r1, [pc, #328]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 8002714:	6889      	ldr	r1, [r1, #8]
 8002716:	f001 010c 	and.w	r1, r1, #12
 800271a:	2908      	cmp	r1, #8
 800271c:	d00d      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x3e>
 800271e:	2908      	cmp	r1, #8
 8002720:	f200 8094 	bhi.w	800284c <HAL_RCC_GetSysClockFreq+0x150>
 8002724:	2900      	cmp	r1, #0
 8002726:	d002      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x32>
 8002728:	2904      	cmp	r1, #4
 800272a:	d003      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x38>
 800272c:	e08e      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_GetSysClockFreq+0x164>)
 8002730:	60bb      	str	r3, [r7, #8]
      break;
 8002732:	e08e      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCC_GetSysClockFreq+0x168>)
 8002736:	60bb      	str	r3, [r7, #8]
      break;
 8002738:	e08b      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273a:	4948      	ldr	r1, [pc, #288]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 800273c:	6849      	ldr	r1, [r1, #4]
 800273e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002742:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002744:	4945      	ldr	r1, [pc, #276]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 8002746:	6849      	ldr	r1, [r1, #4]
 8002748:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800274c:	2900      	cmp	r1, #0
 800274e:	d024      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	4942      	ldr	r1, [pc, #264]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 8002752:	6849      	ldr	r1, [r1, #4]
 8002754:	0989      	lsrs	r1, r1, #6
 8002756:	4608      	mov	r0, r1
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002760:	f04f 0500 	mov.w	r5, #0
 8002764:	ea00 0204 	and.w	r2, r0, r4
 8002768:	ea01 0305 	and.w	r3, r1, r5
 800276c:	493d      	ldr	r1, [pc, #244]	; (8002864 <HAL_RCC_GetSysClockFreq+0x168>)
 800276e:	fb01 f003 	mul.w	r0, r1, r3
 8002772:	2100      	movs	r1, #0
 8002774:	fb01 f102 	mul.w	r1, r1, r2
 8002778:	1844      	adds	r4, r0, r1
 800277a:	493a      	ldr	r1, [pc, #232]	; (8002864 <HAL_RCC_GetSysClockFreq+0x168>)
 800277c:	fba2 0101 	umull	r0, r1, r2, r1
 8002780:	1863      	adds	r3, r4, r1
 8002782:	4619      	mov	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f7fd fd98 	bl	80002c0 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e04a      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	461a      	mov	r2, r3
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	ea02 0400 	and.w	r4, r2, r0
 80027b2:	ea03 0501 	and.w	r5, r3, r1
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	014b      	lsls	r3, r1, #5
 80027c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027c8:	0142      	lsls	r2, r0, #5
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	1b00      	subs	r0, r0, r4
 80027d0:	eb61 0105 	sbc.w	r1, r1, r5
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	018b      	lsls	r3, r1, #6
 80027de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027e2:	0182      	lsls	r2, r0, #6
 80027e4:	1a12      	subs	r2, r2, r0
 80027e6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	00d9      	lsls	r1, r3, #3
 80027f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027f8:	00d0      	lsls	r0, r2, #3
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	1912      	adds	r2, r2, r4
 8002800:	eb45 0303 	adc.w	r3, r5, r3
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0299      	lsls	r1, r3, #10
 800280e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002812:	0290      	lsls	r0, r2, #10
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f7fd fd4c 	bl	80002c0 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_RCC_GetSysClockFreq+0x160>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	60bb      	str	r3, [r7, #8]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCC_GetSysClockFreq+0x164>)
 800284e:	60bb      	str	r3, [r7, #8]
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	68bb      	ldr	r3, [r7, #8]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bdb0      	pop	{r4, r5, r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400
 8002864:	017d7840 	.word	0x017d7840

08002868 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002884:	f7ff fff0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a9b      	lsrs	r3, r3, #10
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08004364 	.word	0x08004364

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ac:	f7ff ffdc 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0b5b      	lsrs	r3, r3, #13
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08004364 	.word	0x08004364

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a68      	ldr	r2, [pc, #416]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002902:	6093      	str	r3, [r2, #8]
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	4964      	ldr	r1, [pc, #400]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	4959      	ldr	r1, [pc, #356]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d017      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002966:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	494a      	ldr	r1, [pc, #296]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 808b 	beq.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe fa7c 	bl	8000ed4 <HAL_GetTick>
 80029dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e0:	f7fe fa78 	bl	8000ed4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e357      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d035      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d02e      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d114      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fa40 	bl	8000ed4 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fa3c 	bl	8000ed4 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e319      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ee      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a86:	d111      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	4901      	ldr	r1, [pc, #4]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	0ffffcff 	.word	0x0ffffcff
 8002aac:	4bb1      	ldr	r3, [pc, #708]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4ab0      	ldr	r2, [pc, #704]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ab6:	6093      	str	r3, [r2, #8]
 8002ab8:	4bae      	ldr	r3, [pc, #696]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	49ab      	ldr	r1, [pc, #684]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ad6:	4ba7      	ldr	r3, [pc, #668]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	4aa5      	ldr	r2, [pc, #660]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ae6:	4ba3      	ldr	r3, [pc, #652]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	49a0      	ldr	r1, [pc, #640]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b04:	4b9b      	ldr	r3, [pc, #620]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b12:	4998      	ldr	r1, [pc, #608]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b34:	498f      	ldr	r1, [pc, #572]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b48:	4b8a      	ldr	r3, [pc, #552]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	4987      	ldr	r1, [pc, #540]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	497e      	ldr	r1, [pc, #504]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4976      	ldr	r1, [pc, #472]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bae:	4b71      	ldr	r3, [pc, #452]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f023 020c 	bic.w	r2, r3, #12
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	496d      	ldr	r1, [pc, #436]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4965      	ldr	r1, [pc, #404]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf2:	4b60      	ldr	r3, [pc, #384]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	495c      	ldr	r1, [pc, #368]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c14:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	4954      	ldr	r1, [pc, #336]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c36:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	494b      	ldr	r1, [pc, #300]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	4943      	ldr	r1, [pc, #268]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	493a      	ldr	r1, [pc, #232]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	4932      	ldr	r1, [pc, #200]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d011      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	4929      	ldr	r1, [pc, #164]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	4919      	ldr	r1, [pc, #100]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d30:	4910      	ldr	r1, [pc, #64]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d006      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80d9 	beq.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f8bc 	bl	8000ed4 <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d60:	f7fe f8b8 	bl	8000ed4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d904      	bls.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e197      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d78:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ed      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d021      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11d      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d98:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da6:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dac:	0e1b      	lsrs	r3, r3, #24
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	019a      	lsls	r2, r3, #6
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	061b      	lsls	r3, r3, #24
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	071b      	lsls	r3, r3, #28
 8002dcc:	4957      	ldr	r1, [pc, #348]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02e      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfe:	d129      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e14:	0f1b      	lsrs	r3, r3, #28
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	019a      	lsls	r2, r3, #6
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	071b      	lsls	r3, r3, #28
 8002e34:	493d      	ldr	r1, [pc, #244]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e3c:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e42:	f023 021f 	bic.w	r2, r3, #31
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	0e1b      	lsrs	r3, r3, #24
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e74:	0f1b      	lsrs	r3, r3, #28
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	019a      	lsls	r2, r3, #6
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	071b      	lsls	r3, r3, #28
 8002e94:	4925      	ldr	r1, [pc, #148]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d011      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	019a      	lsls	r2, r3, #6
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	071b      	lsls	r3, r3, #28
 8002ec4:	4919      	ldr	r1, [pc, #100]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed8:	f7fd fffc 	bl	8000ed4 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee0:	f7fd fff8 	bl	8000ed4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0d7      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f040 80cd 	bne.w	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f12:	f7fd ffdf 	bl	8000ed4 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f1a:	f7fd ffdb 	bl	8000ed4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	; 0x64
 8002f26:	d903      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0ba      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f30:	4b5e      	ldr	r3, [pc, #376]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3c:	d0ed      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02e      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d12a      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f74:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	0f1b      	lsrs	r3, r3, #28
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	019a      	lsls	r2, r3, #6
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	071b      	lsls	r3, r3, #28
 8002f9a:	4944      	ldr	r1, [pc, #272]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fa2:	4b42      	ldr	r3, [pc, #264]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	493d      	ldr	r1, [pc, #244]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d022      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd0:	d11d      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	0e1b      	lsrs	r3, r3, #24
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	0f1b      	lsrs	r3, r3, #28
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	4929      	ldr	r1, [pc, #164]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800301a:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	019a      	lsls	r2, r3, #6
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	4917      	ldr	r1, [pc, #92]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	4911      	ldr	r1, [pc, #68]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fd ff2c 	bl	8000ed4 <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003080:	f7fd ff28 	bl	8000ed4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e007      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309e:	d1ef      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e040      	b.n	8003144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fdb0 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8c0 	bl	8003274 <UART_SetConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb16 	bl	8003738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fb9d 	bl	800387c <UART_CheckIdleState>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003160:	2b20      	cmp	r3, #32
 8003162:	f040 8081 	bne.w	8003268 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_UART_Transmit+0x26>
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e079      	b.n	800326a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_UART_Transmit+0x38>
 8003180:	2302      	movs	r3, #2
 8003182:	e072      	b.n	800326a <HAL_UART_Transmit+0x11e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2221      	movs	r2, #33	; 0x21
 8003198:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319a:	f7fd fe9b 	bl	8000ed4 <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d108      	bne.n	80031cc <HAL_UART_Transmit+0x80>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e003      	b.n	80031d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80031dc:	e02c      	b.n	8003238 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb7a 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e038      	b.n	800326a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3302      	adds	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	e007      	b.n	8003226 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3301      	adds	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1cc      	bne.n	80031de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2200      	movs	r2, #0
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fb47 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e005      	b.n	800326a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4ba7      	ldr	r3, [pc, #668]	; (800353c <UART_SetConfig+0x2c8>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a95      	ldr	r2, [pc, #596]	; (8003540 <UART_SetConfig+0x2cc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <UART_SetConfig+0xbe>
 80032f0:	4b94      	ldr	r3, [pc, #592]	; (8003544 <UART_SetConfig+0x2d0>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d816      	bhi.n	800332c <UART_SetConfig+0xb8>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <UART_SetConfig+0x90>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	08003321 	.word	0x08003321
 800330c:	0800331b 	.word	0x0800331b
 8003310:	08003327 	.word	0x08003327
 8003314:	2301      	movs	r3, #1
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e14f      	b.n	80035ba <UART_SetConfig+0x346>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e14c      	b.n	80035ba <UART_SetConfig+0x346>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e149      	b.n	80035ba <UART_SetConfig+0x346>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e146      	b.n	80035ba <UART_SetConfig+0x346>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e143      	b.n	80035ba <UART_SetConfig+0x346>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a84      	ldr	r2, [pc, #528]	; (8003548 <UART_SetConfig+0x2d4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d132      	bne.n	80033a2 <UART_SetConfig+0x12e>
 800333c:	4b81      	ldr	r3, [pc, #516]	; (8003544 <UART_SetConfig+0x2d0>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d828      	bhi.n	800339c <UART_SetConfig+0x128>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <UART_SetConfig+0xdc>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003385 	.word	0x08003385
 8003354:	0800339d 	.word	0x0800339d
 8003358:	0800339d 	.word	0x0800339d
 800335c:	0800339d 	.word	0x0800339d
 8003360:	08003391 	.word	0x08003391
 8003364:	0800339d 	.word	0x0800339d
 8003368:	0800339d 	.word	0x0800339d
 800336c:	0800339d 	.word	0x0800339d
 8003370:	0800338b 	.word	0x0800338b
 8003374:	0800339d 	.word	0x0800339d
 8003378:	0800339d 	.word	0x0800339d
 800337c:	0800339d 	.word	0x0800339d
 8003380:	08003397 	.word	0x08003397
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e117      	b.n	80035ba <UART_SetConfig+0x346>
 800338a:	2302      	movs	r3, #2
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e114      	b.n	80035ba <UART_SetConfig+0x346>
 8003390:	2304      	movs	r3, #4
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e111      	b.n	80035ba <UART_SetConfig+0x346>
 8003396:	2308      	movs	r3, #8
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e10e      	b.n	80035ba <UART_SetConfig+0x346>
 800339c:	2310      	movs	r3, #16
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e10b      	b.n	80035ba <UART_SetConfig+0x346>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a69      	ldr	r2, [pc, #420]	; (800354c <UART_SetConfig+0x2d8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d120      	bne.n	80033ee <UART_SetConfig+0x17a>
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <UART_SetConfig+0x2d0>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d013      	beq.n	80033e2 <UART_SetConfig+0x16e>
 80033ba:	2b30      	cmp	r3, #48	; 0x30
 80033bc:	d814      	bhi.n	80033e8 <UART_SetConfig+0x174>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d009      	beq.n	80033d6 <UART_SetConfig+0x162>
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d810      	bhi.n	80033e8 <UART_SetConfig+0x174>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <UART_SetConfig+0x15c>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d006      	beq.n	80033dc <UART_SetConfig+0x168>
 80033ce:	e00b      	b.n	80033e8 <UART_SetConfig+0x174>
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e0f1      	b.n	80035ba <UART_SetConfig+0x346>
 80033d6:	2302      	movs	r3, #2
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e0ee      	b.n	80035ba <UART_SetConfig+0x346>
 80033dc:	2304      	movs	r3, #4
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e0eb      	b.n	80035ba <UART_SetConfig+0x346>
 80033e2:	2308      	movs	r3, #8
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e0e8      	b.n	80035ba <UART_SetConfig+0x346>
 80033e8:	2310      	movs	r3, #16
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e0e5      	b.n	80035ba <UART_SetConfig+0x346>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <UART_SetConfig+0x2dc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d120      	bne.n	800343a <UART_SetConfig+0x1c6>
 80033f8:	4b52      	ldr	r3, [pc, #328]	; (8003544 <UART_SetConfig+0x2d0>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003402:	2bc0      	cmp	r3, #192	; 0xc0
 8003404:	d013      	beq.n	800342e <UART_SetConfig+0x1ba>
 8003406:	2bc0      	cmp	r3, #192	; 0xc0
 8003408:	d814      	bhi.n	8003434 <UART_SetConfig+0x1c0>
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d009      	beq.n	8003422 <UART_SetConfig+0x1ae>
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d810      	bhi.n	8003434 <UART_SetConfig+0x1c0>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <UART_SetConfig+0x1a8>
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d006      	beq.n	8003428 <UART_SetConfig+0x1b4>
 800341a:	e00b      	b.n	8003434 <UART_SetConfig+0x1c0>
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e0cb      	b.n	80035ba <UART_SetConfig+0x346>
 8003422:	2302      	movs	r3, #2
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e0c8      	b.n	80035ba <UART_SetConfig+0x346>
 8003428:	2304      	movs	r3, #4
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e0c5      	b.n	80035ba <UART_SetConfig+0x346>
 800342e:	2308      	movs	r3, #8
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e0c2      	b.n	80035ba <UART_SetConfig+0x346>
 8003434:	2310      	movs	r3, #16
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0bf      	b.n	80035ba <UART_SetConfig+0x346>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a45      	ldr	r2, [pc, #276]	; (8003554 <UART_SetConfig+0x2e0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d125      	bne.n	8003490 <UART_SetConfig+0x21c>
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <UART_SetConfig+0x2d0>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003452:	d017      	beq.n	8003484 <UART_SetConfig+0x210>
 8003454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003458:	d817      	bhi.n	800348a <UART_SetConfig+0x216>
 800345a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345e:	d00b      	beq.n	8003478 <UART_SetConfig+0x204>
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d811      	bhi.n	800348a <UART_SetConfig+0x216>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <UART_SetConfig+0x1fe>
 800346a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346e:	d006      	beq.n	800347e <UART_SetConfig+0x20a>
 8003470:	e00b      	b.n	800348a <UART_SetConfig+0x216>
 8003472:	2300      	movs	r3, #0
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e0a0      	b.n	80035ba <UART_SetConfig+0x346>
 8003478:	2302      	movs	r3, #2
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e09d      	b.n	80035ba <UART_SetConfig+0x346>
 800347e:	2304      	movs	r3, #4
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e09a      	b.n	80035ba <UART_SetConfig+0x346>
 8003484:	2308      	movs	r3, #8
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e097      	b.n	80035ba <UART_SetConfig+0x346>
 800348a:	2310      	movs	r3, #16
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e094      	b.n	80035ba <UART_SetConfig+0x346>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <UART_SetConfig+0x2e4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d125      	bne.n	80034e6 <UART_SetConfig+0x272>
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <UART_SetConfig+0x2d0>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a8:	d017      	beq.n	80034da <UART_SetConfig+0x266>
 80034aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ae:	d817      	bhi.n	80034e0 <UART_SetConfig+0x26c>
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d00b      	beq.n	80034ce <UART_SetConfig+0x25a>
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d811      	bhi.n	80034e0 <UART_SetConfig+0x26c>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <UART_SetConfig+0x254>
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d006      	beq.n	80034d4 <UART_SetConfig+0x260>
 80034c6:	e00b      	b.n	80034e0 <UART_SetConfig+0x26c>
 80034c8:	2301      	movs	r3, #1
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e075      	b.n	80035ba <UART_SetConfig+0x346>
 80034ce:	2302      	movs	r3, #2
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e072      	b.n	80035ba <UART_SetConfig+0x346>
 80034d4:	2304      	movs	r3, #4
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e06f      	b.n	80035ba <UART_SetConfig+0x346>
 80034da:	2308      	movs	r3, #8
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e06c      	b.n	80035ba <UART_SetConfig+0x346>
 80034e0:	2310      	movs	r3, #16
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e069      	b.n	80035ba <UART_SetConfig+0x346>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <UART_SetConfig+0x2e8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d137      	bne.n	8003560 <UART_SetConfig+0x2ec>
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <UART_SetConfig+0x2d0>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034fe:	d017      	beq.n	8003530 <UART_SetConfig+0x2bc>
 8003500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003504:	d817      	bhi.n	8003536 <UART_SetConfig+0x2c2>
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350a:	d00b      	beq.n	8003524 <UART_SetConfig+0x2b0>
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d811      	bhi.n	8003536 <UART_SetConfig+0x2c2>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <UART_SetConfig+0x2aa>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	d006      	beq.n	800352a <UART_SetConfig+0x2b6>
 800351c:	e00b      	b.n	8003536 <UART_SetConfig+0x2c2>
 800351e:	2300      	movs	r3, #0
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e04a      	b.n	80035ba <UART_SetConfig+0x346>
 8003524:	2302      	movs	r3, #2
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e047      	b.n	80035ba <UART_SetConfig+0x346>
 800352a:	2304      	movs	r3, #4
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e044      	b.n	80035ba <UART_SetConfig+0x346>
 8003530:	2308      	movs	r3, #8
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e041      	b.n	80035ba <UART_SetConfig+0x346>
 8003536:	2310      	movs	r3, #16
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e03e      	b.n	80035ba <UART_SetConfig+0x346>
 800353c:	efff69f3 	.word	0xefff69f3
 8003540:	40011000 	.word	0x40011000
 8003544:	40023800 	.word	0x40023800
 8003548:	40004400 	.word	0x40004400
 800354c:	40004800 	.word	0x40004800
 8003550:	40004c00 	.word	0x40004c00
 8003554:	40005000 	.word	0x40005000
 8003558:	40011400 	.word	0x40011400
 800355c:	40007800 	.word	0x40007800
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a71      	ldr	r2, [pc, #452]	; (800372c <UART_SetConfig+0x4b8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d125      	bne.n	80035b6 <UART_SetConfig+0x342>
 800356a:	4b71      	ldr	r3, [pc, #452]	; (8003730 <UART_SetConfig+0x4bc>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003574:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003578:	d017      	beq.n	80035aa <UART_SetConfig+0x336>
 800357a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800357e:	d817      	bhi.n	80035b0 <UART_SetConfig+0x33c>
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003584:	d00b      	beq.n	800359e <UART_SetConfig+0x32a>
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358a:	d811      	bhi.n	80035b0 <UART_SetConfig+0x33c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <UART_SetConfig+0x324>
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003594:	d006      	beq.n	80035a4 <UART_SetConfig+0x330>
 8003596:	e00b      	b.n	80035b0 <UART_SetConfig+0x33c>
 8003598:	2300      	movs	r3, #0
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e00d      	b.n	80035ba <UART_SetConfig+0x346>
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e00a      	b.n	80035ba <UART_SetConfig+0x346>
 80035a4:	2304      	movs	r3, #4
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e007      	b.n	80035ba <UART_SetConfig+0x346>
 80035aa:	2308      	movs	r3, #8
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e004      	b.n	80035ba <UART_SetConfig+0x346>
 80035b0:	2310      	movs	r3, #16
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e001      	b.n	80035ba <UART_SetConfig+0x346>
 80035b6:	2310      	movs	r3, #16
 80035b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d15b      	bne.n	800367c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d827      	bhi.n	800361a <UART_SetConfig+0x3a6>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <UART_SetConfig+0x35c>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	0800361b 	.word	0x0800361b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800361b 	.word	0x0800361b
 80035e8:	0800361b 	.word	0x0800361b
 80035ec:	0800361b 	.word	0x0800361b
 80035f0:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff f944 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61b8      	str	r0, [r7, #24]
        break;
 80035fa:	e013      	b.n	8003624 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7ff f954 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003600:	61b8      	str	r0, [r7, #24]
        break;
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <UART_SetConfig+0x4c0>)
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e00c      	b.n	8003624 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7ff f877 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 800360e:	61b8      	str	r0, [r7, #24]
        break;
 8003610:	e008      	b.n	8003624 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e004      	b.n	8003624 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	77bb      	strb	r3, [r7, #30]
        break;
 8003622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d074      	beq.n	8003714 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	005a      	lsls	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	b29b      	uxth	r3, r3
 8003640:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d916      	bls.n	8003676 <UART_SetConfig+0x402>
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d212      	bcs.n	8003676 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f023 030f 	bic.w	r3, r3, #15
 8003658:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	b29b      	uxth	r3, r3
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	b29a      	uxth	r2, r3
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	4313      	orrs	r3, r2
 800366a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	89fa      	ldrh	r2, [r7, #14]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e04e      	b.n	8003714 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77bb      	strb	r3, [r7, #30]
 800367a:	e04b      	b.n	8003714 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800367c:	7ffb      	ldrb	r3, [r7, #31]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d827      	bhi.n	80036d2 <UART_SetConfig+0x45e>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x414>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036bd 	.word	0x080036bd
 8003694:	080036d3 	.word	0x080036d3
 8003698:	080036c3 	.word	0x080036c3
 800369c:	080036d3 	.word	0x080036d3
 80036a0:	080036d3 	.word	0x080036d3
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	080036cb 	.word	0x080036cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7ff f8e8 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 80036b0:	61b8      	str	r0, [r7, #24]
        break;
 80036b2:	e013      	b.n	80036dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff f8f8 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 80036b8:	61b8      	str	r0, [r7, #24]
        break;
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <UART_SetConfig+0x4c0>)
 80036be:	61bb      	str	r3, [r7, #24]
        break;
 80036c0:	e00c      	b.n	80036dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c2:	f7ff f81b 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80036c6:	61b8      	str	r0, [r7, #24]
        break;
 80036c8:	e008      	b.n	80036dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ce:	61bb      	str	r3, [r7, #24]
        break;
 80036d0:	e004      	b.n	80036dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	77bb      	strb	r3, [r7, #30]
        break;
 80036da:	bf00      	nop
    }

    if (pclk != 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085a      	lsrs	r2, r3, #1
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d908      	bls.n	8003710 <UART_SetConfig+0x49c>
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d204      	bcs.n	8003710 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e001      	b.n	8003714 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003720:	7fbb      	ldrb	r3, [r7, #30]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40007c00 	.word	0x40007c00
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400

08003738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01a      	beq.n	800384e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d10a      	bne.n	800384e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800388c:	f7fd fb22 	bl	8000ed4 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10e      	bne.n	80038be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f817 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00d      	b.n	80038da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	e05e      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d05a      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fd faea 	bl	8000ed4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <UART_WaitOnFlagUntilTimeout+0x30>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11b      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003920:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e043      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02c      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003966:	d124      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003980:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e00f      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d091      	beq.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__errno>:
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <__errno+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4d0d      	ldr	r5, [pc, #52]	; (8003a20 <__libc_init_array+0x38>)
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	2600      	movs	r6, #0
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	4d0b      	ldr	r5, [pc, #44]	; (8003a28 <__libc_init_array+0x40>)
 80039fa:	4c0c      	ldr	r4, [pc, #48]	; (8003a2c <__libc_init_array+0x44>)
 80039fc:	f000 fc4e 	bl	800429c <_init>
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	2600      	movs	r6, #0
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	080043a8 	.word	0x080043a8
 8003a24:	080043a8 	.word	0x080043a8
 8003a28:	080043a8 	.word	0x080043a8
 8003a2c:	080043ac 	.word	0x080043ac

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <siprintf>:
 8003a40:	b40e      	push	{r1, r2, r3}
 8003a42:	b500      	push	{lr}
 8003a44:	b09c      	sub	sp, #112	; 0x70
 8003a46:	ab1d      	add	r3, sp, #116	; 0x74
 8003a48:	9002      	str	r0, [sp, #8]
 8003a4a:	9006      	str	r0, [sp, #24]
 8003a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <siprintf+0x38>)
 8003a52:	9107      	str	r1, [sp, #28]
 8003a54:	9104      	str	r1, [sp, #16]
 8003a56:	4909      	ldr	r1, [pc, #36]	; (8003a7c <siprintf+0x3c>)
 8003a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a5c:	9105      	str	r1, [sp, #20]
 8003a5e:	6800      	ldr	r0, [r0, #0]
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	a902      	add	r1, sp, #8
 8003a64:	f000 f868 	bl	8003b38 <_svfiprintf_r>
 8003a68:	9b02      	ldr	r3, [sp, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	b01c      	add	sp, #112	; 0x70
 8003a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a74:	b003      	add	sp, #12
 8003a76:	4770      	bx	lr
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	ffff0208 	.word	0xffff0208

08003a80 <__ssputs_r>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	688e      	ldr	r6, [r1, #8]
 8003a86:	429e      	cmp	r6, r3
 8003a88:	4682      	mov	sl, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	461f      	mov	r7, r3
 8003a90:	d838      	bhi.n	8003b04 <__ssputs_r+0x84>
 8003a92:	898a      	ldrh	r2, [r1, #12]
 8003a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a98:	d032      	beq.n	8003b00 <__ssputs_r+0x80>
 8003a9a:	6825      	ldr	r5, [r4, #0]
 8003a9c:	6909      	ldr	r1, [r1, #16]
 8003a9e:	eba5 0901 	sub.w	r9, r5, r1
 8003aa2:	6965      	ldr	r5, [r4, #20]
 8003aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aac:	3301      	adds	r3, #1
 8003aae:	444b      	add	r3, r9
 8003ab0:	106d      	asrs	r5, r5, #1
 8003ab2:	429d      	cmp	r5, r3
 8003ab4:	bf38      	it	cc
 8003ab6:	461d      	movcc	r5, r3
 8003ab8:	0553      	lsls	r3, r2, #21
 8003aba:	d531      	bpl.n	8003b20 <__ssputs_r+0xa0>
 8003abc:	4629      	mov	r1, r5
 8003abe:	f000 fb47 	bl	8004150 <_malloc_r>
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	b950      	cbnz	r0, 8003adc <__ssputs_r+0x5c>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	f8ca 3000 	str.w	r3, [sl]
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003adc:	6921      	ldr	r1, [r4, #16]
 8003ade:	464a      	mov	r2, r9
 8003ae0:	f000 fabe 	bl	8004060 <memcpy>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	6126      	str	r6, [r4, #16]
 8003af2:	6165      	str	r5, [r4, #20]
 8003af4:	444e      	add	r6, r9
 8003af6:	eba5 0509 	sub.w	r5, r5, r9
 8003afa:	6026      	str	r6, [r4, #0]
 8003afc:	60a5      	str	r5, [r4, #8]
 8003afe:	463e      	mov	r6, r7
 8003b00:	42be      	cmp	r6, r7
 8003b02:	d900      	bls.n	8003b06 <__ssputs_r+0x86>
 8003b04:	463e      	mov	r6, r7
 8003b06:	4632      	mov	r2, r6
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	f000 fab6 	bl	800407c <memmove>
 8003b10:	68a3      	ldr	r3, [r4, #8]
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	1b9b      	subs	r3, r3, r6
 8003b16:	4432      	add	r2, r6
 8003b18:	60a3      	str	r3, [r4, #8]
 8003b1a:	6022      	str	r2, [r4, #0]
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e7db      	b.n	8003ad8 <__ssputs_r+0x58>
 8003b20:	462a      	mov	r2, r5
 8003b22:	f000 fb6f 	bl	8004204 <_realloc_r>
 8003b26:	4606      	mov	r6, r0
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d1e1      	bne.n	8003af0 <__ssputs_r+0x70>
 8003b2c:	6921      	ldr	r1, [r4, #16]
 8003b2e:	4650      	mov	r0, sl
 8003b30:	f000 fabe 	bl	80040b0 <_free_r>
 8003b34:	e7c7      	b.n	8003ac6 <__ssputs_r+0x46>
	...

08003b38 <_svfiprintf_r>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	898b      	ldrh	r3, [r1, #12]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	b09d      	sub	sp, #116	; 0x74
 8003b44:	4607      	mov	r7, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	4614      	mov	r4, r2
 8003b4a:	d50e      	bpl.n	8003b6a <_svfiprintf_r+0x32>
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	b963      	cbnz	r3, 8003b6a <_svfiprintf_r+0x32>
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	f000 fafd 	bl	8004150 <_malloc_r>
 8003b56:	6028      	str	r0, [r5, #0]
 8003b58:	6128      	str	r0, [r5, #16]
 8003b5a:	b920      	cbnz	r0, 8003b66 <_svfiprintf_r+0x2e>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e0d1      	b.n	8003d0a <_svfiprintf_r+0x1d2>
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	616b      	str	r3, [r5, #20]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6e:	2320      	movs	r3, #32
 8003b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b78:	2330      	movs	r3, #48	; 0x30
 8003b7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d24 <_svfiprintf_r+0x1ec>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b82:	f04f 0901 	mov.w	r9, #1
 8003b86:	4623      	mov	r3, r4
 8003b88:	469a      	mov	sl, r3
 8003b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8e:	b10a      	cbz	r2, 8003b94 <_svfiprintf_r+0x5c>
 8003b90:	2a25      	cmp	r2, #37	; 0x25
 8003b92:	d1f9      	bne.n	8003b88 <_svfiprintf_r+0x50>
 8003b94:	ebba 0b04 	subs.w	fp, sl, r4
 8003b98:	d00b      	beq.n	8003bb2 <_svfiprintf_r+0x7a>
 8003b9a:	465b      	mov	r3, fp
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7ff ff6d 	bl	8003a80 <__ssputs_r>
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f000 80aa 	beq.w	8003d00 <_svfiprintf_r+0x1c8>
 8003bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bae:	445a      	add	r2, fp
 8003bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8003bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a2 	beq.w	8003d00 <_svfiprintf_r+0x1c8>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc6:	f10a 0a01 	add.w	sl, sl, #1
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	9307      	str	r3, [sp, #28]
 8003bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bd4:	4654      	mov	r4, sl
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bdc:	4851      	ldr	r0, [pc, #324]	; (8003d24 <_svfiprintf_r+0x1ec>)
 8003bde:	f7fc fb1f 	bl	8000220 <memchr>
 8003be2:	9a04      	ldr	r2, [sp, #16]
 8003be4:	b9d8      	cbnz	r0, 8003c1e <_svfiprintf_r+0xe6>
 8003be6:	06d0      	lsls	r0, r2, #27
 8003be8:	bf44      	itt	mi
 8003bea:	2320      	movmi	r3, #32
 8003bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf0:	0711      	lsls	r1, r2, #28
 8003bf2:	bf44      	itt	mi
 8003bf4:	232b      	movmi	r3, #43	; 0x2b
 8003bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8003c00:	d015      	beq.n	8003c2e <_svfiprintf_r+0xf6>
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	4654      	mov	r4, sl
 8003c06:	2000      	movs	r0, #0
 8003c08:	f04f 0c0a 	mov.w	ip, #10
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c12:	3b30      	subs	r3, #48	; 0x30
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d94e      	bls.n	8003cb6 <_svfiprintf_r+0x17e>
 8003c18:	b1b0      	cbz	r0, 8003c48 <_svfiprintf_r+0x110>
 8003c1a:	9207      	str	r2, [sp, #28]
 8003c1c:	e014      	b.n	8003c48 <_svfiprintf_r+0x110>
 8003c1e:	eba0 0308 	sub.w	r3, r0, r8
 8003c22:	fa09 f303 	lsl.w	r3, r9, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	e7d2      	b.n	8003bd4 <_svfiprintf_r+0x9c>
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	1d19      	adds	r1, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9103      	str	r1, [sp, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbb      	ittet	lt
 8003c3a:	425b      	neglt	r3, r3
 8003c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c40:	9307      	strge	r3, [sp, #28]
 8003c42:	9307      	strlt	r3, [sp, #28]
 8003c44:	bfb8      	it	lt
 8003c46:	9204      	strlt	r2, [sp, #16]
 8003c48:	7823      	ldrb	r3, [r4, #0]
 8003c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c4c:	d10c      	bne.n	8003c68 <_svfiprintf_r+0x130>
 8003c4e:	7863      	ldrb	r3, [r4, #1]
 8003c50:	2b2a      	cmp	r3, #42	; 0x2a
 8003c52:	d135      	bne.n	8003cc0 <_svfiprintf_r+0x188>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	9203      	str	r2, [sp, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bfb8      	it	lt
 8003c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c64:	3402      	adds	r4, #2
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d34 <_svfiprintf_r+0x1fc>
 8003c6c:	7821      	ldrb	r1, [r4, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4650      	mov	r0, sl
 8003c72:	f7fc fad5 	bl	8000220 <memchr>
 8003c76:	b140      	cbz	r0, 8003c8a <_svfiprintf_r+0x152>
 8003c78:	2340      	movs	r3, #64	; 0x40
 8003c7a:	eba0 000a 	sub.w	r0, r0, sl
 8003c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c82:	9b04      	ldr	r3, [sp, #16]
 8003c84:	4303      	orrs	r3, r0
 8003c86:	3401      	adds	r4, #1
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8e:	4826      	ldr	r0, [pc, #152]	; (8003d28 <_svfiprintf_r+0x1f0>)
 8003c90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c94:	2206      	movs	r2, #6
 8003c96:	f7fc fac3 	bl	8000220 <memchr>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d038      	beq.n	8003d10 <_svfiprintf_r+0x1d8>
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <_svfiprintf_r+0x1f4>)
 8003ca0:	bb1b      	cbnz	r3, 8003cea <_svfiprintf_r+0x1b2>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	3307      	adds	r3, #7
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	3308      	adds	r3, #8
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb0:	4433      	add	r3, r6
 8003cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb4:	e767      	b.n	8003b86 <_svfiprintf_r+0x4e>
 8003cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cba:	460c      	mov	r4, r1
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e7a5      	b.n	8003c0c <_svfiprintf_r+0xd4>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f04f 0c0a 	mov.w	ip, #10
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd2:	3a30      	subs	r2, #48	; 0x30
 8003cd4:	2a09      	cmp	r2, #9
 8003cd6:	d903      	bls.n	8003ce0 <_svfiprintf_r+0x1a8>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0c5      	beq.n	8003c68 <_svfiprintf_r+0x130>
 8003cdc:	9105      	str	r1, [sp, #20]
 8003cde:	e7c3      	b.n	8003c68 <_svfiprintf_r+0x130>
 8003ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7f0      	b.n	8003ccc <_svfiprintf_r+0x194>
 8003cea:	ab03      	add	r3, sp, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <_svfiprintf_r+0x1f8>)
 8003cf2:	a904      	add	r1, sp, #16
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f3af 8000 	nop.w
 8003cfa:	1c42      	adds	r2, r0, #1
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	d1d6      	bne.n	8003cae <_svfiprintf_r+0x176>
 8003d00:	89ab      	ldrh	r3, [r5, #12]
 8003d02:	065b      	lsls	r3, r3, #25
 8003d04:	f53f af2c 	bmi.w	8003b60 <_svfiprintf_r+0x28>
 8003d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d0a:	b01d      	add	sp, #116	; 0x74
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	ab03      	add	r3, sp, #12
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	462a      	mov	r2, r5
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <_svfiprintf_r+0x1f8>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	f000 f87a 	bl	8003e14 <_printf_i>
 8003d20:	e7eb      	b.n	8003cfa <_svfiprintf_r+0x1c2>
 8003d22:	bf00      	nop
 8003d24:	0800436c 	.word	0x0800436c
 8003d28:	08004376 	.word	0x08004376
 8003d2c:	00000000 	.word	0x00000000
 8003d30:	08003a81 	.word	0x08003a81
 8003d34:	08004372 	.word	0x08004372

08003d38 <_printf_common>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	4699      	mov	r9, r3
 8003d40:	688a      	ldr	r2, [r1, #8]
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bfb8      	it	lt
 8003d4c:	4613      	movlt	r3, r2
 8003d4e:	6033      	str	r3, [r6, #0]
 8003d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d54:	4607      	mov	r7, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	b10a      	cbz	r2, 8003d5e <_printf_common+0x26>
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	0699      	lsls	r1, r3, #26
 8003d62:	bf42      	ittt	mi
 8003d64:	6833      	ldrmi	r3, [r6, #0]
 8003d66:	3302      	addmi	r3, #2
 8003d68:	6033      	strmi	r3, [r6, #0]
 8003d6a:	6825      	ldr	r5, [r4, #0]
 8003d6c:	f015 0506 	ands.w	r5, r5, #6
 8003d70:	d106      	bne.n	8003d80 <_printf_common+0x48>
 8003d72:	f104 0a19 	add.w	sl, r4, #25
 8003d76:	68e3      	ldr	r3, [r4, #12]
 8003d78:	6832      	ldr	r2, [r6, #0]
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	42ab      	cmp	r3, r5
 8003d7e:	dc26      	bgt.n	8003dce <_printf_common+0x96>
 8003d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d84:	1e13      	subs	r3, r2, #0
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	bf18      	it	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	0692      	lsls	r2, r2, #26
 8003d8e:	d42b      	bmi.n	8003de8 <_printf_common+0xb0>
 8003d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d94:	4649      	mov	r1, r9
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d01e      	beq.n	8003ddc <_printf_common+0xa4>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	68e5      	ldr	r5, [r4, #12]
 8003da2:	6832      	ldr	r2, [r6, #0]
 8003da4:	f003 0306 	and.w	r3, r3, #6
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	bf08      	it	eq
 8003dac:	1aad      	subeq	r5, r5, r2
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	bf0c      	ite	eq
 8003db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db8:	2500      	movne	r5, #0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfc4      	itt	gt
 8003dbe:	1a9b      	subgt	r3, r3, r2
 8003dc0:	18ed      	addgt	r5, r5, r3
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	341a      	adds	r4, #26
 8003dc6:	42b5      	cmp	r5, r6
 8003dc8:	d11a      	bne.n	8003e00 <_printf_common+0xc8>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e008      	b.n	8003de0 <_printf_common+0xa8>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	47c0      	blx	r8
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d103      	bne.n	8003de4 <_printf_common+0xac>
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	3501      	adds	r5, #1
 8003de6:	e7c6      	b.n	8003d76 <_printf_common+0x3e>
 8003de8:	18e1      	adds	r1, r4, r3
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	2030      	movs	r0, #48	; 0x30
 8003dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df2:	4422      	add	r2, r4
 8003df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	e7c7      	b.n	8003d90 <_printf_common+0x58>
 8003e00:	2301      	movs	r3, #1
 8003e02:	4622      	mov	r2, r4
 8003e04:	4649      	mov	r1, r9
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c0      	blx	r8
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d0e6      	beq.n	8003ddc <_printf_common+0xa4>
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7d9      	b.n	8003dc6 <_printf_common+0x8e>
	...

08003e14 <_printf_i>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	460c      	mov	r4, r1
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	7e27      	ldrb	r7, [r4, #24]
 8003e1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e20:	2f78      	cmp	r7, #120	; 0x78
 8003e22:	4680      	mov	r8, r0
 8003e24:	469a      	mov	sl, r3
 8003e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e2a:	d807      	bhi.n	8003e3c <_printf_i+0x28>
 8003e2c:	2f62      	cmp	r7, #98	; 0x62
 8003e2e:	d80a      	bhi.n	8003e46 <_printf_i+0x32>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	f000 80d8 	beq.w	8003fe6 <_printf_i+0x1d2>
 8003e36:	2f58      	cmp	r7, #88	; 0x58
 8003e38:	f000 80a3 	beq.w	8003f82 <_printf_i+0x16e>
 8003e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e44:	e03a      	b.n	8003ebc <_printf_i+0xa8>
 8003e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4a:	2b15      	cmp	r3, #21
 8003e4c:	d8f6      	bhi.n	8003e3c <_printf_i+0x28>
 8003e4e:	a001      	add	r0, pc, #4	; (adr r0, 8003e54 <_printf_i+0x40>)
 8003e50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ec1 	.word	0x08003ec1
 8003e5c:	08003e3d 	.word	0x08003e3d
 8003e60:	08003e3d 	.word	0x08003e3d
 8003e64:	08003e3d 	.word	0x08003e3d
 8003e68:	08003e3d 	.word	0x08003e3d
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003e3d 	.word	0x08003e3d
 8003e74:	08003e3d 	.word	0x08003e3d
 8003e78:	08003e3d 	.word	0x08003e3d
 8003e7c:	08003e3d 	.word	0x08003e3d
 8003e80:	08003fcd 	.word	0x08003fcd
 8003e84:	08003ef1 	.word	0x08003ef1
 8003e88:	08003faf 	.word	0x08003faf
 8003e8c:	08003e3d 	.word	0x08003e3d
 8003e90:	08003e3d 	.word	0x08003e3d
 8003e94:	08003fef 	.word	0x08003fef
 8003e98:	08003e3d 	.word	0x08003e3d
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003e3d 	.word	0x08003e3d
 8003ea4:	08003e3d 	.word	0x08003e3d
 8003ea8:	08003fb7 	.word	0x08003fb7
 8003eac:	680b      	ldr	r3, [r1, #0]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	600a      	str	r2, [r1, #0]
 8003eb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0a3      	b.n	8004008 <_printf_i+0x1f4>
 8003ec0:	6825      	ldr	r5, [r4, #0]
 8003ec2:	6808      	ldr	r0, [r1, #0]
 8003ec4:	062e      	lsls	r6, r5, #24
 8003ec6:	f100 0304 	add.w	r3, r0, #4
 8003eca:	d50a      	bpl.n	8003ee2 <_printf_i+0xce>
 8003ecc:	6805      	ldr	r5, [r0, #0]
 8003ece:	600b      	str	r3, [r1, #0]
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0xc8>
 8003ed4:	232d      	movs	r3, #45	; 0x2d
 8003ed6:	426d      	negs	r5, r5
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003edc:	485e      	ldr	r0, [pc, #376]	; (8004058 <_printf_i+0x244>)
 8003ede:	230a      	movs	r3, #10
 8003ee0:	e019      	b.n	8003f16 <_printf_i+0x102>
 8003ee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ee6:	6805      	ldr	r5, [r0, #0]
 8003ee8:	600b      	str	r3, [r1, #0]
 8003eea:	bf18      	it	ne
 8003eec:	b22d      	sxthne	r5, r5
 8003eee:	e7ef      	b.n	8003ed0 <_printf_i+0xbc>
 8003ef0:	680b      	ldr	r3, [r1, #0]
 8003ef2:	6825      	ldr	r5, [r4, #0]
 8003ef4:	1d18      	adds	r0, r3, #4
 8003ef6:	6008      	str	r0, [r1, #0]
 8003ef8:	0628      	lsls	r0, r5, #24
 8003efa:	d501      	bpl.n	8003f00 <_printf_i+0xec>
 8003efc:	681d      	ldr	r5, [r3, #0]
 8003efe:	e002      	b.n	8003f06 <_printf_i+0xf2>
 8003f00:	0669      	lsls	r1, r5, #25
 8003f02:	d5fb      	bpl.n	8003efc <_printf_i+0xe8>
 8003f04:	881d      	ldrh	r5, [r3, #0]
 8003f06:	4854      	ldr	r0, [pc, #336]	; (8004058 <_printf_i+0x244>)
 8003f08:	2f6f      	cmp	r7, #111	; 0x6f
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2308      	moveq	r3, #8
 8003f0e:	230a      	movne	r3, #10
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f16:	6866      	ldr	r6, [r4, #4]
 8003f18:	60a6      	str	r6, [r4, #8]
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	bfa2      	ittt	ge
 8003f1e:	6821      	ldrge	r1, [r4, #0]
 8003f20:	f021 0104 	bicge.w	r1, r1, #4
 8003f24:	6021      	strge	r1, [r4, #0]
 8003f26:	b90d      	cbnz	r5, 8003f2c <_printf_i+0x118>
 8003f28:	2e00      	cmp	r6, #0
 8003f2a:	d04d      	beq.n	8003fc8 <_printf_i+0x1b4>
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f32:	fb03 5711 	mls	r7, r3, r1, r5
 8003f36:	5dc7      	ldrb	r7, [r0, r7]
 8003f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f3c:	462f      	mov	r7, r5
 8003f3e:	42bb      	cmp	r3, r7
 8003f40:	460d      	mov	r5, r1
 8003f42:	d9f4      	bls.n	8003f2e <_printf_i+0x11a>
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d10b      	bne.n	8003f60 <_printf_i+0x14c>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07df      	lsls	r7, r3, #31
 8003f4c:	d508      	bpl.n	8003f60 <_printf_i+0x14c>
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	4299      	cmp	r1, r3
 8003f54:	bfde      	ittt	le
 8003f56:	2330      	movle	r3, #48	; 0x30
 8003f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f60:	1b92      	subs	r2, r2, r6
 8003f62:	6122      	str	r2, [r4, #16]
 8003f64:	f8cd a000 	str.w	sl, [sp]
 8003f68:	464b      	mov	r3, r9
 8003f6a:	aa03      	add	r2, sp, #12
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7ff fee2 	bl	8003d38 <_printf_common>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d14c      	bne.n	8004012 <_printf_i+0x1fe>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	b004      	add	sp, #16
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	4835      	ldr	r0, [pc, #212]	; (8004058 <_printf_i+0x244>)
 8003f84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	680e      	ldr	r6, [r1, #0]
 8003f8c:	061f      	lsls	r7, r3, #24
 8003f8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f92:	600e      	str	r6, [r1, #0]
 8003f94:	d514      	bpl.n	8003fc0 <_printf_i+0x1ac>
 8003f96:	07d9      	lsls	r1, r3, #31
 8003f98:	bf44      	itt	mi
 8003f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9e:	6023      	strmi	r3, [r4, #0]
 8003fa0:	b91d      	cbnz	r5, 8003faa <_printf_i+0x196>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	f023 0320 	bic.w	r3, r3, #32
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	2310      	movs	r3, #16
 8003fac:	e7b0      	b.n	8003f10 <_printf_i+0xfc>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f043 0320 	orr.w	r3, r3, #32
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	2378      	movs	r3, #120	; 0x78
 8003fb8:	4828      	ldr	r0, [pc, #160]	; (800405c <_printf_i+0x248>)
 8003fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fbe:	e7e3      	b.n	8003f88 <_printf_i+0x174>
 8003fc0:	065e      	lsls	r6, r3, #25
 8003fc2:	bf48      	it	mi
 8003fc4:	b2ad      	uxthmi	r5, r5
 8003fc6:	e7e6      	b.n	8003f96 <_printf_i+0x182>
 8003fc8:	4616      	mov	r6, r2
 8003fca:	e7bb      	b.n	8003f44 <_printf_i+0x130>
 8003fcc:	680b      	ldr	r3, [r1, #0]
 8003fce:	6826      	ldr	r6, [r4, #0]
 8003fd0:	6960      	ldr	r0, [r4, #20]
 8003fd2:	1d1d      	adds	r5, r3, #4
 8003fd4:	600d      	str	r5, [r1, #0]
 8003fd6:	0635      	lsls	r5, r6, #24
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	d501      	bpl.n	8003fe0 <_printf_i+0x1cc>
 8003fdc:	6018      	str	r0, [r3, #0]
 8003fde:	e002      	b.n	8003fe6 <_printf_i+0x1d2>
 8003fe0:	0671      	lsls	r1, r6, #25
 8003fe2:	d5fb      	bpl.n	8003fdc <_printf_i+0x1c8>
 8003fe4:	8018      	strh	r0, [r3, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	4616      	mov	r6, r2
 8003fec:	e7ba      	b.n	8003f64 <_printf_i+0x150>
 8003fee:	680b      	ldr	r3, [r1, #0]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	600a      	str	r2, [r1, #0]
 8003ff4:	681e      	ldr	r6, [r3, #0]
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7fc f910 	bl	8000220 <memchr>
 8004000:	b108      	cbz	r0, 8004006 <_printf_i+0x1f2>
 8004002:	1b80      	subs	r0, r0, r6
 8004004:	6060      	str	r0, [r4, #4]
 8004006:	6863      	ldr	r3, [r4, #4]
 8004008:	6123      	str	r3, [r4, #16]
 800400a:	2300      	movs	r3, #0
 800400c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004010:	e7a8      	b.n	8003f64 <_printf_i+0x150>
 8004012:	6923      	ldr	r3, [r4, #16]
 8004014:	4632      	mov	r2, r6
 8004016:	4649      	mov	r1, r9
 8004018:	4640      	mov	r0, r8
 800401a:	47d0      	blx	sl
 800401c:	3001      	adds	r0, #1
 800401e:	d0ab      	beq.n	8003f78 <_printf_i+0x164>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	079b      	lsls	r3, r3, #30
 8004024:	d413      	bmi.n	800404e <_printf_i+0x23a>
 8004026:	68e0      	ldr	r0, [r4, #12]
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	4298      	cmp	r0, r3
 800402c:	bfb8      	it	lt
 800402e:	4618      	movlt	r0, r3
 8004030:	e7a4      	b.n	8003f7c <_printf_i+0x168>
 8004032:	2301      	movs	r3, #1
 8004034:	4632      	mov	r2, r6
 8004036:	4649      	mov	r1, r9
 8004038:	4640      	mov	r0, r8
 800403a:	47d0      	blx	sl
 800403c:	3001      	adds	r0, #1
 800403e:	d09b      	beq.n	8003f78 <_printf_i+0x164>
 8004040:	3501      	adds	r5, #1
 8004042:	68e3      	ldr	r3, [r4, #12]
 8004044:	9903      	ldr	r1, [sp, #12]
 8004046:	1a5b      	subs	r3, r3, r1
 8004048:	42ab      	cmp	r3, r5
 800404a:	dcf2      	bgt.n	8004032 <_printf_i+0x21e>
 800404c:	e7eb      	b.n	8004026 <_printf_i+0x212>
 800404e:	2500      	movs	r5, #0
 8004050:	f104 0619 	add.w	r6, r4, #25
 8004054:	e7f5      	b.n	8004042 <_printf_i+0x22e>
 8004056:	bf00      	nop
 8004058:	0800437d 	.word	0x0800437d
 800405c:	0800438e 	.word	0x0800438e

08004060 <memcpy>:
 8004060:	440a      	add	r2, r1
 8004062:	4291      	cmp	r1, r2
 8004064:	f100 33ff 	add.w	r3, r0, #4294967295
 8004068:	d100      	bne.n	800406c <memcpy+0xc>
 800406a:	4770      	bx	lr
 800406c:	b510      	push	{r4, lr}
 800406e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004076:	4291      	cmp	r1, r2
 8004078:	d1f9      	bne.n	800406e <memcpy+0xe>
 800407a:	bd10      	pop	{r4, pc}

0800407c <memmove>:
 800407c:	4288      	cmp	r0, r1
 800407e:	b510      	push	{r4, lr}
 8004080:	eb01 0402 	add.w	r4, r1, r2
 8004084:	d902      	bls.n	800408c <memmove+0x10>
 8004086:	4284      	cmp	r4, r0
 8004088:	4623      	mov	r3, r4
 800408a:	d807      	bhi.n	800409c <memmove+0x20>
 800408c:	1e43      	subs	r3, r0, #1
 800408e:	42a1      	cmp	r1, r4
 8004090:	d008      	beq.n	80040a4 <memmove+0x28>
 8004092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800409a:	e7f8      	b.n	800408e <memmove+0x12>
 800409c:	4402      	add	r2, r0
 800409e:	4601      	mov	r1, r0
 80040a0:	428a      	cmp	r2, r1
 80040a2:	d100      	bne.n	80040a6 <memmove+0x2a>
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ae:	e7f7      	b.n	80040a0 <memmove+0x24>

080040b0 <_free_r>:
 80040b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d048      	beq.n	8004148 <_free_r+0x98>
 80040b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ba:	9001      	str	r0, [sp, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f1a1 0404 	sub.w	r4, r1, #4
 80040c2:	bfb8      	it	lt
 80040c4:	18e4      	addlt	r4, r4, r3
 80040c6:	f000 f8d3 	bl	8004270 <__malloc_lock>
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <_free_r+0x9c>)
 80040cc:	9801      	ldr	r0, [sp, #4]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	4615      	mov	r5, r2
 80040d2:	b933      	cbnz	r3, 80040e2 <_free_r+0x32>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	b003      	add	sp, #12
 80040da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040de:	f000 b8cd 	b.w	800427c <__malloc_unlock>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d90b      	bls.n	80040fe <_free_r+0x4e>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	1862      	adds	r2, r4, r1
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bf04      	itt	eq
 80040ee:	681a      	ldreq	r2, [r3, #0]
 80040f0:	685b      	ldreq	r3, [r3, #4]
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	bf04      	itt	eq
 80040f6:	1852      	addeq	r2, r2, r1
 80040f8:	6022      	streq	r2, [r4, #0]
 80040fa:	602c      	str	r4, [r5, #0]
 80040fc:	e7ec      	b.n	80040d8 <_free_r+0x28>
 80040fe:	461a      	mov	r2, r3
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b10b      	cbz	r3, 8004108 <_free_r+0x58>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d9fa      	bls.n	80040fe <_free_r+0x4e>
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	1855      	adds	r5, r2, r1
 800410c:	42a5      	cmp	r5, r4
 800410e:	d10b      	bne.n	8004128 <_free_r+0x78>
 8004110:	6824      	ldr	r4, [r4, #0]
 8004112:	4421      	add	r1, r4
 8004114:	1854      	adds	r4, r2, r1
 8004116:	42a3      	cmp	r3, r4
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	d1dd      	bne.n	80040d8 <_free_r+0x28>
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	4421      	add	r1, r4
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	e7d7      	b.n	80040d8 <_free_r+0x28>
 8004128:	d902      	bls.n	8004130 <_free_r+0x80>
 800412a:	230c      	movs	r3, #12
 800412c:	6003      	str	r3, [r0, #0]
 800412e:	e7d3      	b.n	80040d8 <_free_r+0x28>
 8004130:	6825      	ldr	r5, [r4, #0]
 8004132:	1961      	adds	r1, r4, r5
 8004134:	428b      	cmp	r3, r1
 8004136:	bf04      	itt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	bf04      	itt	eq
 8004140:	1949      	addeq	r1, r1, r5
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	6054      	str	r4, [r2, #4]
 8004146:	e7c7      	b.n	80040d8 <_free_r+0x28>
 8004148:	b003      	add	sp, #12
 800414a:	bd30      	pop	{r4, r5, pc}
 800414c:	20000090 	.word	0x20000090

08004150 <_malloc_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	1ccd      	adds	r5, r1, #3
 8004154:	f025 0503 	bic.w	r5, r5, #3
 8004158:	3508      	adds	r5, #8
 800415a:	2d0c      	cmp	r5, #12
 800415c:	bf38      	it	cc
 800415e:	250c      	movcc	r5, #12
 8004160:	2d00      	cmp	r5, #0
 8004162:	4606      	mov	r6, r0
 8004164:	db01      	blt.n	800416a <_malloc_r+0x1a>
 8004166:	42a9      	cmp	r1, r5
 8004168:	d903      	bls.n	8004172 <_malloc_r+0x22>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004172:	f000 f87d 	bl	8004270 <__malloc_lock>
 8004176:	4921      	ldr	r1, [pc, #132]	; (80041fc <_malloc_r+0xac>)
 8004178:	680a      	ldr	r2, [r1, #0]
 800417a:	4614      	mov	r4, r2
 800417c:	b99c      	cbnz	r4, 80041a6 <_malloc_r+0x56>
 800417e:	4f20      	ldr	r7, [pc, #128]	; (8004200 <_malloc_r+0xb0>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b923      	cbnz	r3, 800418e <_malloc_r+0x3e>
 8004184:	4621      	mov	r1, r4
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f862 	bl	8004250 <_sbrk_r>
 800418c:	6038      	str	r0, [r7, #0]
 800418e:	4629      	mov	r1, r5
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f85d 	bl	8004250 <_sbrk_r>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	d123      	bne.n	80041e2 <_malloc_r+0x92>
 800419a:	230c      	movs	r3, #12
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 f86c 	bl	800427c <__malloc_unlock>
 80041a4:	e7e3      	b.n	800416e <_malloc_r+0x1e>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	1b5b      	subs	r3, r3, r5
 80041aa:	d417      	bmi.n	80041dc <_malloc_r+0x8c>
 80041ac:	2b0b      	cmp	r3, #11
 80041ae:	d903      	bls.n	80041b8 <_malloc_r+0x68>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	441c      	add	r4, r3
 80041b4:	6025      	str	r5, [r4, #0]
 80041b6:	e004      	b.n	80041c2 <_malloc_r+0x72>
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	42a2      	cmp	r2, r4
 80041bc:	bf0c      	ite	eq
 80041be:	600b      	streq	r3, [r1, #0]
 80041c0:	6053      	strne	r3, [r2, #4]
 80041c2:	4630      	mov	r0, r6
 80041c4:	f000 f85a 	bl	800427c <__malloc_unlock>
 80041c8:	f104 000b 	add.w	r0, r4, #11
 80041cc:	1d23      	adds	r3, r4, #4
 80041ce:	f020 0007 	bic.w	r0, r0, #7
 80041d2:	1ac2      	subs	r2, r0, r3
 80041d4:	d0cc      	beq.n	8004170 <_malloc_r+0x20>
 80041d6:	1a1b      	subs	r3, r3, r0
 80041d8:	50a3      	str	r3, [r4, r2]
 80041da:	e7c9      	b.n	8004170 <_malloc_r+0x20>
 80041dc:	4622      	mov	r2, r4
 80041de:	6864      	ldr	r4, [r4, #4]
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x2c>
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d0e3      	beq.n	80041b4 <_malloc_r+0x64>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f82e 	bl	8004250 <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d1dd      	bne.n	80041b4 <_malloc_r+0x64>
 80041f8:	e7cf      	b.n	800419a <_malloc_r+0x4a>
 80041fa:	bf00      	nop
 80041fc:	20000090 	.word	0x20000090
 8004200:	20000094 	.word	0x20000094

08004204 <_realloc_r>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4607      	mov	r7, r0
 8004208:	4614      	mov	r4, r2
 800420a:	460e      	mov	r6, r1
 800420c:	b921      	cbnz	r1, 8004218 <_realloc_r+0x14>
 800420e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004212:	4611      	mov	r1, r2
 8004214:	f7ff bf9c 	b.w	8004150 <_malloc_r>
 8004218:	b922      	cbnz	r2, 8004224 <_realloc_r+0x20>
 800421a:	f7ff ff49 	bl	80040b0 <_free_r>
 800421e:	4625      	mov	r5, r4
 8004220:	4628      	mov	r0, r5
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	f000 f830 	bl	8004288 <_malloc_usable_size_r>
 8004228:	42a0      	cmp	r0, r4
 800422a:	d20f      	bcs.n	800424c <_realloc_r+0x48>
 800422c:	4621      	mov	r1, r4
 800422e:	4638      	mov	r0, r7
 8004230:	f7ff ff8e 	bl	8004150 <_malloc_r>
 8004234:	4605      	mov	r5, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	d0f2      	beq.n	8004220 <_realloc_r+0x1c>
 800423a:	4631      	mov	r1, r6
 800423c:	4622      	mov	r2, r4
 800423e:	f7ff ff0f 	bl	8004060 <memcpy>
 8004242:	4631      	mov	r1, r6
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff ff33 	bl	80040b0 <_free_r>
 800424a:	e7e9      	b.n	8004220 <_realloc_r+0x1c>
 800424c:	4635      	mov	r5, r6
 800424e:	e7e7      	b.n	8004220 <_realloc_r+0x1c>

08004250 <_sbrk_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d06      	ldr	r5, [pc, #24]	; (800426c <_sbrk_r+0x1c>)
 8004254:	2300      	movs	r3, #0
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fc fd78 	bl	8000d50 <_sbrk>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_sbrk_r+0x1a>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b103      	cbz	r3, 800426a <_sbrk_r+0x1a>
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20000174 	.word	0x20000174

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__malloc_lock+0x8>)
 8004272:	f000 b811 	b.w	8004298 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	2000017c 	.word	0x2000017c

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <__malloc_unlock+0x8>)
 800427e:	f000 b80c 	b.w	800429a <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	2000017c 	.word	0x2000017c

08004288 <_malloc_usable_size_r>:
 8004288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800428c:	1f18      	subs	r0, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	bfbc      	itt	lt
 8004292:	580b      	ldrlt	r3, [r1, r0]
 8004294:	18c0      	addlt	r0, r0, r3
 8004296:	4770      	bx	lr

08004298 <__retarget_lock_acquire_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_release_recursive>:
 800429a:	4770      	bx	lr

0800429c <_init>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr

080042a8 <_fini>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr
