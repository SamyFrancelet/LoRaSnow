
LoRaSnow_GarminLidarLiteV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08003d60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003d60  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c63  00000000  00000000  0002dc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c4  00000000  00000000  00030ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca75  00000000  00000000  0004746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008899e  00000000  00000000  00053ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc87f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000dc8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003be8 	.word	0x08003be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003be8 	.word	0x08003be8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <LIDAR_init>:

#include "../Inc/LIDARLite_v4LED.h"

//Initialize the I2C port
bool LIDAR_init(LIDARLite_TypeDef* lidar, uint8_t addr, I2C_HandleTypeDef* i2cPort)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	460b      	mov	r3, r1
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	72fb      	strb	r3, [r7, #11]
	lidar->addr = addr;		//Save LIDAR address
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	7afa      	ldrb	r2, [r7, #11]
 800059a:	701a      	strb	r2, [r3, #0]
	_i2cPort = i2cPort;		//Save I2C port
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <LIDAR_init+0x38>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]

	//Read status to check if lidar is connected
	lidar->isConnected = LIDAR_read(lidar, STATUS, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2101      	movs	r1, #1
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f000 f894 	bl	80006d4 <LIDAR_read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	735a      	strb	r2, [r3, #13]

	return lidar->isConnected;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7b5b      	ldrb	r3, [r3, #13]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <LIDAR_takeRange>:
/*------------------------------------------------------------------------------
  Take Range
  Initiate a distance measurement by writing to register 0x00.
------------------------------------------------------------------------------*/
void LIDAR_takeRange(LIDARLite_TypeDef* lidar)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	lidar->buf[0] = 0x04;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2204      	movs	r2, #4
 80005d0:	705a      	strb	r2, [r3, #1]
	LIDAR_write(lidar, ACQ_COMMANDS, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f852 	bl	8000680 <LIDAR_write>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LIDAR_waitForBusy>:
/*------------------------------------------------------------------------------
  Wait for Busy Flag
  Blocking function to wait until the Lidar Lite's internal busy flag goes low
------------------------------------------------------------------------------*/
void LIDAR_waitForBusy(LIDARLite_TypeDef* lidar)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag;

	do
	{
		busyFlag = LIDAR_getBusyFlag(lidar);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f80a 	bl	8000606 <LIDAR_getBusyFlag>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	} while (busyFlag);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f7      	bne.n	80005ec <LIDAR_waitForBusy+0x8>
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <LIDAR_getBusyFlag>:
/*------------------------------------------------------------------------------
  Get Busy Flag
  Read BUSY flag from device registers. Function will return 0x00 if not busy.
------------------------------------------------------------------------------*/
uint8_t LIDAR_getBusyFlag(LIDARLite_TypeDef* lidar)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag; // busyFlag monitors when the device is done with a measurement

	// Read status register to check busy flag
	LIDAR_read(lidar, STATUS, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	2101      	movs	r1, #1
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f85e 	bl	80006d4 <LIDAR_read>

	// STATUS bit 0 is busyFlag
	busyFlag = lidar->buf[0] & 0x01;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]

	return busyFlag;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LIDAR_readDistance>:
/*------------------------------------------------------------------------------
  Read Distance
  Read and return the result of the most recent distance measurement.
------------------------------------------------------------------------------*/
uint16_t LIDAR_readDistance(LIDARLite_TypeDef* lidar)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint16_t distance;

	// Read two bytes from registers 0x10 and 0x11
	LIDAR_read(lidar, FULL_DELAY_LOW, 2);
 8000634:	2202      	movs	r2, #2
 8000636:	2110      	movs	r1, #16
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f84b 	bl	80006d4 <LIDAR_read>

	distance = lidar->buf[0] + (lidar->buf[1]<<8);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	b29a      	uxth	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	789b      	ldrb	r3, [r3, #2]
 8000648:	b29b      	uxth	r3, r3
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	4413      	add	r3, r2
 8000650:	81fb      	strh	r3, [r7, #14]

	return distance; //This is the distance in centimeters
 8000652:	89fb      	ldrh	r3, [r7, #14]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LIDAR_getDistance>:


//Get distance measurement function
uint16_t LIDAR_getDistance(LIDARLite_TypeDef* lidar)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	// 1. Trigger a range measurement.
	LIDAR_takeRange(lidar);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffad 	bl	80005c4 <LIDAR_takeRange>

	// 2. Wait for busyFlag to indicate the device is idle.
	LIDAR_waitForBusy(lidar);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ffba 	bl	80005e4 <LIDAR_waitForBusy>

	// 3. Read new distance data from device registers
	return LIDAR_readDistance(lidar);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffdb 	bl	800062c <LIDAR_readDistance>
 8000676:	4603      	mov	r3, r0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <LIDAR_write>:
  regAddr:   register address to write to
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to write
------------------------------------------------------------------------------*/
bool LIDAR_write(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af04      	add	r7, sp, #16
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <LIDAR_write+0x50>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b299      	uxth	r1, r3
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	b29c      	uxth	r4, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	78ba      	ldrb	r2, [r7, #2]
 80006a4:	b292      	uxth	r2, r2
 80006a6:	f04f 35ff 	mov.w	r5, #4294967295
 80006aa:	9502      	str	r5, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	4622      	mov	r2, r4
 80006b4:	f001 f832 	bl	800171c <HAL_I2C_Mem_Write>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in transmission
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <LIDAR_write+0x46>
		return false;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <LIDAR_write+0x48>
	else
		return true;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bdb0      	pop	{r4, r5, r7, pc}
 80006d0:	2000009c 	.word	0x2000009c

080006d4 <LIDAR_read>:
  regAddr:   register address to read
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to read
------------------------------------------------------------------------------*/
bool LIDAR_read(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af04      	add	r7, sp, #16
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
 80006e0:	4613      	mov	r3, r2
 80006e2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <LIDAR_read+0x50>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b299      	uxth	r1, r3
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	b29c      	uxth	r4, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	78ba      	ldrb	r2, [r7, #2]
 80006f8:	b292      	uxth	r2, r2
 80006fa:	f04f 35ff 	mov.w	r5, #4294967295
 80006fe:	9502      	str	r5, [sp, #8]
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2301      	movs	r3, #1
 8000706:	4622      	mov	r2, r4
 8000708:	f001 f902 	bl	8001910 <HAL_I2C_Mem_Read>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in reception
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <LIDAR_read+0x46>
		return false;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <LIDAR_read+0x48>
	else
		return true;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bdb0      	pop	{r4, r5, r7, pc}
 8000724:	2000009c 	.word	0x2000009c

08000728 <LIDARfc_init>:
 */

#include "../Inc/LIDAR_functions.h"

void LIDARfc_init(UART_HandleTypeDef* huart2, LIDARLite_TypeDef* lidar, I2C_HandleTypeDef* hi2c1)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	_huart2 = huart2;
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <LIDARfc_init+0x74>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6013      	str	r3, [r2, #0]
	_hi2c1 = hi2c1;
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <LIDARfc_init+0x78>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6013      	str	r3, [r2, #0]
	_lidar = lidar;
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <LIDARfc_init+0x7c>)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	6013      	str	r3, [r2, #0]

	//Connect to LIDAR
	bool connect = LIDAR_init(_lidar, LIDAR_DEFAULT_ADDR, _hi2c1);
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <LIDARfc_init+0x7c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <LIDARfc_init+0x78>)
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	21c4      	movs	r1, #196	; 0xc4
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff19 	bl	8000588 <LIDAR_init>
 8000756:	4603      	mov	r3, r0
 8000758:	75fb      	strb	r3, [r7, #23]

	if(connect)
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00e      	beq.n	800077e <LIDARfc_init+0x56>
	   strcpy((char*)str, "Successfully connected.\r\n");
 8000760:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <LIDARfc_init+0x80>)
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <LIDARfc_init+0x84>)
 8000764:	4615      	mov	r5, r2
 8000766:	461c      	mov	r4, r3
 8000768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076a:	6028      	str	r0, [r5, #0]
 800076c:	6069      	str	r1, [r5, #4]
 800076e:	60aa      	str	r2, [r5, #8]
 8000770:	60eb      	str	r3, [r5, #12]
 8000772:	cc03      	ldmia	r4!, {r0, r1}
 8000774:	6128      	str	r0, [r5, #16]
 8000776:	6169      	str	r1, [r5, #20]
 8000778:	8823      	ldrh	r3, [r4, #0]
 800077a:	832b      	strh	r3, [r5, #24]
 800077c:	e006      	b.n	800078c <LIDARfc_init+0x64>
	else
	   strcpy((char*)str, "Error.\r\n");
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LIDARfc_init+0x80>)
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LIDARfc_init+0x88>)
 8000782:	cb03      	ldmia	r3!, {r0, r1}
 8000784:	6010      	str	r0, [r2, #0]
 8000786:	6051      	str	r1, [r2, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	7213      	strb	r3, [r2, #8]

	LIDARfc_printf(str);
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <LIDARfc_init+0x80>)
 800078e:	f000 f855 	bl	800083c <LIDARfc_printf>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
 800079a:	bf00      	nop
 800079c:	200000a0 	.word	0x200000a0
 80007a0:	20000110 	.word	0x20000110
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	200000ac 	.word	0x200000ac
 80007ac:	08003c00 	.word	0x08003c00
 80007b0:	08003c1c 	.word	0x08003c1c

080007b4 <LIDARfc_measureNoise>:
{

}

void LIDARfc_measureNoise()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint16_t distance = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	80bb      	strh	r3, [r7, #4]

	if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))	//User button to start measurement
 80007c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <LIDARfc_measureNoise+0x74>)
 80007c8:	f000 fe32 	bl	8001430 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d125      	bne.n	800081e <LIDARfc_measureNoise+0x6a>
	{
	  for(i = 0; i < 100; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	e016      	b.n	8000806 <LIDARfc_measureNoise+0x52>
	  {
		  distance = LIDAR_getDistance(_lidar);
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <LIDARfc_measureNoise+0x78>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff3d 	bl	800065c <LIDAR_getDistance>
 80007e2:	4603      	mov	r3, r0
 80007e4:	80bb      	strh	r3, [r7, #4]

		  sprintf((char*)str, "%i;", distance);
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4911      	ldr	r1, [pc, #68]	; (8000830 <LIDARfc_measureNoise+0x7c>)
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <LIDARfc_measureNoise+0x80>)
 80007ee:	f002 fdcd 	bl	800338c <siprintf>
		  LIDARfc_printf(str);
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <LIDARfc_measureNoise+0x80>)
 80007f4:	f000 f822 	bl	800083c <LIDARfc_printf>

		  HAL_Delay(500);
 80007f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fc:	f000 fb8a 	bl	8000f14 <HAL_Delay>
	  for(i = 0; i < 100; i++)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3301      	adds	r3, #1
 8000804:	71fb      	strb	r3, [r7, #7]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b63      	cmp	r3, #99	; 0x63
 800080a:	d9e5      	bls.n	80007d8 <LIDARfc_measureNoise+0x24>
	  }

	  strcpy((char*)str, "\r\n");
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <LIDARfc_measureNoise+0x80>)
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LIDARfc_measureNoise+0x84>)
 8000810:	8811      	ldrh	r1, [r2, #0]
 8000812:	7892      	ldrb	r2, [r2, #2]
 8000814:	8019      	strh	r1, [r3, #0]
 8000816:	709a      	strb	r2, [r3, #2]
	  LIDARfc_printf(str);
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <LIDARfc_measureNoise+0x80>)
 800081a:	f000 f80f 	bl	800083c <LIDARfc_printf>
	}
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40020800 	.word	0x40020800
 800082c:	200000a4 	.word	0x200000a4
 8000830:	08003c28 	.word	0x08003c28
 8000834:	200000ac 	.word	0x200000ac
 8000838:	08003c2c 	.word	0x08003c2c

0800083c <LIDARfc_printf>:
{
	return 0;
}

void LIDARfc_printf(uint8_t* toSend)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_huart2, toSend, strlen((char*)toSend), HAL_MAX_DELAY);
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <LIDARfc_printf+0x2c>)
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff fcc9 	bl	80001e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	4620      	mov	r0, r4
 800085a:	f002 fa9c 	bl	8002d96 <HAL_UART_Transmit>
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}
 8000866:	bf00      	nop
 8000868:	200000a0 	.word	0x200000a0

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fadd 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f853 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 f911 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087e:	f000 f8e5 	bl	8000a4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000882:	f000 f8b5 	bl	80009f0 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LIDARfc_init(&huart2, &lidar, &hi2c1);
 8000886:	463b      	mov	r3, r7
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <main+0xa0>)
 800088a:	4619      	mov	r1, r3
 800088c:	4820      	ldr	r0, [pc, #128]	; (8000910 <main+0xa4>)
 800088e:	f7ff ff4b 	bl	8000728 <LIDARfc_init>

   strcpy((char*)str, "Measuring distance VS temperature. Taking 100 measures. \r\n");
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <main+0xa8>)
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <main+0xac>)
 8000896:	4614      	mov	r4, r2
 8000898:	469c      	mov	ip, r3
 800089a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800089e:	4665      	mov	r5, ip
 80008a0:	4626      	mov	r6, r4
 80008a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008a4:	6028      	str	r0, [r5, #0]
 80008a6:	6069      	str	r1, [r5, #4]
 80008a8:	60aa      	str	r2, [r5, #8]
 80008aa:	60eb      	str	r3, [r5, #12]
 80008ac:	3410      	adds	r4, #16
 80008ae:	f10c 0c10 	add.w	ip, ip, #16
 80008b2:	4574      	cmp	r4, lr
 80008b4:	d1f3      	bne.n	800089e <main+0x32>
 80008b6:	4662      	mov	r2, ip
 80008b8:	4623      	mov	r3, r4
 80008ba:	cb03      	ldmia	r3!, {r0, r1}
 80008bc:	6010      	str	r0, [r2, #0]
 80008be:	6051      	str	r1, [r2, #4]
 80008c0:	8819      	ldrh	r1, [r3, #0]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	8111      	strh	r1, [r2, #8]
 80008c6:	7293      	strb	r3, [r2, #10]
   LIDARfc_printf(str);
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <main+0xa8>)
 80008ca:	f7ff ffb7 	bl	800083c <LIDARfc_printf>
   strcpy((char*)str, "From -20°C to 40°C, step = 5°C.\r\n");
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0xa8>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <main+0xb0>)
 80008d2:	4614      	mov	r4, r2
 80008d4:	469c      	mov	ip, r3
 80008d6:	f104 0e20 	add.w	lr, r4, #32
 80008da:	4665      	mov	r5, ip
 80008dc:	4626      	mov	r6, r4
 80008de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008e0:	6028      	str	r0, [r5, #0]
 80008e2:	6069      	str	r1, [r5, #4]
 80008e4:	60aa      	str	r2, [r5, #8]
 80008e6:	60eb      	str	r3, [r5, #12]
 80008e8:	3410      	adds	r4, #16
 80008ea:	f10c 0c10 	add.w	ip, ip, #16
 80008ee:	4574      	cmp	r4, lr
 80008f0:	d1f3      	bne.n	80008da <main+0x6e>
 80008f2:	4663      	mov	r3, ip
 80008f4:	4622      	mov	r2, r4
 80008f6:	6810      	ldr	r0, [r2, #0]
 80008f8:	6018      	str	r0, [r3, #0]
 80008fa:	7912      	ldrb	r2, [r2, #4]
 80008fc:	711a      	strb	r2, [r3, #4]
   LIDARfc_printf(str);
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <main+0xa8>)
 8000900:	f7ff ff9c 	bl	800083c <LIDARfc_printf>

  while (1)
  {
	  LIDARfc_measureNoise();
 8000904:	f7ff ff56 	bl	80007b4 <LIDARfc_measureNoise>
 8000908:	e7fc      	b.n	8000904 <main+0x98>
 800090a:	bf00      	nop
 800090c:	20000114 	.word	0x20000114
 8000910:	20000168 	.word	0x20000168
 8000914:	200000ac 	.word	0x200000ac
 8000918:	08003c30 	.word	0x08003c30
 800091c:	08003c6c 	.word	0x08003c6c

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fd24 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <SystemClock_Config+0xc8>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <SystemClock_Config+0xc8>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <SystemClock_Config+0xc8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <SystemClock_Config+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <SystemClock_Config+0xcc>)
 800096a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <SystemClock_Config+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fd35 	bl	8002414 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b0:	f000 f8e4 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2103      	movs	r1, #3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 ff97 	bl	8002904 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009dc:	f000 f8ce 	bl	8000b7c <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3750      	adds	r7, #80	; 0x50
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_I2C1_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C1_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a2e:	f000 fd31 	bl	8001494 <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a38:	f000 f8a0 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000114 	.word	0x20000114
 8000a44:	40005400 	.word	0x40005400
 8000a48:	00061a80 	.word	0x00061a80

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f002 f93a 	bl	8002cfc <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f875 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000168 	.word	0x20000168
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b2c:	f000 fc98 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b48:	f000 faee 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b64:	f000 fae0 	bl	8001128 <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa7a 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c34:	f000 fa78 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_UART_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12b      	bne.n	8000ce2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000cde:	f000 fa23 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8c6 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f002 fad4 	bl	8003328 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	2000008c 	.word	0x2000008c
 8000db4:	200001c0 	.word	0x200001c0

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f002 fa93 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fd2d 	bl	800086c <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e20:	08003cf0 	.word	0x08003cf0
  ldr r2, =_sbss
 8000e24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e28:	200001c0 	.word	0x200001c0

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f931 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe90 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93b 	bl	800110e <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f911 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	200001ac 	.word	0x200001ac

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200001ac 	.word	0x200001ac

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff47 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff5c 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffb0 	bl	800107c <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e159      	b.n	80013f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8148 	bne.w	80013f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	2b02      	cmp	r3, #2
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d017      	beq.n	8001218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d123      	bne.n	800126c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0203 	and.w	r2, r3, #3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a2 	beq.w	80013f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_GPIO_Init+0x2e8>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a56      	ldr	r2, [pc, #344]	; (8001410 <HAL_GPIO_Init+0x2e8>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b54      	ldr	r3, [pc, #336]	; (8001410 <HAL_GPIO_Init+0x2e8>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x2ec>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_GPIO_Init+0x2f0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x202>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x1fe>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a47      	ldr	r2, [pc, #284]	; (8001420 <HAL_GPIO_Init+0x2f8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x1fa>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a46      	ldr	r2, [pc, #280]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x1f6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_GPIO_Init+0x300>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x1f2>
 8001316:	2304      	movs	r3, #4
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x204>
 800131a:	2307      	movs	r3, #7
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x204>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x204>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x204>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x204>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x2ec>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_GPIO_Init+0x304>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136e:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_GPIO_Init+0x304>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_GPIO_Init+0x304>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001398:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_GPIO_Init+0x304>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_GPIO_Init+0x304>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_GPIO_Init+0x304>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_GPIO_Init+0x304>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_GPIO_Init+0x304>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f aea2 	bls.w	8001144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e12b      	b.n	80016fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fb8c 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f8:	f001 fbd8 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a81      	ldr	r2, [pc, #516]	; (8001708 <HAL_I2C_Init+0x274>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d807      	bhi.n	8001518 <HAL_I2C_Init+0x84>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a80      	ldr	r2, [pc, #512]	; (800170c <HAL_I2C_Init+0x278>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e006      	b.n	8001526 <HAL_I2C_Init+0x92>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a7d      	ldr	r2, [pc, #500]	; (8001710 <HAL_I2C_Init+0x27c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0e7      	b.n	80016fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a78      	ldr	r2, [pc, #480]	; (8001714 <HAL_I2C_Init+0x280>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_I2C_Init+0x274>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d802      	bhi.n	8001568 <HAL_I2C_Init+0xd4>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	e009      	b.n	800157c <HAL_I2C_Init+0xe8>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a69      	ldr	r2, [pc, #420]	; (8001718 <HAL_I2C_Init+0x284>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800158e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	495c      	ldr	r1, [pc, #368]	; (8001708 <HAL_I2C_Init+0x274>)
 8001598:	428b      	cmp	r3, r1
 800159a:	d819      	bhi.n	80015d0 <HAL_I2C_Init+0x13c>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e59      	subs	r1, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015b0:	400b      	ands	r3, r1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <HAL_I2C_Init+0x138>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e59      	subs	r1, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	e051      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015cc:	2304      	movs	r3, #4
 80015ce:	e04f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_I2C_Init+0x168>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e58      	subs	r0, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e012      	b.n	8001622 <HAL_I2C_Init+0x18e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e58      	subs	r0, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	0099      	lsls	r1, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Init+0x196>
 8001626:	2301      	movs	r3, #1
 8001628:	e022      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <HAL_I2C_Init+0x1bc>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e58      	subs	r0, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	440b      	add	r3, r1
 8001640:	fbb0 f3f3 	udiv	r3, r0, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164e:	e00f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1e58      	subs	r0, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	0099      	lsls	r1, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800169e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6911      	ldr	r1, [r2, #16]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	4311      	orrs	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	000186a0 	.word	0x000186a0
 800170c:	001e847f 	.word	0x001e847f
 8001710:	003d08ff 	.word	0x003d08ff
 8001714:	431bde83 	.word	0x431bde83
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4603      	mov	r3, r0
 800172c:	817b      	strh	r3, [r7, #10]
 800172e:	460b      	mov	r3, r1
 8001730:	813b      	strh	r3, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001736:	f7ff fbe1 	bl	8000efc <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b20      	cmp	r3, #32
 8001746:	f040 80d9 	bne.w	80018fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2319      	movs	r3, #25
 8001750:	2201      	movs	r2, #1
 8001752:	496d      	ldr	r1, [pc, #436]	; (8001908 <HAL_I2C_Mem_Write+0x1ec>)
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fc7f 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
 8001762:	e0cc      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_I2C_Mem_Write+0x56>
 800176e:	2302      	movs	r3, #2
 8001770:	e0c5      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d007      	beq.n	8001798 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2221      	movs	r2, #33	; 0x21
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_I2C_Mem_Write+0x1f0>)
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017da:	88f8      	ldrh	r0, [r7, #6]
 80017dc:	893a      	ldrh	r2, [r7, #8]
 80017de:	8979      	ldrh	r1, [r7, #10]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4603      	mov	r3, r0
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fab6 	bl	8001d5c <I2C_RequestMemoryWrite>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d052      	beq.n	800189c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e081      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fd00 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b04      	cmp	r3, #4
 8001810:	d107      	bne.n	8001822 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11b      	bne.n	800189c <HAL_I2C_Mem_Write+0x180>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1aa      	bne.n	80017fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fcec 	bl	8002286 <I2C_WaitOnBTFFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d107      	bne.n	80018cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e016      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	00100002 	.word	0x00100002
 800190c:	ffff0000 	.word	0xffff0000

08001910 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	460b      	mov	r3, r1
 8001924:	813b      	strh	r3, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800192a:	f7ff fae7 	bl	8000efc <HAL_GetTick>
 800192e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	f040 8208 	bne.w	8001d4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2319      	movs	r3, #25
 8001944:	2201      	movs	r2, #1
 8001946:	497b      	ldr	r1, [pc, #492]	; (8001b34 <HAL_I2C_Mem_Read+0x224>)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fb85 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
 8001956:	e1fb      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Mem_Read+0x56>
 8001962:	2302      	movs	r3, #2
 8001964:	e1f4      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d007      	beq.n	800198c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2222      	movs	r2, #34	; 0x22
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2240      	movs	r2, #64	; 0x40
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4a5b      	ldr	r2, [pc, #364]	; (8001b38 <HAL_I2C_Mem_Read+0x228>)
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ce:	88f8      	ldrh	r0, [r7, #6]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4603      	mov	r3, r0
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fa52 	bl	8001e88 <I2C_RequestMemoryRead>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1b0      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d113      	bne.n	8001a1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e184      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11b      	bne.n	8001a5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e164      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d11b      	bne.n	8001a9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	e144      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ab4:	e138      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	f200 80f1 	bhi.w	8001ca2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d123      	bne.n	8001b10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fc1b 	bl	8002308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e139      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b0e:	e10b      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d14e      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4906      	ldr	r1, [pc, #24]	; (8001b3c <HAL_I2C_Mem_Read+0x22c>)
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa98 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e10e      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
 8001b32:	bf00      	nop
 8001b34:	00100002 	.word	0x00100002
 8001b38:	ffff0000 	.word	0xffff0000
 8001b3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb4:	e0b8      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4966      	ldr	r1, [pc, #408]	; (8001d58 <HAL_I2C_Mem_Read+0x448>)
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa49 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0bf      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c18:	2200      	movs	r2, #0
 8001c1a:	494f      	ldr	r1, [pc, #316]	; (8001d58 <HAL_I2C_Mem_Read+0x448>)
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fa1b 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e091      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca0:	e042      	b.n	8001d28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fb2e 	bl	8002308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e04c      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d118      	bne.n	8001d28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f aec2 	bne.w	8001ab6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
  }
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	00010004 	.word	0x00010004

08001d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f960 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d103      	bne.n	8001db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e05f      	b.n	8001e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <I2C_RequestMemoryWrite+0x128>)
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f998 	bl	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04c      	b.n	8001e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fa02 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d107      	bne.n	8001e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e02b      	b.n	8001e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	e021      	b.n	8001e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f9dc 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d107      	bne.n	8001e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e005      	b.n	8001e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6e:	893b      	ldrh	r3, [r7, #8]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	00010002 	.word	0x00010002

08001e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	817b      	strh	r3, [r7, #10]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	813b      	strh	r3, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8c2 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d103      	bne.n	8001ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0aa      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	4952      	ldr	r1, [pc, #328]	; (8002054 <I2C_RequestMemoryRead+0x1cc>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f8fa 	bl	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e097      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f964 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d107      	bne.n	8001f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e076      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f64:	893b      	ldrh	r3, [r7, #8]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	e021      	b.n	8001fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f93e 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e050      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb6:	6a39      	ldr	r1, [r7, #32]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f923 	bl	8002204 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e035      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f82b 	bl	8002058 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002016:	d103      	bne.n	8002020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e013      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002024:	897b      	ldrh	r3, [r7, #10]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	4906      	ldr	r1, [pc, #24]	; (8002054 <I2C_RequestMemoryRead+0x1cc>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f863 	bl	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	00010002 	.word	0x00010002

08002058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002068:	e025      	b.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d021      	beq.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7fe ff43 	bl	8000efc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d116      	bne.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e023      	b.n	80020fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10d      	bne.n	80020dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	e00c      	b.n	80020f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d0b6      	beq.n	800206a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002114:	e051      	b.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	d123      	bne.n	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800213e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e046      	b.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d021      	beq.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002176:	f7fe fec1 	bl	8000efc <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d302      	bcc.n	800218c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d116      	bne.n	80021ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e020      	b.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10c      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e00b      	b.n	80021f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d18d      	bne.n	8002116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002210:	e02d      	b.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f8ce 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02d      	b.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d021      	beq.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7fe fe67 	bl	8000efc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d1ca      	bne.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002292:	e02d      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f88d 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e02d      	b.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d021      	beq.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ac:	f7fe fe26 	bl	8000efc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d302      	bcc.n	80022c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d1ca      	bne.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002314:	e042      	b.n	800239c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b10      	cmp	r3, #16
 8002322:	d119      	bne.n	8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0210 	mvn.w	r2, #16
 800232c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e029      	b.n	80023ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe fdd0 	bl	8000efc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d1b5      	bne.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d11b      	bne.n	8002404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e264      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002432:	4ba3      	ldr	r3, [pc, #652]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b99      	ldr	r3, [pc, #612]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e23f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a8a      	ldr	r2, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a83      	ldr	r2, [pc, #524]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a80      	ldr	r2, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fd16 	bl	8000efc <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fd12 	bl	8000efc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e204      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fd02 	bl	8000efc <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fcfe 	bl	8000efc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f0      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c4      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4952      	ldr	r1, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fcb7 	bl	8000efc <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fcb3 	bl	8000efc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4940      	ldr	r1, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fc96 	bl	8000efc <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fc92 	bl	8000efc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e184      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fc76 	bl	8000efc <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fc72 	bl	8000efc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e164      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe fc5f 	bl	8000efc <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe fc5b 	bl	8000efc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e14d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a0 	beq.w	80027ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fc21 	bl	8000efc <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e011      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
 80026cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7fe fc14 	bl	8000efc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e106      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <HAL_RCC_OscConfig+0x4e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x312>
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b78      	ldr	r3, [pc, #480]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a71      	ldr	r2, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fbd9 	bl	8000efc <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fbd5 	bl	8000efc <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0c5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x33a>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fbc3 	bl	8000efc <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fbbf 	bl	8000efc <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0af      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 809b 	beq.w	80028ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d05c      	beq.n	800287e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d141      	bne.n	8002850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fb93 	bl	8000efc <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fb8f 	bl	8000efc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e081      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	4937      	ldr	r1, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fb68 	bl	8000efc <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fb64 	bl	8000efc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e056      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x41c>
 800284e:	e04e      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fb51 	bl	8000efc <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fb4d 	bl	8000efc <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x44a>
 800287c:	e037      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e032      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d028      	beq.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d11a      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40007000 	.word	0x40007000
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470060 	.word	0x42470060

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fa82 	bl	8000efc <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fa7e 	bl	8000efc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe f9e2 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08003c94 	.word	0x08003c94
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80bd 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e0b7      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
       break;
 8002b08:	e0b7      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b0c:	60bb      	str	r3, [r7, #8]
      break;
 8002b0e:	e0b4      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d04d      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	ea02 0800 	and.w	r8, r2, r0
 8002b3e:	ea03 0901 	and.w	r9, r3, r1
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	014b      	lsls	r3, r1, #5
 8002b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b54:	0142      	lsls	r2, r0, #5
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b70:	0182      	lsls	r2, r0, #6
 8002b72:	1a12      	subs	r2, r2, r0
 8002b74:	eb63 0301 	sbc.w	r3, r3, r1
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	00d9      	lsls	r1, r3, #3
 8002b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b86:	00d0      	lsls	r0, r2, #3
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	eb12 0208 	adds.w	r2, r2, r8
 8002b90:	eb43 0309 	adc.w	r3, r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0259      	lsls	r1, r3, #9
 8002b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ba2:	0250      	lsls	r0, r2, #9
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f7fd fb6c 	bl	8000290 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e04a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	ea02 0400 	and.w	r4, r2, r0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	014b      	lsls	r3, r1, #5
 8002bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf0:	0142      	lsls	r2, r0, #5
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	1b00      	subs	r0, r0, r4
 8002bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	018b      	lsls	r3, r1, #6
 8002c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c0a:	0182      	lsls	r2, r0, #6
 8002c0c:	1a12      	subs	r2, r2, r0
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	00d9      	lsls	r1, r3, #3
 8002c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c20:	00d0      	lsls	r0, r2, #3
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1912      	adds	r2, r2, r4
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0299      	lsls	r1, r3, #10
 8002c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c3a:	0290      	lsls	r0, r2, #10
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd fb20 	bl	8000290 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08003ca4 	.word	0x08003ca4

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08003ca4 	.word	0x08003ca4

08002cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e03f      	b.n	8002d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ffa0 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f929 	bl	8002f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b08a      	sub	sp, #40	; 0x28
 8002d9a:	af02      	add	r7, sp, #8
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d17c      	bne.n	8002eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_UART_Transmit+0x2c>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e075      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Transmit+0x3e>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e06e      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2221      	movs	r2, #33	; 0x21
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dea:	f7fe f887 	bl	8000efc <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	d108      	bne.n	8002e18 <HAL_UART_Transmit+0x82>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e003      	b.n	8002e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e28:	e02a      	b.n	8002e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f840 	bl	8002eba <UART_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e036      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e007      	b.n	8002e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cf      	bne.n	8002e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f810 	bl	8002eba <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b090      	sub	sp, #64	; 0x40
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	e050      	b.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d04c      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x30>
 8002eda:	f7fe f80f 	bl	8000efc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d241      	bcs.n	8002f6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f0a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3e:	623a      	str	r2, [r7, #32]
 8002f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	69f9      	ldr	r1, [r7, #28]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e5      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e00f      	b.n	8002f8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d09f      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3740      	adds	r7, #64	; 0x40
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	b09f      	sub	sp, #124	; 0x7c
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	68d9      	ldr	r1, [r3, #12]
 8002fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	ea40 0301 	orr.w	r3, r0, r1
 8002fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fdc:	f021 010c 	bic.w	r1, r1, #12
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	6999      	ldr	r1, [r3, #24]
 8002ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	ea40 0301 	orr.w	r3, r0, r1
 8003000:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4bc5      	ldr	r3, [pc, #788]	; (800331c <UART_SetConfig+0x384>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d004      	beq.n	8003016 <UART_SetConfig+0x7e>
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4bc3      	ldr	r3, [pc, #780]	; (8003320 <UART_SetConfig+0x388>)
 8003012:	429a      	cmp	r2, r3
 8003014:	d103      	bne.n	800301e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003016:	f7ff fe5d 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 800301a:	6778      	str	r0, [r7, #116]	; 0x74
 800301c:	e002      	b.n	8003024 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800301e:	f7ff fe45 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8003022:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302c:	f040 80b6 	bne.w	800319c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003032:	461c      	mov	r4, r3
 8003034:	f04f 0500 	mov.w	r5, #0
 8003038:	4622      	mov	r2, r4
 800303a:	462b      	mov	r3, r5
 800303c:	1891      	adds	r1, r2, r2
 800303e:	6439      	str	r1, [r7, #64]	; 0x40
 8003040:	415b      	adcs	r3, r3
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003048:	1912      	adds	r2, r2, r4
 800304a:	eb45 0303 	adc.w	r3, r5, r3
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	00d9      	lsls	r1, r3, #3
 8003058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305c:	00d0      	lsls	r0, r2, #3
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	1911      	adds	r1, r2, r4
 8003064:	6639      	str	r1, [r7, #96]	; 0x60
 8003066:	416b      	adcs	r3, r5
 8003068:	667b      	str	r3, [r7, #100]	; 0x64
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	1891      	adds	r1, r2, r2
 8003076:	63b9      	str	r1, [r7, #56]	; 0x38
 8003078:	415b      	adcs	r3, r3
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003080:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003084:	f7fd f904 	bl	8000290 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4ba5      	ldr	r3, [pc, #660]	; (8003324 <UART_SetConfig+0x38c>)
 800308e:	fba3 2302 	umull	r2, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	011e      	lsls	r6, r3, #4
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	461c      	mov	r4, r3
 800309a:	f04f 0500 	mov.w	r5, #0
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	6339      	str	r1, [r7, #48]	; 0x30
 80030a6:	415b      	adcs	r3, r3
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
 80030aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030ae:	1912      	adds	r2, r2, r4
 80030b0:	eb45 0303 	adc.w	r3, r5, r3
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	00d9      	lsls	r1, r3, #3
 80030be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c2:	00d0      	lsls	r0, r2, #3
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	1911      	adds	r1, r2, r4
 80030ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80030cc:	416b      	adcs	r3, r5
 80030ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80030de:	415b      	adcs	r3, r3
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030ea:	f7fd f8d1 	bl	8000290 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <UART_SetConfig+0x38c>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	2164      	movs	r1, #100	; 0x64
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	3332      	adds	r3, #50	; 0x32
 8003106:	4a87      	ldr	r2, [pc, #540]	; (8003324 <UART_SetConfig+0x38c>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003114:	441e      	add	r6, r3
 8003116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003118:	4618      	mov	r0, r3
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	1894      	adds	r4, r2, r2
 8003124:	623c      	str	r4, [r7, #32]
 8003126:	415b      	adcs	r3, r3
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800312e:	1812      	adds	r2, r2, r0
 8003130:	eb41 0303 	adc.w	r3, r1, r3
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	f04f 0500 	mov.w	r5, #0
 800313c:	00dd      	lsls	r5, r3, #3
 800313e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003142:	00d4      	lsls	r4, r2, #3
 8003144:	4622      	mov	r2, r4
 8003146:	462b      	mov	r3, r5
 8003148:	1814      	adds	r4, r2, r0
 800314a:	653c      	str	r4, [r7, #80]	; 0x50
 800314c:	414b      	adcs	r3, r1
 800314e:	657b      	str	r3, [r7, #84]	; 0x54
 8003150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	461a      	mov	r2, r3
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	1891      	adds	r1, r2, r2
 800315c:	61b9      	str	r1, [r7, #24]
 800315e:	415b      	adcs	r3, r3
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003166:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800316a:	f7fd f891 	bl	8000290 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <UART_SetConfig+0x38c>)
 8003174:	fba3 1302 	umull	r1, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	2164      	movs	r1, #100	; 0x64
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	3332      	adds	r3, #50	; 0x32
 8003186:	4a67      	ldr	r2, [pc, #412]	; (8003324 <UART_SetConfig+0x38c>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4432      	add	r2, r6
 8003198:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800319a:	e0b9      	b.n	8003310 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800319e:	461c      	mov	r4, r3
 80031a0:	f04f 0500 	mov.w	r5, #0
 80031a4:	4622      	mov	r2, r4
 80031a6:	462b      	mov	r3, r5
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	6139      	str	r1, [r7, #16]
 80031ac:	415b      	adcs	r3, r3
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031b4:	1912      	adds	r2, r2, r4
 80031b6:	eb45 0303 	adc.w	r3, r5, r3
 80031ba:	f04f 0000 	mov.w	r0, #0
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	00d9      	lsls	r1, r3, #3
 80031c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c8:	00d0      	lsls	r0, r2, #3
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	eb12 0804 	adds.w	r8, r2, r4
 80031d2:	eb43 0905 	adc.w	r9, r3, r5
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	008b      	lsls	r3, r1, #2
 80031ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031ee:	0082      	lsls	r2, r0, #2
 80031f0:	4640      	mov	r0, r8
 80031f2:	4649      	mov	r1, r9
 80031f4:	f7fd f84c 	bl	8000290 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <UART_SetConfig+0x38c>)
 80031fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	011e      	lsls	r6, r3, #4
 8003206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003208:	4618      	mov	r0, r3
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	1894      	adds	r4, r2, r2
 8003214:	60bc      	str	r4, [r7, #8]
 8003216:	415b      	adcs	r3, r3
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800321e:	1812      	adds	r2, r2, r0
 8003220:	eb41 0303 	adc.w	r3, r1, r3
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	f04f 0500 	mov.w	r5, #0
 800322c:	00dd      	lsls	r5, r3, #3
 800322e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003232:	00d4      	lsls	r4, r2, #3
 8003234:	4622      	mov	r2, r4
 8003236:	462b      	mov	r3, r5
 8003238:	1814      	adds	r4, r2, r0
 800323a:	64bc      	str	r4, [r7, #72]	; 0x48
 800323c:	414b      	adcs	r3, r1
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003258:	0082      	lsls	r2, r0, #2
 800325a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800325e:	f7fd f817 	bl	8000290 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <UART_SetConfig+0x38c>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <UART_SetConfig+0x38c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003286:	441e      	add	r6, r3
 8003288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328a:	4618      	mov	r0, r3
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	1894      	adds	r4, r2, r2
 8003296:	603c      	str	r4, [r7, #0]
 8003298:	415b      	adcs	r3, r3
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a0:	1812      	adds	r2, r2, r0
 80032a2:	eb41 0303 	adc.w	r3, r1, r3
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	f04f 0500 	mov.w	r5, #0
 80032ae:	00dd      	lsls	r5, r3, #3
 80032b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032b4:	00d4      	lsls	r4, r2, #3
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	eb12 0a00 	adds.w	sl, r2, r0
 80032be:	eb43 0b01 	adc.w	fp, r3, r1
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032da:	0082      	lsls	r2, r0, #2
 80032dc:	4650      	mov	r0, sl
 80032de:	4659      	mov	r1, fp
 80032e0:	f7fc ffd6 	bl	8000290 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <UART_SetConfig+0x38c>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <UART_SetConfig+0x38c>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4432      	add	r2, r6
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	377c      	adds	r7, #124	; 0x7c
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <__errno>:
 8003328:	4b01      	ldr	r3, [pc, #4]	; (8003330 <__errno+0x8>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4d0d      	ldr	r5, [pc, #52]	; (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2600      	movs	r6, #0
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4d0b      	ldr	r5, [pc, #44]	; (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	; (8003378 <__libc_init_array+0x44>)
 8003348:	f000 fc4e 	bl	8003be8 <_init>
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2600      	movs	r6, #0
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	08003ce8 	.word	0x08003ce8
 8003370:	08003ce8 	.word	0x08003ce8
 8003374:	08003ce8 	.word	0x08003ce8
 8003378:	08003cec 	.word	0x08003cec

0800337c <memset>:
 800337c:	4402      	add	r2, r0
 800337e:	4603      	mov	r3, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <siprintf>:
 800338c:	b40e      	push	{r1, r2, r3}
 800338e:	b500      	push	{lr}
 8003390:	b09c      	sub	sp, #112	; 0x70
 8003392:	ab1d      	add	r3, sp, #116	; 0x74
 8003394:	9002      	str	r0, [sp, #8]
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800339c:	4809      	ldr	r0, [pc, #36]	; (80033c4 <siprintf+0x38>)
 800339e:	9107      	str	r1, [sp, #28]
 80033a0:	9104      	str	r1, [sp, #16]
 80033a2:	4909      	ldr	r1, [pc, #36]	; (80033c8 <siprintf+0x3c>)
 80033a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033a8:	9105      	str	r1, [sp, #20]
 80033aa:	6800      	ldr	r0, [r0, #0]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	a902      	add	r1, sp, #8
 80033b0:	f000 f868 	bl	8003484 <_svfiprintf_r>
 80033b4:	9b02      	ldr	r3, [sp, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	b01c      	add	sp, #112	; 0x70
 80033bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033c0:	b003      	add	sp, #12
 80033c2:	4770      	bx	lr
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	ffff0208 	.word	0xffff0208

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	688e      	ldr	r6, [r1, #8]
 80033d2:	429e      	cmp	r6, r3
 80033d4:	4682      	mov	sl, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4690      	mov	r8, r2
 80033da:	461f      	mov	r7, r3
 80033dc:	d838      	bhi.n	8003450 <__ssputs_r+0x84>
 80033de:	898a      	ldrh	r2, [r1, #12]
 80033e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e4:	d032      	beq.n	800344c <__ssputs_r+0x80>
 80033e6:	6825      	ldr	r5, [r4, #0]
 80033e8:	6909      	ldr	r1, [r1, #16]
 80033ea:	eba5 0901 	sub.w	r9, r5, r1
 80033ee:	6965      	ldr	r5, [r4, #20]
 80033f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033f8:	3301      	adds	r3, #1
 80033fa:	444b      	add	r3, r9
 80033fc:	106d      	asrs	r5, r5, #1
 80033fe:	429d      	cmp	r5, r3
 8003400:	bf38      	it	cc
 8003402:	461d      	movcc	r5, r3
 8003404:	0553      	lsls	r3, r2, #21
 8003406:	d531      	bpl.n	800346c <__ssputs_r+0xa0>
 8003408:	4629      	mov	r1, r5
 800340a:	f000 fb47 	bl	8003a9c <_malloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	b950      	cbnz	r0, 8003428 <__ssputs_r+0x5c>
 8003412:	230c      	movs	r3, #12
 8003414:	f8ca 3000 	str.w	r3, [sl]
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	6921      	ldr	r1, [r4, #16]
 800342a:	464a      	mov	r2, r9
 800342c:	f000 fabe 	bl	80039ac <memcpy>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	6126      	str	r6, [r4, #16]
 800343e:	6165      	str	r5, [r4, #20]
 8003440:	444e      	add	r6, r9
 8003442:	eba5 0509 	sub.w	r5, r5, r9
 8003446:	6026      	str	r6, [r4, #0]
 8003448:	60a5      	str	r5, [r4, #8]
 800344a:	463e      	mov	r6, r7
 800344c:	42be      	cmp	r6, r7
 800344e:	d900      	bls.n	8003452 <__ssputs_r+0x86>
 8003450:	463e      	mov	r6, r7
 8003452:	4632      	mov	r2, r6
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	4641      	mov	r1, r8
 8003458:	f000 fab6 	bl	80039c8 <memmove>
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	1b9b      	subs	r3, r3, r6
 8003462:	4432      	add	r2, r6
 8003464:	60a3      	str	r3, [r4, #8]
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	2000      	movs	r0, #0
 800346a:	e7db      	b.n	8003424 <__ssputs_r+0x58>
 800346c:	462a      	mov	r2, r5
 800346e:	f000 fb6f 	bl	8003b50 <_realloc_r>
 8003472:	4606      	mov	r6, r0
 8003474:	2800      	cmp	r0, #0
 8003476:	d1e1      	bne.n	800343c <__ssputs_r+0x70>
 8003478:	6921      	ldr	r1, [r4, #16]
 800347a:	4650      	mov	r0, sl
 800347c:	f000 fabe 	bl	80039fc <_free_r>
 8003480:	e7c7      	b.n	8003412 <__ssputs_r+0x46>
	...

08003484 <_svfiprintf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	4698      	mov	r8, r3
 800348a:	898b      	ldrh	r3, [r1, #12]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	b09d      	sub	sp, #116	; 0x74
 8003490:	4607      	mov	r7, r0
 8003492:	460d      	mov	r5, r1
 8003494:	4614      	mov	r4, r2
 8003496:	d50e      	bpl.n	80034b6 <_svfiprintf_r+0x32>
 8003498:	690b      	ldr	r3, [r1, #16]
 800349a:	b963      	cbnz	r3, 80034b6 <_svfiprintf_r+0x32>
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	f000 fafd 	bl	8003a9c <_malloc_r>
 80034a2:	6028      	str	r0, [r5, #0]
 80034a4:	6128      	str	r0, [r5, #16]
 80034a6:	b920      	cbnz	r0, 80034b2 <_svfiprintf_r+0x2e>
 80034a8:	230c      	movs	r3, #12
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	e0d1      	b.n	8003656 <_svfiprintf_r+0x1d2>
 80034b2:	2340      	movs	r3, #64	; 0x40
 80034b4:	616b      	str	r3, [r5, #20]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9309      	str	r3, [sp, #36]	; 0x24
 80034ba:	2320      	movs	r3, #32
 80034bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c4:	2330      	movs	r3, #48	; 0x30
 80034c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003670 <_svfiprintf_r+0x1ec>
 80034ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ce:	f04f 0901 	mov.w	r9, #1
 80034d2:	4623      	mov	r3, r4
 80034d4:	469a      	mov	sl, r3
 80034d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034da:	b10a      	cbz	r2, 80034e0 <_svfiprintf_r+0x5c>
 80034dc:	2a25      	cmp	r2, #37	; 0x25
 80034de:	d1f9      	bne.n	80034d4 <_svfiprintf_r+0x50>
 80034e0:	ebba 0b04 	subs.w	fp, sl, r4
 80034e4:	d00b      	beq.n	80034fe <_svfiprintf_r+0x7a>
 80034e6:	465b      	mov	r3, fp
 80034e8:	4622      	mov	r2, r4
 80034ea:	4629      	mov	r1, r5
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7ff ff6d 	bl	80033cc <__ssputs_r>
 80034f2:	3001      	adds	r0, #1
 80034f4:	f000 80aa 	beq.w	800364c <_svfiprintf_r+0x1c8>
 80034f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034fa:	445a      	add	r2, fp
 80034fc:	9209      	str	r2, [sp, #36]	; 0x24
 80034fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80a2 	beq.w	800364c <_svfiprintf_r+0x1c8>
 8003508:	2300      	movs	r3, #0
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003512:	f10a 0a01 	add.w	sl, sl, #1
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	9307      	str	r3, [sp, #28]
 800351a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800351e:	931a      	str	r3, [sp, #104]	; 0x68
 8003520:	4654      	mov	r4, sl
 8003522:	2205      	movs	r2, #5
 8003524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003528:	4851      	ldr	r0, [pc, #324]	; (8003670 <_svfiprintf_r+0x1ec>)
 800352a:	f7fc fe61 	bl	80001f0 <memchr>
 800352e:	9a04      	ldr	r2, [sp, #16]
 8003530:	b9d8      	cbnz	r0, 800356a <_svfiprintf_r+0xe6>
 8003532:	06d0      	lsls	r0, r2, #27
 8003534:	bf44      	itt	mi
 8003536:	2320      	movmi	r3, #32
 8003538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800353c:	0711      	lsls	r1, r2, #28
 800353e:	bf44      	itt	mi
 8003540:	232b      	movmi	r3, #43	; 0x2b
 8003542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003546:	f89a 3000 	ldrb.w	r3, [sl]
 800354a:	2b2a      	cmp	r3, #42	; 0x2a
 800354c:	d015      	beq.n	800357a <_svfiprintf_r+0xf6>
 800354e:	9a07      	ldr	r2, [sp, #28]
 8003550:	4654      	mov	r4, sl
 8003552:	2000      	movs	r0, #0
 8003554:	f04f 0c0a 	mov.w	ip, #10
 8003558:	4621      	mov	r1, r4
 800355a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800355e:	3b30      	subs	r3, #48	; 0x30
 8003560:	2b09      	cmp	r3, #9
 8003562:	d94e      	bls.n	8003602 <_svfiprintf_r+0x17e>
 8003564:	b1b0      	cbz	r0, 8003594 <_svfiprintf_r+0x110>
 8003566:	9207      	str	r2, [sp, #28]
 8003568:	e014      	b.n	8003594 <_svfiprintf_r+0x110>
 800356a:	eba0 0308 	sub.w	r3, r0, r8
 800356e:	fa09 f303 	lsl.w	r3, r9, r3
 8003572:	4313      	orrs	r3, r2
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	46a2      	mov	sl, r4
 8003578:	e7d2      	b.n	8003520 <_svfiprintf_r+0x9c>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	1d19      	adds	r1, r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	9103      	str	r1, [sp, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	bfbb      	ittet	lt
 8003586:	425b      	neglt	r3, r3
 8003588:	f042 0202 	orrlt.w	r2, r2, #2
 800358c:	9307      	strge	r3, [sp, #28]
 800358e:	9307      	strlt	r3, [sp, #28]
 8003590:	bfb8      	it	lt
 8003592:	9204      	strlt	r2, [sp, #16]
 8003594:	7823      	ldrb	r3, [r4, #0]
 8003596:	2b2e      	cmp	r3, #46	; 0x2e
 8003598:	d10c      	bne.n	80035b4 <_svfiprintf_r+0x130>
 800359a:	7863      	ldrb	r3, [r4, #1]
 800359c:	2b2a      	cmp	r3, #42	; 0x2a
 800359e:	d135      	bne.n	800360c <_svfiprintf_r+0x188>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9203      	str	r2, [sp, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bfb8      	it	lt
 80035ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80035b0:	3402      	adds	r4, #2
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003680 <_svfiprintf_r+0x1fc>
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4650      	mov	r0, sl
 80035be:	f7fc fe17 	bl	80001f0 <memchr>
 80035c2:	b140      	cbz	r0, 80035d6 <_svfiprintf_r+0x152>
 80035c4:	2340      	movs	r3, #64	; 0x40
 80035c6:	eba0 000a 	sub.w	r0, r0, sl
 80035ca:	fa03 f000 	lsl.w	r0, r3, r0
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	4303      	orrs	r3, r0
 80035d2:	3401      	adds	r4, #1
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035da:	4826      	ldr	r0, [pc, #152]	; (8003674 <_svfiprintf_r+0x1f0>)
 80035dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e0:	2206      	movs	r2, #6
 80035e2:	f7fc fe05 	bl	80001f0 <memchr>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d038      	beq.n	800365c <_svfiprintf_r+0x1d8>
 80035ea:	4b23      	ldr	r3, [pc, #140]	; (8003678 <_svfiprintf_r+0x1f4>)
 80035ec:	bb1b      	cbnz	r3, 8003636 <_svfiprintf_r+0x1b2>
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	3307      	adds	r3, #7
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	3308      	adds	r3, #8
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fc:	4433      	add	r3, r6
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	e767      	b.n	80034d2 <_svfiprintf_r+0x4e>
 8003602:	fb0c 3202 	mla	r2, ip, r2, r3
 8003606:	460c      	mov	r4, r1
 8003608:	2001      	movs	r0, #1
 800360a:	e7a5      	b.n	8003558 <_svfiprintf_r+0xd4>
 800360c:	2300      	movs	r3, #0
 800360e:	3401      	adds	r4, #1
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4619      	mov	r1, r3
 8003614:	f04f 0c0a 	mov.w	ip, #10
 8003618:	4620      	mov	r0, r4
 800361a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361e:	3a30      	subs	r2, #48	; 0x30
 8003620:	2a09      	cmp	r2, #9
 8003622:	d903      	bls.n	800362c <_svfiprintf_r+0x1a8>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0c5      	beq.n	80035b4 <_svfiprintf_r+0x130>
 8003628:	9105      	str	r1, [sp, #20]
 800362a:	e7c3      	b.n	80035b4 <_svfiprintf_r+0x130>
 800362c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003630:	4604      	mov	r4, r0
 8003632:	2301      	movs	r3, #1
 8003634:	e7f0      	b.n	8003618 <_svfiprintf_r+0x194>
 8003636:	ab03      	add	r3, sp, #12
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	462a      	mov	r2, r5
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <_svfiprintf_r+0x1f8>)
 800363e:	a904      	add	r1, sp, #16
 8003640:	4638      	mov	r0, r7
 8003642:	f3af 8000 	nop.w
 8003646:	1c42      	adds	r2, r0, #1
 8003648:	4606      	mov	r6, r0
 800364a:	d1d6      	bne.n	80035fa <_svfiprintf_r+0x176>
 800364c:	89ab      	ldrh	r3, [r5, #12]
 800364e:	065b      	lsls	r3, r3, #25
 8003650:	f53f af2c 	bmi.w	80034ac <_svfiprintf_r+0x28>
 8003654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003656:	b01d      	add	sp, #116	; 0x74
 8003658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	462a      	mov	r2, r5
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <_svfiprintf_r+0x1f8>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4638      	mov	r0, r7
 8003668:	f000 f87a 	bl	8003760 <_printf_i>
 800366c:	e7eb      	b.n	8003646 <_svfiprintf_r+0x1c2>
 800366e:	bf00      	nop
 8003670:	08003cac 	.word	0x08003cac
 8003674:	08003cb6 	.word	0x08003cb6
 8003678:	00000000 	.word	0x00000000
 800367c:	080033cd 	.word	0x080033cd
 8003680:	08003cb2 	.word	0x08003cb2

08003684 <_printf_common>:
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4616      	mov	r6, r2
 800368a:	4699      	mov	r9, r3
 800368c:	688a      	ldr	r2, [r1, #8]
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003694:	4293      	cmp	r3, r2
 8003696:	bfb8      	it	lt
 8003698:	4613      	movlt	r3, r2
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a0:	4607      	mov	r7, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	b10a      	cbz	r2, 80036aa <_printf_common+0x26>
 80036a6:	3301      	adds	r3, #1
 80036a8:	6033      	str	r3, [r6, #0]
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	0699      	lsls	r1, r3, #26
 80036ae:	bf42      	ittt	mi
 80036b0:	6833      	ldrmi	r3, [r6, #0]
 80036b2:	3302      	addmi	r3, #2
 80036b4:	6033      	strmi	r3, [r6, #0]
 80036b6:	6825      	ldr	r5, [r4, #0]
 80036b8:	f015 0506 	ands.w	r5, r5, #6
 80036bc:	d106      	bne.n	80036cc <_printf_common+0x48>
 80036be:	f104 0a19 	add.w	sl, r4, #25
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	6832      	ldr	r2, [r6, #0]
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	42ab      	cmp	r3, r5
 80036ca:	dc26      	bgt.n	800371a <_printf_common+0x96>
 80036cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036d0:	1e13      	subs	r3, r2, #0
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	bf18      	it	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	0692      	lsls	r2, r2, #26
 80036da:	d42b      	bmi.n	8003734 <_printf_common+0xb0>
 80036dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e0:	4649      	mov	r1, r9
 80036e2:	4638      	mov	r0, r7
 80036e4:	47c0      	blx	r8
 80036e6:	3001      	adds	r0, #1
 80036e8:	d01e      	beq.n	8003728 <_printf_common+0xa4>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	68e5      	ldr	r5, [r4, #12]
 80036ee:	6832      	ldr	r2, [r6, #0]
 80036f0:	f003 0306 	and.w	r3, r3, #6
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	bf08      	it	eq
 80036f8:	1aad      	subeq	r5, r5, r2
 80036fa:	68a3      	ldr	r3, [r4, #8]
 80036fc:	6922      	ldr	r2, [r4, #16]
 80036fe:	bf0c      	ite	eq
 8003700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003704:	2500      	movne	r5, #0
 8003706:	4293      	cmp	r3, r2
 8003708:	bfc4      	itt	gt
 800370a:	1a9b      	subgt	r3, r3, r2
 800370c:	18ed      	addgt	r5, r5, r3
 800370e:	2600      	movs	r6, #0
 8003710:	341a      	adds	r4, #26
 8003712:	42b5      	cmp	r5, r6
 8003714:	d11a      	bne.n	800374c <_printf_common+0xc8>
 8003716:	2000      	movs	r0, #0
 8003718:	e008      	b.n	800372c <_printf_common+0xa8>
 800371a:	2301      	movs	r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	4649      	mov	r1, r9
 8003720:	4638      	mov	r0, r7
 8003722:	47c0      	blx	r8
 8003724:	3001      	adds	r0, #1
 8003726:	d103      	bne.n	8003730 <_printf_common+0xac>
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003730:	3501      	adds	r5, #1
 8003732:	e7c6      	b.n	80036c2 <_printf_common+0x3e>
 8003734:	18e1      	adds	r1, r4, r3
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	2030      	movs	r0, #48	; 0x30
 800373a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373e:	4422      	add	r2, r4
 8003740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003748:	3302      	adds	r3, #2
 800374a:	e7c7      	b.n	80036dc <_printf_common+0x58>
 800374c:	2301      	movs	r3, #1
 800374e:	4622      	mov	r2, r4
 8003750:	4649      	mov	r1, r9
 8003752:	4638      	mov	r0, r7
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d0e6      	beq.n	8003728 <_printf_common+0xa4>
 800375a:	3601      	adds	r6, #1
 800375c:	e7d9      	b.n	8003712 <_printf_common+0x8e>
	...

08003760 <_printf_i>:
 8003760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	460c      	mov	r4, r1
 8003766:	4691      	mov	r9, r2
 8003768:	7e27      	ldrb	r7, [r4, #24]
 800376a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800376c:	2f78      	cmp	r7, #120	; 0x78
 800376e:	4680      	mov	r8, r0
 8003770:	469a      	mov	sl, r3
 8003772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003776:	d807      	bhi.n	8003788 <_printf_i+0x28>
 8003778:	2f62      	cmp	r7, #98	; 0x62
 800377a:	d80a      	bhi.n	8003792 <_printf_i+0x32>
 800377c:	2f00      	cmp	r7, #0
 800377e:	f000 80d8 	beq.w	8003932 <_printf_i+0x1d2>
 8003782:	2f58      	cmp	r7, #88	; 0x58
 8003784:	f000 80a3 	beq.w	80038ce <_printf_i+0x16e>
 8003788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800378c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003790:	e03a      	b.n	8003808 <_printf_i+0xa8>
 8003792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003796:	2b15      	cmp	r3, #21
 8003798:	d8f6      	bhi.n	8003788 <_printf_i+0x28>
 800379a:	a001      	add	r0, pc, #4	; (adr r0, 80037a0 <_printf_i+0x40>)
 800379c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003789 	.word	0x08003789
 80037ac:	08003789 	.word	0x08003789
 80037b0:	08003789 	.word	0x08003789
 80037b4:	08003789 	.word	0x08003789
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003789 	.word	0x08003789
 80037c0:	08003789 	.word	0x08003789
 80037c4:	08003789 	.word	0x08003789
 80037c8:	08003789 	.word	0x08003789
 80037cc:	08003919 	.word	0x08003919
 80037d0:	0800383d 	.word	0x0800383d
 80037d4:	080038fb 	.word	0x080038fb
 80037d8:	08003789 	.word	0x08003789
 80037dc:	08003789 	.word	0x08003789
 80037e0:	0800393b 	.word	0x0800393b
 80037e4:	08003789 	.word	0x08003789
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	08003789 	.word	0x08003789
 80037f0:	08003789 	.word	0x08003789
 80037f4:	08003903 	.word	0x08003903
 80037f8:	680b      	ldr	r3, [r1, #0]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	600a      	str	r2, [r1, #0]
 8003800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003808:	2301      	movs	r3, #1
 800380a:	e0a3      	b.n	8003954 <_printf_i+0x1f4>
 800380c:	6825      	ldr	r5, [r4, #0]
 800380e:	6808      	ldr	r0, [r1, #0]
 8003810:	062e      	lsls	r6, r5, #24
 8003812:	f100 0304 	add.w	r3, r0, #4
 8003816:	d50a      	bpl.n	800382e <_printf_i+0xce>
 8003818:	6805      	ldr	r5, [r0, #0]
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	2d00      	cmp	r5, #0
 800381e:	da03      	bge.n	8003828 <_printf_i+0xc8>
 8003820:	232d      	movs	r3, #45	; 0x2d
 8003822:	426d      	negs	r5, r5
 8003824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003828:	485e      	ldr	r0, [pc, #376]	; (80039a4 <_printf_i+0x244>)
 800382a:	230a      	movs	r3, #10
 800382c:	e019      	b.n	8003862 <_printf_i+0x102>
 800382e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003832:	6805      	ldr	r5, [r0, #0]
 8003834:	600b      	str	r3, [r1, #0]
 8003836:	bf18      	it	ne
 8003838:	b22d      	sxthne	r5, r5
 800383a:	e7ef      	b.n	800381c <_printf_i+0xbc>
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	6825      	ldr	r5, [r4, #0]
 8003840:	1d18      	adds	r0, r3, #4
 8003842:	6008      	str	r0, [r1, #0]
 8003844:	0628      	lsls	r0, r5, #24
 8003846:	d501      	bpl.n	800384c <_printf_i+0xec>
 8003848:	681d      	ldr	r5, [r3, #0]
 800384a:	e002      	b.n	8003852 <_printf_i+0xf2>
 800384c:	0669      	lsls	r1, r5, #25
 800384e:	d5fb      	bpl.n	8003848 <_printf_i+0xe8>
 8003850:	881d      	ldrh	r5, [r3, #0]
 8003852:	4854      	ldr	r0, [pc, #336]	; (80039a4 <_printf_i+0x244>)
 8003854:	2f6f      	cmp	r7, #111	; 0x6f
 8003856:	bf0c      	ite	eq
 8003858:	2308      	moveq	r3, #8
 800385a:	230a      	movne	r3, #10
 800385c:	2100      	movs	r1, #0
 800385e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003862:	6866      	ldr	r6, [r4, #4]
 8003864:	60a6      	str	r6, [r4, #8]
 8003866:	2e00      	cmp	r6, #0
 8003868:	bfa2      	ittt	ge
 800386a:	6821      	ldrge	r1, [r4, #0]
 800386c:	f021 0104 	bicge.w	r1, r1, #4
 8003870:	6021      	strge	r1, [r4, #0]
 8003872:	b90d      	cbnz	r5, 8003878 <_printf_i+0x118>
 8003874:	2e00      	cmp	r6, #0
 8003876:	d04d      	beq.n	8003914 <_printf_i+0x1b4>
 8003878:	4616      	mov	r6, r2
 800387a:	fbb5 f1f3 	udiv	r1, r5, r3
 800387e:	fb03 5711 	mls	r7, r3, r1, r5
 8003882:	5dc7      	ldrb	r7, [r0, r7]
 8003884:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003888:	462f      	mov	r7, r5
 800388a:	42bb      	cmp	r3, r7
 800388c:	460d      	mov	r5, r1
 800388e:	d9f4      	bls.n	800387a <_printf_i+0x11a>
 8003890:	2b08      	cmp	r3, #8
 8003892:	d10b      	bne.n	80038ac <_printf_i+0x14c>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	07df      	lsls	r7, r3, #31
 8003898:	d508      	bpl.n	80038ac <_printf_i+0x14c>
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	6861      	ldr	r1, [r4, #4]
 800389e:	4299      	cmp	r1, r3
 80038a0:	bfde      	ittt	le
 80038a2:	2330      	movle	r3, #48	; 0x30
 80038a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038ac:	1b92      	subs	r2, r2, r6
 80038ae:	6122      	str	r2, [r4, #16]
 80038b0:	f8cd a000 	str.w	sl, [sp]
 80038b4:	464b      	mov	r3, r9
 80038b6:	aa03      	add	r2, sp, #12
 80038b8:	4621      	mov	r1, r4
 80038ba:	4640      	mov	r0, r8
 80038bc:	f7ff fee2 	bl	8003684 <_printf_common>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d14c      	bne.n	800395e <_printf_i+0x1fe>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	b004      	add	sp, #16
 80038ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ce:	4835      	ldr	r0, [pc, #212]	; (80039a4 <_printf_i+0x244>)
 80038d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	680e      	ldr	r6, [r1, #0]
 80038d8:	061f      	lsls	r7, r3, #24
 80038da:	f856 5b04 	ldr.w	r5, [r6], #4
 80038de:	600e      	str	r6, [r1, #0]
 80038e0:	d514      	bpl.n	800390c <_printf_i+0x1ac>
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	bf44      	itt	mi
 80038e6:	f043 0320 	orrmi.w	r3, r3, #32
 80038ea:	6023      	strmi	r3, [r4, #0]
 80038ec:	b91d      	cbnz	r5, 80038f6 <_printf_i+0x196>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	f023 0320 	bic.w	r3, r3, #32
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	2310      	movs	r3, #16
 80038f8:	e7b0      	b.n	800385c <_printf_i+0xfc>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	f043 0320 	orr.w	r3, r3, #32
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	2378      	movs	r3, #120	; 0x78
 8003904:	4828      	ldr	r0, [pc, #160]	; (80039a8 <_printf_i+0x248>)
 8003906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800390a:	e7e3      	b.n	80038d4 <_printf_i+0x174>
 800390c:	065e      	lsls	r6, r3, #25
 800390e:	bf48      	it	mi
 8003910:	b2ad      	uxthmi	r5, r5
 8003912:	e7e6      	b.n	80038e2 <_printf_i+0x182>
 8003914:	4616      	mov	r6, r2
 8003916:	e7bb      	b.n	8003890 <_printf_i+0x130>
 8003918:	680b      	ldr	r3, [r1, #0]
 800391a:	6826      	ldr	r6, [r4, #0]
 800391c:	6960      	ldr	r0, [r4, #20]
 800391e:	1d1d      	adds	r5, r3, #4
 8003920:	600d      	str	r5, [r1, #0]
 8003922:	0635      	lsls	r5, r6, #24
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	d501      	bpl.n	800392c <_printf_i+0x1cc>
 8003928:	6018      	str	r0, [r3, #0]
 800392a:	e002      	b.n	8003932 <_printf_i+0x1d2>
 800392c:	0671      	lsls	r1, r6, #25
 800392e:	d5fb      	bpl.n	8003928 <_printf_i+0x1c8>
 8003930:	8018      	strh	r0, [r3, #0]
 8003932:	2300      	movs	r3, #0
 8003934:	6123      	str	r3, [r4, #16]
 8003936:	4616      	mov	r6, r2
 8003938:	e7ba      	b.n	80038b0 <_printf_i+0x150>
 800393a:	680b      	ldr	r3, [r1, #0]
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	600a      	str	r2, [r1, #0]
 8003940:	681e      	ldr	r6, [r3, #0]
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	2100      	movs	r1, #0
 8003946:	4630      	mov	r0, r6
 8003948:	f7fc fc52 	bl	80001f0 <memchr>
 800394c:	b108      	cbz	r0, 8003952 <_printf_i+0x1f2>
 800394e:	1b80      	subs	r0, r0, r6
 8003950:	6060      	str	r0, [r4, #4]
 8003952:	6863      	ldr	r3, [r4, #4]
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	2300      	movs	r3, #0
 8003958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395c:	e7a8      	b.n	80038b0 <_printf_i+0x150>
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	4632      	mov	r2, r6
 8003962:	4649      	mov	r1, r9
 8003964:	4640      	mov	r0, r8
 8003966:	47d0      	blx	sl
 8003968:	3001      	adds	r0, #1
 800396a:	d0ab      	beq.n	80038c4 <_printf_i+0x164>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	079b      	lsls	r3, r3, #30
 8003970:	d413      	bmi.n	800399a <_printf_i+0x23a>
 8003972:	68e0      	ldr	r0, [r4, #12]
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	4298      	cmp	r0, r3
 8003978:	bfb8      	it	lt
 800397a:	4618      	movlt	r0, r3
 800397c:	e7a4      	b.n	80038c8 <_printf_i+0x168>
 800397e:	2301      	movs	r3, #1
 8003980:	4632      	mov	r2, r6
 8003982:	4649      	mov	r1, r9
 8003984:	4640      	mov	r0, r8
 8003986:	47d0      	blx	sl
 8003988:	3001      	adds	r0, #1
 800398a:	d09b      	beq.n	80038c4 <_printf_i+0x164>
 800398c:	3501      	adds	r5, #1
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	9903      	ldr	r1, [sp, #12]
 8003992:	1a5b      	subs	r3, r3, r1
 8003994:	42ab      	cmp	r3, r5
 8003996:	dcf2      	bgt.n	800397e <_printf_i+0x21e>
 8003998:	e7eb      	b.n	8003972 <_printf_i+0x212>
 800399a:	2500      	movs	r5, #0
 800399c:	f104 0619 	add.w	r6, r4, #25
 80039a0:	e7f5      	b.n	800398e <_printf_i+0x22e>
 80039a2:	bf00      	nop
 80039a4:	08003cbd 	.word	0x08003cbd
 80039a8:	08003cce 	.word	0x08003cce

080039ac <memcpy>:
 80039ac:	440a      	add	r2, r1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039b4:	d100      	bne.n	80039b8 <memcpy+0xc>
 80039b6:	4770      	bx	lr
 80039b8:	b510      	push	{r4, lr}
 80039ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c2:	4291      	cmp	r1, r2
 80039c4:	d1f9      	bne.n	80039ba <memcpy+0xe>
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <memmove>:
 80039c8:	4288      	cmp	r0, r1
 80039ca:	b510      	push	{r4, lr}
 80039cc:	eb01 0402 	add.w	r4, r1, r2
 80039d0:	d902      	bls.n	80039d8 <memmove+0x10>
 80039d2:	4284      	cmp	r4, r0
 80039d4:	4623      	mov	r3, r4
 80039d6:	d807      	bhi.n	80039e8 <memmove+0x20>
 80039d8:	1e43      	subs	r3, r0, #1
 80039da:	42a1      	cmp	r1, r4
 80039dc:	d008      	beq.n	80039f0 <memmove+0x28>
 80039de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039e6:	e7f8      	b.n	80039da <memmove+0x12>
 80039e8:	4402      	add	r2, r0
 80039ea:	4601      	mov	r1, r0
 80039ec:	428a      	cmp	r2, r1
 80039ee:	d100      	bne.n	80039f2 <memmove+0x2a>
 80039f0:	bd10      	pop	{r4, pc}
 80039f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039fa:	e7f7      	b.n	80039ec <memmove+0x24>

080039fc <_free_r>:
 80039fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039fe:	2900      	cmp	r1, #0
 8003a00:	d048      	beq.n	8003a94 <_free_r+0x98>
 8003a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a06:	9001      	str	r0, [sp, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a0e:	bfb8      	it	lt
 8003a10:	18e4      	addlt	r4, r4, r3
 8003a12:	f000 f8d3 	bl	8003bbc <__malloc_lock>
 8003a16:	4a20      	ldr	r2, [pc, #128]	; (8003a98 <_free_r+0x9c>)
 8003a18:	9801      	ldr	r0, [sp, #4]
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	4615      	mov	r5, r2
 8003a1e:	b933      	cbnz	r3, 8003a2e <_free_r+0x32>
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	6014      	str	r4, [r2, #0]
 8003a24:	b003      	add	sp, #12
 8003a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a2a:	f000 b8cd 	b.w	8003bc8 <__malloc_unlock>
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	d90b      	bls.n	8003a4a <_free_r+0x4e>
 8003a32:	6821      	ldr	r1, [r4, #0]
 8003a34:	1862      	adds	r2, r4, r1
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bf04      	itt	eq
 8003a3a:	681a      	ldreq	r2, [r3, #0]
 8003a3c:	685b      	ldreq	r3, [r3, #4]
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	bf04      	itt	eq
 8003a42:	1852      	addeq	r2, r2, r1
 8003a44:	6022      	streq	r2, [r4, #0]
 8003a46:	602c      	str	r4, [r5, #0]
 8003a48:	e7ec      	b.n	8003a24 <_free_r+0x28>
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b10b      	cbz	r3, 8003a54 <_free_r+0x58>
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d9fa      	bls.n	8003a4a <_free_r+0x4e>
 8003a54:	6811      	ldr	r1, [r2, #0]
 8003a56:	1855      	adds	r5, r2, r1
 8003a58:	42a5      	cmp	r5, r4
 8003a5a:	d10b      	bne.n	8003a74 <_free_r+0x78>
 8003a5c:	6824      	ldr	r4, [r4, #0]
 8003a5e:	4421      	add	r1, r4
 8003a60:	1854      	adds	r4, r2, r1
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	6011      	str	r1, [r2, #0]
 8003a66:	d1dd      	bne.n	8003a24 <_free_r+0x28>
 8003a68:	681c      	ldr	r4, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	6053      	str	r3, [r2, #4]
 8003a6e:	4421      	add	r1, r4
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	e7d7      	b.n	8003a24 <_free_r+0x28>
 8003a74:	d902      	bls.n	8003a7c <_free_r+0x80>
 8003a76:	230c      	movs	r3, #12
 8003a78:	6003      	str	r3, [r0, #0]
 8003a7a:	e7d3      	b.n	8003a24 <_free_r+0x28>
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	1961      	adds	r1, r4, r5
 8003a80:	428b      	cmp	r3, r1
 8003a82:	bf04      	itt	eq
 8003a84:	6819      	ldreq	r1, [r3, #0]
 8003a86:	685b      	ldreq	r3, [r3, #4]
 8003a88:	6063      	str	r3, [r4, #4]
 8003a8a:	bf04      	itt	eq
 8003a8c:	1949      	addeq	r1, r1, r5
 8003a8e:	6021      	streq	r1, [r4, #0]
 8003a90:	6054      	str	r4, [r2, #4]
 8003a92:	e7c7      	b.n	8003a24 <_free_r+0x28>
 8003a94:	b003      	add	sp, #12
 8003a96:	bd30      	pop	{r4, r5, pc}
 8003a98:	20000090 	.word	0x20000090

08003a9c <_malloc_r>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	1ccd      	adds	r5, r1, #3
 8003aa0:	f025 0503 	bic.w	r5, r5, #3
 8003aa4:	3508      	adds	r5, #8
 8003aa6:	2d0c      	cmp	r5, #12
 8003aa8:	bf38      	it	cc
 8003aaa:	250c      	movcc	r5, #12
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	4606      	mov	r6, r0
 8003ab0:	db01      	blt.n	8003ab6 <_malloc_r+0x1a>
 8003ab2:	42a9      	cmp	r1, r5
 8003ab4:	d903      	bls.n	8003abe <_malloc_r+0x22>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	6033      	str	r3, [r6, #0]
 8003aba:	2000      	movs	r0, #0
 8003abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003abe:	f000 f87d 	bl	8003bbc <__malloc_lock>
 8003ac2:	4921      	ldr	r1, [pc, #132]	; (8003b48 <_malloc_r+0xac>)
 8003ac4:	680a      	ldr	r2, [r1, #0]
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	b99c      	cbnz	r4, 8003af2 <_malloc_r+0x56>
 8003aca:	4f20      	ldr	r7, [pc, #128]	; (8003b4c <_malloc_r+0xb0>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b923      	cbnz	r3, 8003ada <_malloc_r+0x3e>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 f862 	bl	8003b9c <_sbrk_r>
 8003ad8:	6038      	str	r0, [r7, #0]
 8003ada:	4629      	mov	r1, r5
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f85d 	bl	8003b9c <_sbrk_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	d123      	bne.n	8003b2e <_malloc_r+0x92>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 f86c 	bl	8003bc8 <__malloc_unlock>
 8003af0:	e7e3      	b.n	8003aba <_malloc_r+0x1e>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	1b5b      	subs	r3, r3, r5
 8003af6:	d417      	bmi.n	8003b28 <_malloc_r+0x8c>
 8003af8:	2b0b      	cmp	r3, #11
 8003afa:	d903      	bls.n	8003b04 <_malloc_r+0x68>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	441c      	add	r4, r3
 8003b00:	6025      	str	r5, [r4, #0]
 8003b02:	e004      	b.n	8003b0e <_malloc_r+0x72>
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	42a2      	cmp	r2, r4
 8003b08:	bf0c      	ite	eq
 8003b0a:	600b      	streq	r3, [r1, #0]
 8003b0c:	6053      	strne	r3, [r2, #4]
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f85a 	bl	8003bc8 <__malloc_unlock>
 8003b14:	f104 000b 	add.w	r0, r4, #11
 8003b18:	1d23      	adds	r3, r4, #4
 8003b1a:	f020 0007 	bic.w	r0, r0, #7
 8003b1e:	1ac2      	subs	r2, r0, r3
 8003b20:	d0cc      	beq.n	8003abc <_malloc_r+0x20>
 8003b22:	1a1b      	subs	r3, r3, r0
 8003b24:	50a3      	str	r3, [r4, r2]
 8003b26:	e7c9      	b.n	8003abc <_malloc_r+0x20>
 8003b28:	4622      	mov	r2, r4
 8003b2a:	6864      	ldr	r4, [r4, #4]
 8003b2c:	e7cc      	b.n	8003ac8 <_malloc_r+0x2c>
 8003b2e:	1cc4      	adds	r4, r0, #3
 8003b30:	f024 0403 	bic.w	r4, r4, #3
 8003b34:	42a0      	cmp	r0, r4
 8003b36:	d0e3      	beq.n	8003b00 <_malloc_r+0x64>
 8003b38:	1a21      	subs	r1, r4, r0
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f000 f82e 	bl	8003b9c <_sbrk_r>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d1dd      	bne.n	8003b00 <_malloc_r+0x64>
 8003b44:	e7cf      	b.n	8003ae6 <_malloc_r+0x4a>
 8003b46:	bf00      	nop
 8003b48:	20000090 	.word	0x20000090
 8003b4c:	20000094 	.word	0x20000094

08003b50 <_realloc_r>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	4607      	mov	r7, r0
 8003b54:	4614      	mov	r4, r2
 8003b56:	460e      	mov	r6, r1
 8003b58:	b921      	cbnz	r1, 8003b64 <_realloc_r+0x14>
 8003b5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b5e:	4611      	mov	r1, r2
 8003b60:	f7ff bf9c 	b.w	8003a9c <_malloc_r>
 8003b64:	b922      	cbnz	r2, 8003b70 <_realloc_r+0x20>
 8003b66:	f7ff ff49 	bl	80039fc <_free_r>
 8003b6a:	4625      	mov	r5, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b70:	f000 f830 	bl	8003bd4 <_malloc_usable_size_r>
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d20f      	bcs.n	8003b98 <_realloc_r+0x48>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f7ff ff8e 	bl	8003a9c <_malloc_r>
 8003b80:	4605      	mov	r5, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0f2      	beq.n	8003b6c <_realloc_r+0x1c>
 8003b86:	4631      	mov	r1, r6
 8003b88:	4622      	mov	r2, r4
 8003b8a:	f7ff ff0f 	bl	80039ac <memcpy>
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4638      	mov	r0, r7
 8003b92:	f7ff ff33 	bl	80039fc <_free_r>
 8003b96:	e7e9      	b.n	8003b6c <_realloc_r+0x1c>
 8003b98:	4635      	mov	r5, r6
 8003b9a:	e7e7      	b.n	8003b6c <_realloc_r+0x1c>

08003b9c <_sbrk_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d06      	ldr	r5, [pc, #24]	; (8003bb8 <_sbrk_r+0x1c>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fd f8d0 	bl	8000d4c <_sbrk>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_sbrk_r+0x1a>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_sbrk_r+0x1a>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	200001b0 	.word	0x200001b0

08003bbc <__malloc_lock>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__malloc_lock+0x8>)
 8003bbe:	f000 b811 	b.w	8003be4 <__retarget_lock_acquire_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	200001b8 	.word	0x200001b8

08003bc8 <__malloc_unlock>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	; (8003bd0 <__malloc_unlock+0x8>)
 8003bca:	f000 b80c 	b.w	8003be6 <__retarget_lock_release_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200001b8 	.word	0x200001b8

08003bd4 <_malloc_usable_size_r>:
 8003bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd8:	1f18      	subs	r0, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfbc      	itt	lt
 8003bde:	580b      	ldrlt	r3, [r1, r0]
 8003be0:	18c0      	addlt	r0, r0, r3
 8003be2:	4770      	bx	lr

08003be4 <__retarget_lock_acquire_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_release_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <_init>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr

08003bf4 <_fini>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr
