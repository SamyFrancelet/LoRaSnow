
LoRaSnow_GarminLidarLiteV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08007890  08007890  00017890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001dc  080082d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080082d0  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed0e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3f  00000000  00000000  0002ef1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00030e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000318c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ab  00000000  00000000  000322a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d37a  00000000  00000000  0004964b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4f3  00000000  00000000  000569c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0eb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000e0f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007878 	.word	0x08007878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007878 	.word	0x08007878

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <LIDAR_init>:

#include "../Inc/LIDARLite_v4LED.h"

//Initialize the I2C port
bool LIDAR_init(LIDARLite_TypeDef* lidar, uint8_t addr, I2C_HandleTypeDef* i2cPort, float lAngle, float rAngle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6178      	str	r0, [r7, #20]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f60:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f64:	74fb      	strb	r3, [r7, #19]
	lidar->addr = addr;		//Save LIDAR address
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	7cfa      	ldrb	r2, [r7, #19]
 8000f6a:	701a      	strb	r2, [r3, #0]
	_i2cPort = i2cPort;		//Save I2C port
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LIDAR_init+0x4c>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6013      	str	r3, [r2, #0]

	lidar->lidarAngle = lAngle;		//Save LIDAR angle from the vertical
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	611a      	str	r2, [r3, #16]
	lidar->roadAngle = rAngle;		//Save LIDAR angle from the plane
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	615a      	str	r2, [r3, #20]

	//Read status to check if LIDAR is connected
	lidar->isConnected = LIDAR_read(lidar, STATUS, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f000 f894 	bl	80010b0 <LIDAR_read>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	761a      	strb	r2, [r3, #24]

	return lidar->isConnected;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	7e1b      	ldrb	r3, [r3, #24]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000208 	.word	0x20000208

08000fa0 <LIDAR_takeRange>:
/*------------------------------------------------------------------------------
  Take Range
  Initiate a distance measurement by writing to register 0x00.
------------------------------------------------------------------------------*/
void LIDAR_takeRange(LIDARLite_TypeDef* lidar)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	lidar->buf[0] = 0x04;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2204      	movs	r2, #4
 8000fac:	705a      	strb	r2, [r3, #1]
	LIDAR_write(lidar, ACQ_COMMANDS, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f852 	bl	800105c <LIDAR_write>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LIDAR_waitForBusy>:
/*------------------------------------------------------------------------------
  Wait for Busy Flag
  Blocking function to wait until the Lidar Lite's internal busy flag goes low
------------------------------------------------------------------------------*/
void LIDAR_waitForBusy(LIDARLite_TypeDef* lidar)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag;

	do
	{
		busyFlag = LIDAR_getBusyFlag(lidar);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f80a 	bl	8000fe2 <LIDAR_getBusyFlag>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	} while (busyFlag);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f7      	bne.n	8000fc8 <LIDAR_waitForBusy+0x8>
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <LIDAR_getBusyFlag>:
/*------------------------------------------------------------------------------
  Get Busy Flag
  Read BUSY flag from device registers. Function will return 0x00 if not busy.
------------------------------------------------------------------------------*/
uint8_t LIDAR_getBusyFlag(LIDARLite_TypeDef* lidar)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag; // busyFlag monitors when the device is done with a measurement

	// Read status register to check busy flag
	LIDAR_read(lidar, STATUS, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f85e 	bl	80010b0 <LIDAR_read>

	// STATUS bit 0 is busyFlag
	busyFlag = lidar->buf[0] & 0x01;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]

	return busyFlag;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <LIDAR_readDistance>:
/*------------------------------------------------------------------------------
  Read Distance
  Read and return the result of the most recent distance measurement.
------------------------------------------------------------------------------*/
uint16_t LIDAR_readDistance(LIDARLite_TypeDef* lidar)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint16_t distance;

	// Read two bytes from registers 0x10 and 0x11
	LIDAR_read(lidar, FULL_DELAY_LOW, 2);
 8001010:	2202      	movs	r2, #2
 8001012:	2110      	movs	r1, #16
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f84b 	bl	80010b0 <LIDAR_read>

	distance = lidar->buf[0] + (lidar->buf[1]<<8);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	789b      	ldrb	r3, [r3, #2]
 8001024:	b29b      	uxth	r3, r3
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	81fb      	strh	r3, [r7, #14]

	return distance; //This is the distance in centimeters
 800102e:	89fb      	ldrh	r3, [r7, #14]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <LIDAR_getDistance>:


//Get distance measurement function
uint16_t LIDAR_getDistance(LIDARLite_TypeDef* lidar)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// 1. Trigger a range measurement.
	LIDAR_takeRange(lidar);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffad 	bl	8000fa0 <LIDAR_takeRange>

	// 2. Wait for busyFlag to indicate the device is idle.
	LIDAR_waitForBusy(lidar);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffba 	bl	8000fc0 <LIDAR_waitForBusy>

	// 3. Read new distance data from device registers
	return LIDAR_readDistance(lidar);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffdb 	bl	8001008 <LIDAR_readDistance>
 8001052:	4603      	mov	r3, r0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <LIDAR_write>:
  regAddr:   register address to write to
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to write
------------------------------------------------------------------------------*/
bool LIDAR_write(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <LIDAR_write+0x50>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b299      	uxth	r1, r3
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	b29c      	uxth	r4, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	78ba      	ldrb	r2, [r7, #2]
 8001080:	b292      	uxth	r2, r2
 8001082:	f04f 35ff 	mov.w	r5, #4294967295
 8001086:	9502      	str	r5, [sp, #8]
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4622      	mov	r2, r4
 8001090:	f001 f9bc 	bl	800240c <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in transmission
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <LIDAR_write+0x46>
		return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <LIDAR_write+0x48>
	else
		return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bdb0      	pop	{r4, r5, r7, pc}
 80010ac:	20000208 	.word	0x20000208

080010b0 <LIDAR_read>:
  regAddr:   register address to read
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to read
------------------------------------------------------------------------------*/
bool LIDAR_read(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
 80010bc:	4613      	mov	r3, r2
 80010be:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <LIDAR_read+0x50>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	b29c      	uxth	r4, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	78ba      	ldrb	r2, [r7, #2]
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f04f 35ff 	mov.w	r5, #4294967295
 80010da:	9502      	str	r5, [sp, #8]
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	4622      	mov	r2, r4
 80010e4:	f001 fa8c 	bl	8002600 <HAL_I2C_Mem_Read>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in reception
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <LIDAR_read+0x46>
		return false;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <LIDAR_read+0x48>
	else
		return true;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	20000208 	.word	0x20000208

08001104 <LIDARfc_init>:
 */

#include "../Inc/LIDAR_functions.h"

void LIDARfc_init(UART_HandleTypeDef* huart2, LIDARLite_TypeDef* lidar, I2C_HandleTypeDef* hi2c1, float lAngle, float rAngle)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6178      	str	r0, [r7, #20]
 800110c:	6139      	str	r1, [r7, #16]
 800110e:	60fa      	str	r2, [r7, #12]
 8001110:	ed87 0a02 	vstr	s0, [r7, #8]
 8001114:	edc7 0a01 	vstr	s1, [r7, #4]
	_huart2 = huart2;
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <LIDARfc_init+0x84>)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	6013      	str	r3, [r2, #0]
	_hi2c1 = hi2c1;
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <LIDARfc_init+0x88>)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6013      	str	r3, [r2, #0]
	_lidar = lidar;
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <LIDARfc_init+0x8c>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6013      	str	r3, [r2, #0]

	//Connect to LIDAR
	bool connect = LIDAR_init(_lidar, LIDAR_DEFAULT_ADDR, _hi2c1, lAngle, rAngle);
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <LIDARfc_init+0x8c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <LIDARfc_init+0x88>)
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	edd7 0a01 	vldr	s1, [r7, #4]
 8001136:	ed97 0a02 	vldr	s0, [r7, #8]
 800113a:	21c4      	movs	r1, #196	; 0xc4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff07 	bl	8000f50 <LIDAR_init>
 8001142:	4603      	mov	r3, r0
 8001144:	77fb      	strb	r3, [r7, #31]

	if(connect)
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00e      	beq.n	800116a <LIDARfc_init+0x66>
	   strcpy((char*)str, "Successfully connected.\r\n");
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <LIDARfc_init+0x90>)
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <LIDARfc_init+0x94>)
 8001150:	4615      	mov	r5, r2
 8001152:	461c      	mov	r4, r3
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	6028      	str	r0, [r5, #0]
 8001158:	6069      	str	r1, [r5, #4]
 800115a:	60aa      	str	r2, [r5, #8]
 800115c:	60eb      	str	r3, [r5, #12]
 800115e:	cc03      	ldmia	r4!, {r0, r1}
 8001160:	6128      	str	r0, [r5, #16]
 8001162:	6169      	str	r1, [r5, #20]
 8001164:	8823      	ldrh	r3, [r4, #0]
 8001166:	832b      	strh	r3, [r5, #24]
 8001168:	e006      	b.n	8001178 <LIDARfc_init+0x74>
	else
	   strcpy((char*)str, "Error.\r\n");
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LIDARfc_init+0x90>)
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LIDARfc_init+0x98>)
 800116e:	cb03      	ldmia	r3!, {r0, r1}
 8001170:	6010      	str	r0, [r2, #0]
 8001172:	6051      	str	r1, [r2, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	7213      	strb	r3, [r2, #8]

	LIDARfc_printf(str);
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <LIDARfc_init+0x90>)
 800117a:	f000 f945 	bl	8001408 <LIDARfc_printf>
}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	2000020c 	.word	0x2000020c
 800118c:	200002e4 	.word	0x200002e4
 8001190:	20000210 	.word	0x20000210
 8001194:	2000021c 	.word	0x2000021c
 8001198:	08007890 	.word	0x08007890
 800119c:	080078ac 	.word	0x080078ac

080011a0 <LIDARfc_distanceToGround>:

uint16_t LIDARfc_distanceToGround(uint16_t* measures, uint8_t size)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	//Local variables
	uint16_t max = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	81fb      	strh	r3, [r7, #14]

	LIDARfc_measure(measures, NMES, 200);	//Take distance measures
 80011b0:	22c8      	movs	r2, #200	; 0xc8
 80011b2:	2132      	movs	r1, #50	; 0x32
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f8cb 	bl	8001350 <LIDARfc_measure>
	max = measures[0];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	81fb      	strh	r3, [r7, #14]

	//Real distance is the max of the set of measures
	for(int i = 0; i < size; i++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	e010      	b.n	80011e8 <LIDARfc_distanceToGround+0x48>
	{
		if(measures[i] > max)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	89fa      	ldrh	r2, [r7, #14]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d205      	bcs.n	80011e2 <LIDARfc_distanceToGround+0x42>
		{
			max = measures[i];
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < size; i++)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbea      	blt.n	80011c6 <LIDARfc_distanceToGround+0x26>
		}
	}

	sprintf((char*)str, "\nDistance to ground is %icm\r\n", max);
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4905      	ldr	r1, [pc, #20]	; (800120c <LIDARfc_distanceToGround+0x6c>)
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <LIDARfc_distanceToGround+0x70>)
 80011f8:	f003 fbaa 	bl	8004950 <siprintf>
	LIDARfc_printf(str);
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <LIDARfc_distanceToGround+0x70>)
 80011fe:	f000 f903 	bl	8001408 <LIDARfc_printf>

	return max;
 8001202:	89fb      	ldrh	r3, [r7, #14]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	080078b8 	.word	0x080078b8
 8001210:	2000021c 	.word	0x2000021c

08001214 <LIDARfc_saveRefDistance>:

void LIDARfc_saveRefDistance()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	sprintf((char*)str, "Taking reference distance...\r\n\n");
 8001218:	4908      	ldr	r1, [pc, #32]	; (800123c <LIDARfc_saveRefDistance+0x28>)
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <LIDARfc_saveRefDistance+0x2c>)
 800121c:	f003 fb98 	bl	8004950 <siprintf>
	LIDARfc_printf(str);
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <LIDARfc_saveRefDistance+0x2c>)
 8001222:	f000 f8f1 	bl	8001408 <LIDARfc_printf>

	refDist = LIDARfc_distanceToGround(measures, NMES);		//Save reference distance
 8001226:	2132      	movs	r1, #50	; 0x32
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <LIDARfc_saveRefDistance+0x30>)
 800122a:	f7ff ffb9 	bl	80011a0 <LIDARfc_distanceToGround>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <LIDARfc_saveRefDistance+0x34>)
 8001234:	801a      	strh	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	080078d8 	.word	0x080078d8
 8001240:	2000021c 	.word	0x2000021c
 8001244:	20000280 	.word	0x20000280
 8001248:	20000214 	.word	0x20000214
 800124c:	00000000 	.word	0x00000000

08001250 <LIDARfc_measureOffset>:

void LIDARfc_measureOffset()
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	ed2d 8b02 	vpush	{d8}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	uint16_t dist = 0, delta = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	2300      	movs	r3, #0
 8001260:	80bb      	strh	r3, [r7, #4]
	float gamma = 0;
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	603b      	str	r3, [r7, #0]

	//sprintf((char*)str, "Measuring offset...\r\n\n");
	//LIDARfc_printf(str);

	dist = LIDARfc_distanceToGround(measures, NMES);			//Save measured distance
 8001268:	2132      	movs	r1, #50	; 0x32
 800126a:	4833      	ldr	r0, [pc, #204]	; (8001338 <LIDARfc_measureOffset+0xe8>)
 800126c:	f7ff ff98 	bl	80011a0 <LIDARfc_distanceToGround>
 8001270:	4603      	mov	r3, r0
 8001272:	80fb      	strh	r3, [r7, #6]
	delta = refDist - dist;										//Compute the difference between the measured and the reference distance
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <LIDARfc_measureOffset+0xec>)
 8001276:	881a      	ldrh	r2, [r3, #0]
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	80bb      	strh	r3, [r7, #4]
	gamma = M_PI / 2 + _lidar->roadAngle - _lidar->lidarAngle;	//See the report to understand offset computation
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <LIDARfc_measureOffset+0xf0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f967 	bl	8000558 <__aeabi_f2d>
 800128a:	a329      	add	r3, pc, #164	; (adr r3, 8001330 <LIDARfc_measureOffset+0xe0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f804 	bl	800029c <__adddf3>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4614      	mov	r4, r2
 800129a:	461d      	mov	r5, r3
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <LIDARfc_measureOffset+0xf0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f958 	bl	8000558 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7fe fff2 	bl	8000298 <__aeabi_dsub>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc7c 	bl	8000bb8 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	603b      	str	r3, [r7, #0]

	offset = delta * cosf(M_PI / 2 - gamma);					//Compute the snow height
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff f942 	bl	8000558 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	a115      	add	r1, pc, #84	; (adr r1, 8001330 <LIDARfc_measureOffset+0xe0>)
 80012da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012de:	f7fe ffdb 	bl	8000298 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc65 	bl	8000bb8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	ee00 3a10 	vmov	s0, r3
 80012f4:	f005 fd56 	bl	8006da4 <cosf>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <LIDARfc_measureOffset+0xf4>)
 8001302:	edc3 7a00 	vstr	s15, [r3]

	sprintf((char*)str, "Measured offset is %.2fcm\r\n", offset);
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <LIDARfc_measureOffset+0xf4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f924 	bl	8000558 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <LIDARfc_measureOffset+0xf8>)
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <LIDARfc_measureOffset+0xfc>)
 8001318:	f003 fb1a 	bl	8004950 <siprintf>
	LIDARfc_printf(str);
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LIDARfc_measureOffset+0xfc>)
 800131e:	f000 f873 	bl	8001408 <LIDARfc_printf>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	ecbd 8b02 	vpop	{d8}
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	54442d18 	.word	0x54442d18
 8001334:	3ff921fb 	.word	0x3ff921fb
 8001338:	20000280 	.word	0x20000280
 800133c:	20000214 	.word	0x20000214
 8001340:	20000210 	.word	0x20000210
 8001344:	20000218 	.word	0x20000218
 8001348:	080078f8 	.word	0x080078f8
 800134c:	2000021c 	.word	0x2000021c

08001350 <LIDARfc_measure>:

void LIDARfc_measure(uint16_t* measures, uint8_t nTimes, uint16_t delay)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
 800135c:	4613      	mov	r3, r2
 800135e:	803b      	strh	r3, [r7, #0]
	//sprintf((char*)str, "Taking %i measures with a %ims delay...\r\n", nTimes, delay);
	LIDARfc_printf(str);
 8001360:	4824      	ldr	r0, [pc, #144]	; (80013f4 <LIDARfc_measure+0xa4>)
 8001362:	f000 f851 	bl	8001408 <LIDARfc_printf>

	for(uint8_t i = 0; i < nTimes; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e034      	b.n	80013d6 <LIDARfc_measure+0x86>
	{
		float progress = ((float)i+1)/nTimes*100;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013f8 <LIDARfc_measure+0xa8>
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	edc7 7a02 	vstr	s15, [r7, #8]

		measures[i] = LIDAR_getDistance(_lidar);		//Take distance measurements
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <LIDARfc_measure+0xac>)
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	18d4      	adds	r4, r2, r3
 80013a4:	4608      	mov	r0, r1
 80013a6:	f7ff fe47 	bl	8001038 <LIDAR_getDistance>
 80013aa:	4603      	mov	r3, r0
 80013ac:	8023      	strh	r3, [r4, #0]
		sprintf((char*)str, "%i;", measures[i]);
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4911      	ldr	r1, [pc, #68]	; (8001400 <LIDARfc_measure+0xb0>)
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LIDARfc_measure+0xa4>)
 80013be:	f003 fac7 	bl	8004950 <siprintf>

		//sprintf((char*)str, "\r%.2f%% done...  ", progress);
		LIDARfc_printf(str);
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LIDARfc_measure+0xa4>)
 80013c4:	f000 f820 	bl	8001408 <LIDARfc_printf>

		HAL_Delay(delay);
 80013c8:	883b      	ldrh	r3, [r7, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fc32 	bl	8001c34 <HAL_Delay>
	for(uint8_t i = 0; i < nTimes; i++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3c6      	bcc.n	800136c <LIDARfc_measure+0x1c>
	}

	sprintf((char*)str, "\r\n");
 80013de:	4909      	ldr	r1, [pc, #36]	; (8001404 <LIDARfc_measure+0xb4>)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <LIDARfc_measure+0xa4>)
 80013e2:	f003 fab5 	bl	8004950 <siprintf>
	LIDARfc_printf(str);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <LIDARfc_measure+0xa4>)
 80013e8:	f000 f80e 	bl	8001408 <LIDARfc_printf>
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	2000021c 	.word	0x2000021c
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	20000210 	.word	0x20000210
 8001400:	08007914 	.word	0x08007914
 8001404:	08007918 	.word	0x08007918

08001408 <LIDARfc_printf>:

void LIDARfc_printf(uint8_t* toSend)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_huart2, toSend, strlen((char*)toSend), HAL_MAX_DELAY);
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <LIDARfc_printf+0x2c>)
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7fe fee3 	bl	80001e0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4620      	mov	r0, r4
 8001426:	f002 fb2e 	bl	8003a86 <HAL_UART_Transmit>
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	2000020c 	.word	0x2000020c

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//Variables
	LIDARLite_TypeDef lidar;						//Our LIDAR
	float lidarAngle = 45, roadAngle = 0;		//Lidar angle from vertical and road angle from plane in degrees
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <main+0xa8>)
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fb82 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f850 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f90e 	bl	8001670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001454:	f000 f8e2 	bl	800161c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001458:	f000 f8b2 	bl	80015c0 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Convert angle from deg to rad
  lidarAngle *= M_PI/180;
 800145c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	a31d      	add	r3, pc, #116	; (adr r3, 80014d8 <main+0xa0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ce 	bl	8000608 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fba0 	bl	8000bb8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  roadAngle *= M_PI/180;
 800147c:	6a38      	ldr	r0, [r7, #32]
 800147e:	f7ff f86b 	bl	8000558 <__aeabi_f2d>
 8001482:	a315      	add	r3, pc, #84	; (adr r3, 80014d8 <main+0xa0>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f8be 	bl	8000608 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb90 	bl	8000bb8 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	623b      	str	r3, [r7, #32]

  //Enable temperature and LIDAR
  HAL_GPIO_WritePin(LIDAR_en_GPIO_Port, LIDAR_en_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <main+0xac>)
 80014a4:	f000 fe54 	bl	8002150 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TEMP_en_GPIO_Port, TEMP_en_Pin, GPIO_PIN_SET); //Todo resolder pin

  LIDARfc_init(&huart2, &lidar, &hi2c1, lidarAngle, roadAngle);  //Init LIDAR connection
 80014a8:	463b      	mov	r3, r7
 80014aa:	edd7 0a08 	vldr	s1, [r7, #32]
 80014ae:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <main+0xb0>)
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <main+0xb4>)
 80014b8:	f7ff fe24 	bl	8001104 <LIDARfc_init>

  //Take reference distance to ground (no snow)
  LIDARfc_saveRefDistance();
 80014bc:	f7ff feaa 	bl	8001214 <LIDARfc_saveRefDistance>

  bool stay = true;
 80014c0:	2301      	movs	r3, #1
 80014c2:	77fb      	strb	r3, [r7, #31]
		  {
			  stay = false;
		  }
	  }**/

	  stay = true;
 80014c4:	2301      	movs	r3, #1
 80014c6:	77fb      	strb	r3, [r7, #31]

	  /*if(/*!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))	//User button to start measurement
	  {*/
		  LIDARfc_measureOffset();
 80014c8:	f7ff fec2 	bl	8001250 <LIDARfc_measureOffset>
	  //}

		  HAL_Delay(30000);
 80014cc:	f247 5030 	movw	r0, #30000	; 0x7530
 80014d0:	f000 fbb0 	bl	8001c34 <HAL_Delay>
	  stay = true;
 80014d4:	e7f6      	b.n	80014c4 <main+0x8c>
 80014d6:	bf00      	nop
 80014d8:	a2529d39 	.word	0xa2529d39
 80014dc:	3f91df46 	.word	0x3f91df46
 80014e0:	42340000 	.word	0x42340000
 80014e4:	40020000 	.word	0x40020000
 80014e8:	200002e8 	.word	0x200002e8
 80014ec:	2000033c 	.word	0x2000033c

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fdb4 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <SystemClock_Config+0xc8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <SystemClock_Config+0xc8>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <SystemClock_Config+0xc8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <SystemClock_Config+0xcc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a20      	ldr	r2, [pc, #128]	; (80015bc <SystemClock_Config+0xcc>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <SystemClock_Config+0xcc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001554:	2310      	movs	r3, #16
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001558:	2302      	movs	r3, #2
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155c:	2300      	movs	r3, #0
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001560:	2308      	movs	r3, #8
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800156c:	2304      	movs	r3, #4
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fdc5 	bl	8003104 <HAL_RCC_OscConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001580:	f000 f8fc 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	230f      	movs	r3, #15
 8001586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001588:	2302      	movs	r3, #2
 800158a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2103      	movs	r1, #3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f827 	bl	80035f4 <HAL_RCC_ClockConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015ac:	f000 f8e6 	bl	800177c <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3750      	adds	r7, #80	; 0x50
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C1_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <MX_I2C1_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C1_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_I2C1_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_I2C1_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_I2C1_Init+0x50>)
 80015fe:	f000 fdc1 	bl	8002184 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 f8b8 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002e8 	.word	0x200002e8
 8001614:	40005400 	.word	0x40005400
 8001618:	00061a80 	.word	0x00061a80

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART2_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001654:	f002 f9ca 	bl	80039ec <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f88d 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000033c 	.word	0x2000033c
 800166c:	40004400 	.word	0x40004400

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <MX_GPIO_Init+0xfc>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <MX_GPIO_Init+0xfc>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_GPIO_Init+0xfc>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <MX_GPIO_Init+0xfc>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <MX_GPIO_Init+0xfc>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_GPIO_Init+0xfc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_GPIO_Init+0xfc>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_GPIO_Init+0xfc>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_GPIO_Init+0xfc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xfc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <MX_GPIO_Init+0xfc>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_GPIO_Init+0xfc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LIDAR_en_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_GPIO_Init+0x100>)
 80016fe:	f000 fd27 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_en_GPIO_Port, TEMP_en_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2108      	movs	r1, #8
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <MX_GPIO_Init+0x104>)
 8001708:	f000 fd22 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001712:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <MX_GPIO_Init+0x108>)
 8001724:	f000 fb90 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LIDAR_en_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LIDAR_en_Pin;
 8001728:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0x100>)
 8001742:	f000 fb81 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_en_Pin */
  GPIO_InitStruct.Pin = TEMP_en_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEMP_en_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_GPIO_Init+0x104>)
 800175e:	f000 fb73 	bl	8001e48 <HAL_GPIO_Init>

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	40020800 	.word	0x40020800

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c6:	2007      	movs	r0, #7
 80017c8:	f000 fb0a 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_I2C_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001828:	2304      	movs	r3, #4
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <HAL_I2C_MspInit+0x8c>)
 8001834:	f000 fb08 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005400 	.word	0x40005400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_UART_MspInit+0x84>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12b      	bne.n	80018e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0x88>)
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018c2:	230c      	movs	r3, #12
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d2:	2307      	movs	r3, #7
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_UART_MspInit+0x8c>)
 80018de:	f000 fab3 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40004400 	.word	0x40004400
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001944:	f000 f956 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001966:	f002 fb57 	bl	8004018 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
	return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
	while (1) {}		/* Make sure we hang here */
 800198e:	e7fe      	b.n	800198e <_exit+0x12>

08001990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e00a      	b.n	80019b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a2:	f3af 8000 	nop.w
 80019a6:	4601      	mov	r1, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf0      	blt.n	80019a2 <_read+0x12>
	}

return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e009      	b.n	80019f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf1      	blt.n	80019dc <_write+0x12>
	}
	return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_close>:

int _close(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f002 fabc 	bl	8004018 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20020000 	.word	0x20020000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	200001f8 	.word	0x200001f8
 8001ad4:	20000398 	.word	0x20000398

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b26:	f7ff ffd7 	bl	8001ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f002 fa7b 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff fc83 	bl	8001438 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b40:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8001b44:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b48:	20000394 	.word	0x20000394

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f931 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fe00 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f93b 	bl	8001e2e <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f911 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000380 	.word	0x20000380

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000380 	.word	0x20000380

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff47 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff5c 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffb0 	bl	8001d9c <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e159      	b.n	8002118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8148 	bne.w	8002112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a2 	beq.w	8002112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x202>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x1fe>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x1f6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x1f2>
 8002036:	2304      	movs	r3, #4
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203a:	2307      	movs	r3, #7
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x204>
 800204a:	2300      	movs	r3, #0
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_GPIO_Init+0x304>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_GPIO_Init+0x304>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x304>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x304>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	f67f aea2 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40021000 	.word	0x40021000
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e12b      	b.n	80023ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fb14 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2224      	movs	r2, #36	; 0x24
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e8:	f001 fbd8 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a81      	ldr	r2, [pc, #516]	; (80023f8 <HAL_I2C_Init+0x274>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d807      	bhi.n	8002208 <HAL_I2C_Init+0x84>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_I2C_Init+0x278>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e006      	b.n	8002216 <HAL_I2C_Init+0x92>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a7d      	ldr	r2, [pc, #500]	; (8002400 <HAL_I2C_Init+0x27c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0e7      	b.n	80023ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a78      	ldr	r2, [pc, #480]	; (8002404 <HAL_I2C_Init+0x280>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a6a      	ldr	r2, [pc, #424]	; (80023f8 <HAL_I2C_Init+0x274>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d802      	bhi.n	8002258 <HAL_I2C_Init+0xd4>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	e009      	b.n	800226c <HAL_I2C_Init+0xe8>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a69      	ldr	r2, [pc, #420]	; (8002408 <HAL_I2C_Init+0x284>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	3301      	adds	r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	430b      	orrs	r3, r1
 8002272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	495c      	ldr	r1, [pc, #368]	; (80023f8 <HAL_I2C_Init+0x274>)
 8002288:	428b      	cmp	r3, r1
 800228a:	d819      	bhi.n	80022c0 <HAL_I2C_Init+0x13c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e59      	subs	r1, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fbb1 f3f3 	udiv	r3, r1, r3
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_I2C_Init+0x138>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e59      	subs	r1, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	e051      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 80022bc:	2304      	movs	r3, #4
 80022be:	e04f      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_I2C_Init+0x168>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e012      	b.n	8002312 <HAL_I2C_Init+0x18e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x196>
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_I2C_Init+0x1bc>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	fbb0 f3f3 	udiv	r3, r0, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Init+0x1dc>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6809      	ldr	r1, [r1, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6911      	ldr	r1, [r2, #16]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	003d08ff 	.word	0x003d08ff
 8002404:	431bde83 	.word	0x431bde83
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	817b      	strh	r3, [r7, #10]
 800241e:	460b      	mov	r3, r1
 8002420:	813b      	strh	r3, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002426:	f7ff fbf9 	bl	8001c1c <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	f040 80d9 	bne.w	80025ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2319      	movs	r3, #25
 8002440:	2201      	movs	r2, #1
 8002442:	496d      	ldr	r1, [pc, #436]	; (80025f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fc7f 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
 8002452:	e0cc      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Mem_Write+0x56>
 800245e:	2302      	movs	r3, #2
 8002460:	e0c5      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d007      	beq.n	8002488 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2221      	movs	r2, #33	; 0x21
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a4d      	ldr	r2, [pc, #308]	; (80025fc <HAL_I2C_Mem_Write+0x1f0>)
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ca:	88f8      	ldrh	r0, [r7, #6]
 80024cc:	893a      	ldrh	r2, [r7, #8]
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	4603      	mov	r3, r0
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fab6 	bl	8002a4c <I2C_RequestMemoryWrite>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d052      	beq.n	800258c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e081      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fd00 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d107      	bne.n	8002512 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11b      	bne.n	800258c <HAL_I2C_Mem_Write+0x180>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d017      	beq.n	800258c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1aa      	bne.n	80024ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fcec 	bl	8002f76 <I2C_WaitOnBTFFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e016      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	00100002 	.word	0x00100002
 80025fc:	ffff0000 	.word	0xffff0000

08002600 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	4608      	mov	r0, r1
 800260a:	4611      	mov	r1, r2
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	817b      	strh	r3, [r7, #10]
 8002612:	460b      	mov	r3, r1
 8002614:	813b      	strh	r3, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800261a:	f7ff faff 	bl	8001c1c <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	f040 8208 	bne.w	8002a3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2319      	movs	r3, #25
 8002634:	2201      	movs	r2, #1
 8002636:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_I2C_Mem_Read+0x224>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fb85 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
 8002646:	e1fb      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_I2C_Mem_Read+0x56>
 8002652:	2302      	movs	r3, #2
 8002654:	e1f4      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d007      	beq.n	800267c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2222      	movs	r2, #34	; 0x22
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a5b      	ldr	r2, [pc, #364]	; (8002828 <HAL_I2C_Mem_Read+0x228>)
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026be:	88f8      	ldrh	r0, [r7, #6]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fa52 	bl	8002b78 <I2C_RequestMemoryRead>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1b0      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e184      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b01      	cmp	r3, #1
 8002714:	d11b      	bne.n	800274e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e164      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b02      	cmp	r3, #2
 8002754:	d11b      	bne.n	800278e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	e144      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a4:	e138      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	f200 80f1 	bhi.w	8002992 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d123      	bne.n	8002800 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fc1b 	bl	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e139      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027fe:	e10b      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b02      	cmp	r3, #2
 8002806:	d14e      	bne.n	80028a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	2200      	movs	r2, #0
 8002810:	4906      	ldr	r1, [pc, #24]	; (800282c <HAL_I2C_Mem_Read+0x22c>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fa98 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e10e      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
 8002822:	bf00      	nop
 8002824:	00100002 	.word	0x00100002
 8002828:	ffff0000 	.word	0xffff0000
 800282c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a4:	e0b8      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	2200      	movs	r2, #0
 80028ae:	4966      	ldr	r1, [pc, #408]	; (8002a48 <HAL_I2C_Mem_Read+0x448>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa49 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0bf      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	494f      	ldr	r1, [pc, #316]	; (8002a48 <HAL_I2C_Mem_Read+0x448>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fa1b 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e091      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002990:	e042      	b.n	8002a18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fb2e 	bl	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04c      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d118      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f aec2 	bne.w	80027a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
  }
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010004 	.word	0x00010004

08002a4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f960 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9c:	d103      	bne.n	8002aa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e05f      	b.n	8002b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	492d      	ldr	r1, [pc, #180]	; (8002b74 <I2C_RequestMemoryWrite+0x128>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f998 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04c      	b.n	8002b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fa02 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d107      	bne.n	8002b0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e02b      	b.n	8002b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b18:	893b      	ldrh	r3, [r7, #8]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	e021      	b.n	8002b68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b24:	893b      	ldrh	r3, [r7, #8]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	6a39      	ldr	r1, [r7, #32]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f9dc 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d107      	bne.n	8002b5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e005      	b.n	8002b6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5e:	893b      	ldrh	r3, [r7, #8]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	00010002 	.word	0x00010002

08002b78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f8c2 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d103      	bne.n	8002be2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0aa      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	4952      	ldr	r1, [pc, #328]	; (8002d44 <I2C_RequestMemoryRead+0x1cc>)
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f8fa 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e097      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	6a39      	ldr	r1, [r7, #32]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f964 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d107      	bne.n	8002c4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e076      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	e021      	b.n	8002ca4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f93e 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d107      	bne.n	8002c96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e050      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9a:	893b      	ldrh	r3, [r7, #8]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	6a39      	ldr	r1, [r7, #32]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f923 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e035      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f82b 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d103      	bne.n	8002d10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e013      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d14:	897b      	ldrh	r3, [r7, #10]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	4906      	ldr	r1, [pc, #24]	; (8002d44 <I2C_RequestMemoryRead+0x1cc>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f863 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	e025      	b.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d021      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe ff5b 	bl	8001c1c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e023      	b.n	8002dee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10d      	bne.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	e00c      	b.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d0b6      	beq.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e04:	e051      	b.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	d123      	bne.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0204 	orr.w	r2, r3, #4
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e046      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fed9 	bl	8001c1c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e020      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10c      	bne.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e00b      	b.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d18d      	bne.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f00:	e02d      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8ce 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02d      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d021      	beq.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fe7f 	bl	8001c1c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d1ca      	bne.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f82:	e02d      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f88d 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e02d      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d021      	beq.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fe fe3e 	bl	8001c1c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e007      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d1ca      	bne.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003004:	e042      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d119      	bne.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0210 	mvn.w	r2, #16
 800301c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e029      	b.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe fde8 	bl	8001c1c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e007      	b.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d1b5      	bne.n	8003006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d11b      	bne.n	80030f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e264      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003122:	4ba3      	ldr	r3, [pc, #652]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00c      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4ba0      	ldr	r3, [pc, #640]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b9d      	ldr	r3, [pc, #628]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b99      	ldr	r3, [pc, #612]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e23f      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x74>
 800316a:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a90      	ldr	r2, [pc, #576]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a8a      	ldr	r2, [pc, #552]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a80      	ldr	r2, [pc, #512]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fd2e 	bl	8001c1c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fd2a 	bl	8001c1c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e204      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fd1a 	bl	8001c1c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fd16 	bl	8001c1c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1f0      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1c4      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4952      	ldr	r1, [pc, #328]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e03a      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCC_OscConfig+0x2b0>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fccf 	bl	8001c1c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003282:	f7fe fccb 	bl	8001c1c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1a5      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4940      	ldr	r1, [pc, #256]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_OscConfig+0x2b0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fcae 	bl	8001c1c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe fcaa 	bl	8001c1c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e184      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d030      	beq.n	8003350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCC_OscConfig+0x2b4>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fc8e 	bl	8001c1c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fc8a 	bl	8001c1c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e164      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x200>
 8003322:	e015      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x2b4>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fe fc77 	bl	8001c1c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fc73 	bl	8001c1c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e14d      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a0 	beq.w	800349e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fc39 	bl	8001c1c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e011      	b.n	80033d2 <HAL_RCC_OscConfig+0x2ce>
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470000 	.word	0x42470000
 80033b8:	42470e80 	.word	0x42470e80
 80033bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fc2c 	bl	8001c1c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e106      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x4e4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
 80033e6:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x32a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x312>
 80033fc:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	4b78      	ldr	r3, [pc, #480]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a77      	ldr	r2, [pc, #476]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x32a>
 8003416:	4b75      	ldr	r3, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a74      	ldr	r2, [pc, #464]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a71      	ldr	r2, [pc, #452]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fbf1 	bl	8001c1c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fbed 	bl	8001c1c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0c5      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x33a>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fe fbdb 	bl	8001c1c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fbd7 	bl	8001c1c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0af      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 809b 	beq.w	80035de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d05c      	beq.n	800356e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d141      	bne.n	8003540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fbab 	bl	8001c1c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fba7 	bl	8001c1c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e081      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3b01      	subs	r3, #1
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fb80 	bl	8001c1c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fb7c 	bl	8001c1c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e056      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x41c>
 800353e:	e04e      	b.n	80035de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fb69 	bl	8001c1c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fb65 	bl	8001c1c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e03f      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x44a>
 800356c:	e037      	b.n	80035de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e032      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d028      	beq.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d121      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d11a      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d111      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40007000 	.word	0x40007000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470060 	.word	0x42470060

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cc      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90c      	bls.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a52      	ldr	r2, [pc, #328]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e067      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4934      	ldr	r1, [pc, #208]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fa9a 	bl	8001c1c <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe fa96 	bl	8001c1c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d20c      	bcs.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f821 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe f9fa 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	0800791c 	.word	0x0800791c
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d8:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d00d      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	f200 80bd 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x3a>
 80037f2:	e0b7      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037f6:	60bb      	str	r3, [r7, #8]
       break;
 80037f8:	e0b7      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b61      	ldr	r3, [pc, #388]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037fc:	60bb      	str	r3, [r7, #8]
      break;
 80037fe:	e0b4      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003800:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04d      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	461a      	mov	r2, r3
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	ea02 0800 	and.w	r8, r2, r0
 800382e:	ea03 0901 	and.w	r9, r3, r1
 8003832:	4640      	mov	r0, r8
 8003834:	4649      	mov	r1, r9
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	014b      	lsls	r3, r1, #5
 8003840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003844:	0142      	lsls	r2, r0, #5
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	ebb0 0008 	subs.w	r0, r0, r8
 800384e:	eb61 0109 	sbc.w	r1, r1, r9
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	018b      	lsls	r3, r1, #6
 800385c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003860:	0182      	lsls	r2, r0, #6
 8003862:	1a12      	subs	r2, r2, r0
 8003864:	eb63 0301 	sbc.w	r3, r3, r1
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	00d9      	lsls	r1, r3, #3
 8003872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003876:	00d0      	lsls	r0, r2, #3
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	eb12 0208 	adds.w	r2, r2, r8
 8003880:	eb43 0309 	adc.w	r3, r3, r9
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0259      	lsls	r1, r3, #9
 800388e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003892:	0250      	lsls	r0, r2, #9
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f7fd f9d8 	bl	8000c58 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e04a      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	461a      	mov	r2, r3
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	ea02 0400 	and.w	r4, r2, r0
 80038ca:	ea03 0501 	and.w	r5, r3, r1
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	014b      	lsls	r3, r1, #5
 80038dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038e0:	0142      	lsls	r2, r0, #5
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	1b00      	subs	r0, r0, r4
 80038e8:	eb61 0105 	sbc.w	r1, r1, r5
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	018b      	lsls	r3, r1, #6
 80038f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038fa:	0182      	lsls	r2, r0, #6
 80038fc:	1a12      	subs	r2, r2, r0
 80038fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	00d9      	lsls	r1, r3, #3
 800390c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003910:	00d0      	lsls	r0, r2, #3
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	1912      	adds	r2, r2, r4
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	f04f 0000 	mov.w	r0, #0
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	0299      	lsls	r1, r3, #10
 8003926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800392a:	0290      	lsls	r0, r2, #10
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	461a      	mov	r2, r3
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fd f98c 	bl	8000c58 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	60bb      	str	r3, [r7, #8]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003966:	60bb      	str	r3, [r7, #8]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	68bb      	ldr	r3, [r7, #8]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	0800792c 	.word	0x0800792c

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	0800792c 	.word	0x0800792c

080039ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e03f      	b.n	8003a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd ff28 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f929 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d17c      	bne.n	8003ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit+0x2c>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e075      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Transmit+0x3e>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e06e      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	; 0x21
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fe f89f 	bl	8001c1c <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b18:	e02a      	b.n	8003b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f840 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e036      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cf      	bne.n	8003b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f810 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b090      	sub	sp, #64	; 0x40
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	e050      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d04c      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	f7fe f827 	bl	8001c1c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d241      	bcs.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2e:	623a      	str	r2, [r7, #32]
 8003c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69f9      	ldr	r1, [r7, #28]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d09f      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3740      	adds	r7, #64	; 0x40
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	b09f      	sub	sp, #124	; 0x7c
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	ea40 0301 	orr.w	r3, r0, r1
 8003ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ccc:	f021 010c 	bic.w	r1, r1, #12
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	6999      	ldr	r1, [r3, #24]
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	ea40 0301 	orr.w	r3, r0, r1
 8003cf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4bc5      	ldr	r3, [pc, #788]	; (800400c <UART_SetConfig+0x384>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d004      	beq.n	8003d06 <UART_SetConfig+0x7e>
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4bc3      	ldr	r3, [pc, #780]	; (8004010 <UART_SetConfig+0x388>)
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d06:	f7ff fe5d 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8003d0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003d0c:	e002      	b.n	8003d14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7ff fe45 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8003d12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	f040 80b6 	bne.w	8003e8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d22:	461c      	mov	r4, r3
 8003d24:	f04f 0500 	mov.w	r5, #0
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d30:	415b      	adcs	r3, r3
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d38:	1912      	adds	r2, r2, r4
 8003d3a:	eb45 0303 	adc.w	r3, r5, r3
 8003d3e:	f04f 0000 	mov.w	r0, #0
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	00d9      	lsls	r1, r3, #3
 8003d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d4c:	00d0      	lsls	r0, r2, #3
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	1911      	adds	r1, r2, r4
 8003d54:	6639      	str	r1, [r7, #96]	; 0x60
 8003d56:	416b      	adcs	r3, r5
 8003d58:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d74:	f7fc ff70 	bl	8000c58 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4ba5      	ldr	r3, [pc, #660]	; (8004014 <UART_SetConfig+0x38c>)
 8003d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	011e      	lsls	r6, r3, #4
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	461c      	mov	r4, r3
 8003d8a:	f04f 0500 	mov.w	r5, #0
 8003d8e:	4622      	mov	r2, r4
 8003d90:	462b      	mov	r3, r5
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6339      	str	r1, [r7, #48]	; 0x30
 8003d96:	415b      	adcs	r3, r3
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d9e:	1912      	adds	r2, r2, r4
 8003da0:	eb45 0303 	adc.w	r3, r5, r3
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	00d9      	lsls	r1, r3, #3
 8003dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db2:	00d0      	lsls	r0, r2, #3
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	1911      	adds	r1, r2, r4
 8003dba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dbc:	416b      	adcs	r3, r5
 8003dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dda:	f7fc ff3d 	bl	8000c58 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b8c      	ldr	r3, [pc, #560]	; (8004014 <UART_SetConfig+0x38c>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a87      	ldr	r2, [pc, #540]	; (8004014 <UART_SetConfig+0x38c>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e04:	441e      	add	r6, r3
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	1894      	adds	r4, r2, r2
 8003e14:	623c      	str	r4, [r7, #32]
 8003e16:	415b      	adcs	r3, r3
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1e:	1812      	adds	r2, r2, r0
 8003e20:	eb41 0303 	adc.w	r3, r1, r3
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	f04f 0500 	mov.w	r5, #0
 8003e2c:	00dd      	lsls	r5, r3, #3
 8003e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e32:	00d4      	lsls	r4, r2, #3
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	1814      	adds	r4, r2, r0
 8003e3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	61b9      	str	r1, [r7, #24]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e5a:	f7fc fefd 	bl	8000c58 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <UART_SetConfig+0x38c>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a67      	ldr	r2, [pc, #412]	; (8004014 <UART_SetConfig+0x38c>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 0207 	and.w	r2, r3, #7
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4432      	add	r2, r6
 8003e88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e8a:	e0b9      	b.n	8004000 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8e:	461c      	mov	r4, r3
 8003e90:	f04f 0500 	mov.w	r5, #0
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	6139      	str	r1, [r7, #16]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ea4:	1912      	adds	r2, r2, r4
 8003ea6:	eb45 0303 	adc.w	r3, r5, r3
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	00d9      	lsls	r1, r3, #3
 8003eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb8:	00d0      	lsls	r0, r2, #3
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	eb12 0804 	adds.w	r8, r2, r4
 8003ec2:	eb43 0905 	adc.w	r9, r3, r5
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	008b      	lsls	r3, r1, #2
 8003eda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ede:	0082      	lsls	r2, r0, #2
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f7fc feb8 	bl	8000c58 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b49      	ldr	r3, [pc, #292]	; (8004014 <UART_SetConfig+0x38c>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	011e      	lsls	r6, r3, #4
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	1894      	adds	r4, r2, r2
 8003f04:	60bc      	str	r4, [r7, #8]
 8003f06:	415b      	adcs	r3, r3
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0e:	1812      	adds	r2, r2, r0
 8003f10:	eb41 0303 	adc.w	r3, r1, r3
 8003f14:	f04f 0400 	mov.w	r4, #0
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	00dd      	lsls	r5, r3, #3
 8003f1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f22:	00d4      	lsls	r4, r2, #3
 8003f24:	4622      	mov	r2, r4
 8003f26:	462b      	mov	r3, r5
 8003f28:	1814      	adds	r4, r2, r0
 8003f2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f48:	0082      	lsls	r2, r0, #2
 8003f4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f4e:	f7fc fe83 	bl	8000c58 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <UART_SetConfig+0x38c>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	; 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	3332      	adds	r3, #50	; 0x32
 8003f6a:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <UART_SetConfig+0x38c>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	441e      	add	r6, r3
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	1894      	adds	r4, r2, r2
 8003f86:	603c      	str	r4, [r7, #0]
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f90:	1812      	adds	r2, r2, r0
 8003f92:	eb41 0303 	adc.w	r3, r1, r3
 8003f96:	f04f 0400 	mov.w	r4, #0
 8003f9a:	f04f 0500 	mov.w	r5, #0
 8003f9e:	00dd      	lsls	r5, r3, #3
 8003fa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fa4:	00d4      	lsls	r4, r2, #3
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	eb12 0a00 	adds.w	sl, r2, r0
 8003fae:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fca:	0082      	lsls	r2, r0, #2
 8003fcc:	4650      	mov	r0, sl
 8003fce:	4659      	mov	r1, fp
 8003fd0:	f7fc fe42 	bl	8000c58 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <UART_SetConfig+0x38c>)
 8003fda:	fba3 1302 	umull	r1, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2164      	movs	r1, #100	; 0x64
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <UART_SetConfig+0x38c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4432      	add	r2, r6
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	377c      	adds	r7, #124	; 0x7c
 8004004:	46bd      	mov	sp, r7
 8004006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400a:	bf00      	nop
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f003 fc1e 	bl	8007878 <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	080080ec 	.word	0x080080ec
 8004060:	080080ec 	.word	0x080080ec
 8004064:	080080ec 	.word	0x080080ec
 8004068:	080080f0 	.word	0x080080f0

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <__cvt>:
 800407c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	ec55 4b10 	vmov	r4, r5, d0
 8004084:	2d00      	cmp	r5, #0
 8004086:	460e      	mov	r6, r1
 8004088:	4619      	mov	r1, r3
 800408a:	462b      	mov	r3, r5
 800408c:	bfbb      	ittet	lt
 800408e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004092:	461d      	movlt	r5, r3
 8004094:	2300      	movge	r3, #0
 8004096:	232d      	movlt	r3, #45	; 0x2d
 8004098:	700b      	strb	r3, [r1, #0]
 800409a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800409c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040a0:	4691      	mov	r9, r2
 80040a2:	f023 0820 	bic.w	r8, r3, #32
 80040a6:	bfbc      	itt	lt
 80040a8:	4622      	movlt	r2, r4
 80040aa:	4614      	movlt	r4, r2
 80040ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040b0:	d005      	beq.n	80040be <__cvt+0x42>
 80040b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040b6:	d100      	bne.n	80040ba <__cvt+0x3e>
 80040b8:	3601      	adds	r6, #1
 80040ba:	2102      	movs	r1, #2
 80040bc:	e000      	b.n	80040c0 <__cvt+0x44>
 80040be:	2103      	movs	r1, #3
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	ab02      	add	r3, sp, #8
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	ec45 4b10 	vmov	d0, r4, r5
 80040cc:	4653      	mov	r3, sl
 80040ce:	4632      	mov	r2, r6
 80040d0:	f000 fcea 	bl	8004aa8 <_dtoa_r>
 80040d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040d8:	4607      	mov	r7, r0
 80040da:	d102      	bne.n	80040e2 <__cvt+0x66>
 80040dc:	f019 0f01 	tst.w	r9, #1
 80040e0:	d022      	beq.n	8004128 <__cvt+0xac>
 80040e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040e6:	eb07 0906 	add.w	r9, r7, r6
 80040ea:	d110      	bne.n	800410e <__cvt+0x92>
 80040ec:	783b      	ldrb	r3, [r7, #0]
 80040ee:	2b30      	cmp	r3, #48	; 0x30
 80040f0:	d10a      	bne.n	8004108 <__cvt+0x8c>
 80040f2:	2200      	movs	r2, #0
 80040f4:	2300      	movs	r3, #0
 80040f6:	4620      	mov	r0, r4
 80040f8:	4629      	mov	r1, r5
 80040fa:	f7fc fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80040fe:	b918      	cbnz	r0, 8004108 <__cvt+0x8c>
 8004100:	f1c6 0601 	rsb	r6, r6, #1
 8004104:	f8ca 6000 	str.w	r6, [sl]
 8004108:	f8da 3000 	ldr.w	r3, [sl]
 800410c:	4499      	add	r9, r3
 800410e:	2200      	movs	r2, #0
 8004110:	2300      	movs	r3, #0
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800411a:	b108      	cbz	r0, 8004120 <__cvt+0xa4>
 800411c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004120:	2230      	movs	r2, #48	; 0x30
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	454b      	cmp	r3, r9
 8004126:	d307      	bcc.n	8004138 <__cvt+0xbc>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800412c:	1bdb      	subs	r3, r3, r7
 800412e:	4638      	mov	r0, r7
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	b004      	add	sp, #16
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004138:	1c59      	adds	r1, r3, #1
 800413a:	9103      	str	r1, [sp, #12]
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e7f0      	b.n	8004122 <__cvt+0xa6>

08004140 <__exponent>:
 8004140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004142:	4603      	mov	r3, r0
 8004144:	2900      	cmp	r1, #0
 8004146:	bfb8      	it	lt
 8004148:	4249      	neglt	r1, r1
 800414a:	f803 2b02 	strb.w	r2, [r3], #2
 800414e:	bfb4      	ite	lt
 8004150:	222d      	movlt	r2, #45	; 0x2d
 8004152:	222b      	movge	r2, #43	; 0x2b
 8004154:	2909      	cmp	r1, #9
 8004156:	7042      	strb	r2, [r0, #1]
 8004158:	dd2a      	ble.n	80041b0 <__exponent+0x70>
 800415a:	f10d 0407 	add.w	r4, sp, #7
 800415e:	46a4      	mov	ip, r4
 8004160:	270a      	movs	r7, #10
 8004162:	46a6      	mov	lr, r4
 8004164:	460a      	mov	r2, r1
 8004166:	fb91 f6f7 	sdiv	r6, r1, r7
 800416a:	fb07 1516 	mls	r5, r7, r6, r1
 800416e:	3530      	adds	r5, #48	; 0x30
 8004170:	2a63      	cmp	r2, #99	; 0x63
 8004172:	f104 34ff 	add.w	r4, r4, #4294967295
 8004176:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800417a:	4631      	mov	r1, r6
 800417c:	dcf1      	bgt.n	8004162 <__exponent+0x22>
 800417e:	3130      	adds	r1, #48	; 0x30
 8004180:	f1ae 0502 	sub.w	r5, lr, #2
 8004184:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004188:	1c44      	adds	r4, r0, #1
 800418a:	4629      	mov	r1, r5
 800418c:	4561      	cmp	r1, ip
 800418e:	d30a      	bcc.n	80041a6 <__exponent+0x66>
 8004190:	f10d 0209 	add.w	r2, sp, #9
 8004194:	eba2 020e 	sub.w	r2, r2, lr
 8004198:	4565      	cmp	r5, ip
 800419a:	bf88      	it	hi
 800419c:	2200      	movhi	r2, #0
 800419e:	4413      	add	r3, r2
 80041a0:	1a18      	subs	r0, r3, r0
 80041a2:	b003      	add	sp, #12
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041ae:	e7ed      	b.n	800418c <__exponent+0x4c>
 80041b0:	2330      	movs	r3, #48	; 0x30
 80041b2:	3130      	adds	r1, #48	; 0x30
 80041b4:	7083      	strb	r3, [r0, #2]
 80041b6:	70c1      	strb	r1, [r0, #3]
 80041b8:	1d03      	adds	r3, r0, #4
 80041ba:	e7f1      	b.n	80041a0 <__exponent+0x60>

080041bc <_printf_float>:
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	ed2d 8b02 	vpush	{d8}
 80041c4:	b08d      	sub	sp, #52	; 0x34
 80041c6:	460c      	mov	r4, r1
 80041c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041cc:	4616      	mov	r6, r2
 80041ce:	461f      	mov	r7, r3
 80041d0:	4605      	mov	r5, r0
 80041d2:	f001 fa55 	bl	8005680 <_localeconv_r>
 80041d6:	f8d0 a000 	ldr.w	sl, [r0]
 80041da:	4650      	mov	r0, sl
 80041dc:	f7fc f800 	bl	80001e0 <strlen>
 80041e0:	2300      	movs	r3, #0
 80041e2:	930a      	str	r3, [sp, #40]	; 0x28
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	f8d8 3000 	ldr.w	r3, [r8]
 80041ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041f0:	3307      	adds	r3, #7
 80041f2:	f023 0307 	bic.w	r3, r3, #7
 80041f6:	f103 0208 	add.w	r2, r3, #8
 80041fa:	f8c8 2000 	str.w	r2, [r8]
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004206:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800420a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800420e:	9307      	str	r3, [sp, #28]
 8004210:	f8cd 8018 	str.w	r8, [sp, #24]
 8004214:	ee08 0a10 	vmov	s16, r0
 8004218:	4b9f      	ldr	r3, [pc, #636]	; (8004498 <_printf_float+0x2dc>)
 800421a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	f7fc fc8b 	bl	8000b3c <__aeabi_dcmpun>
 8004226:	bb88      	cbnz	r0, 800428c <_printf_float+0xd0>
 8004228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800422c:	4b9a      	ldr	r3, [pc, #616]	; (8004498 <_printf_float+0x2dc>)
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	f7fc fc65 	bl	8000b00 <__aeabi_dcmple>
 8004236:	bb48      	cbnz	r0, 800428c <_printf_float+0xd0>
 8004238:	2200      	movs	r2, #0
 800423a:	2300      	movs	r3, #0
 800423c:	4640      	mov	r0, r8
 800423e:	4649      	mov	r1, r9
 8004240:	f7fc fc54 	bl	8000aec <__aeabi_dcmplt>
 8004244:	b110      	cbz	r0, 800424c <_printf_float+0x90>
 8004246:	232d      	movs	r3, #45	; 0x2d
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424c:	4b93      	ldr	r3, [pc, #588]	; (800449c <_printf_float+0x2e0>)
 800424e:	4894      	ldr	r0, [pc, #592]	; (80044a0 <_printf_float+0x2e4>)
 8004250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004254:	bf94      	ite	ls
 8004256:	4698      	movls	r8, r3
 8004258:	4680      	movhi	r8, r0
 800425a:	2303      	movs	r3, #3
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	9b05      	ldr	r3, [sp, #20]
 8004260:	f023 0204 	bic.w	r2, r3, #4
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	f04f 0900 	mov.w	r9, #0
 800426a:	9700      	str	r7, [sp, #0]
 800426c:	4633      	mov	r3, r6
 800426e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004270:	4621      	mov	r1, r4
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f9d8 	bl	8004628 <_printf_common>
 8004278:	3001      	adds	r0, #1
 800427a:	f040 8090 	bne.w	800439e <_printf_float+0x1e2>
 800427e:	f04f 30ff 	mov.w	r0, #4294967295
 8004282:	b00d      	add	sp, #52	; 0x34
 8004284:	ecbd 8b02 	vpop	{d8}
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	4640      	mov	r0, r8
 8004292:	4649      	mov	r1, r9
 8004294:	f7fc fc52 	bl	8000b3c <__aeabi_dcmpun>
 8004298:	b140      	cbz	r0, 80042ac <_printf_float+0xf0>
 800429a:	464b      	mov	r3, r9
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfbc      	itt	lt
 80042a0:	232d      	movlt	r3, #45	; 0x2d
 80042a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042a6:	487f      	ldr	r0, [pc, #508]	; (80044a4 <_printf_float+0x2e8>)
 80042a8:	4b7f      	ldr	r3, [pc, #508]	; (80044a8 <_printf_float+0x2ec>)
 80042aa:	e7d1      	b.n	8004250 <_printf_float+0x94>
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042b2:	9206      	str	r2, [sp, #24]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	d13f      	bne.n	8004338 <_printf_float+0x17c>
 80042b8:	2306      	movs	r3, #6
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	9b05      	ldr	r3, [sp, #20]
 80042be:	6861      	ldr	r1, [r4, #4]
 80042c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042c4:	2300      	movs	r3, #0
 80042c6:	9303      	str	r3, [sp, #12]
 80042c8:	ab0a      	add	r3, sp, #40	; 0x28
 80042ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042ce:	ab09      	add	r3, sp, #36	; 0x24
 80042d0:	ec49 8b10 	vmov	d0, r8, r9
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042dc:	4628      	mov	r0, r5
 80042de:	f7ff fecd 	bl	800407c <__cvt>
 80042e2:	9b06      	ldr	r3, [sp, #24]
 80042e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042e6:	2b47      	cmp	r3, #71	; 0x47
 80042e8:	4680      	mov	r8, r0
 80042ea:	d108      	bne.n	80042fe <_printf_float+0x142>
 80042ec:	1cc8      	adds	r0, r1, #3
 80042ee:	db02      	blt.n	80042f6 <_printf_float+0x13a>
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	4299      	cmp	r1, r3
 80042f4:	dd41      	ble.n	800437a <_printf_float+0x1be>
 80042f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80042fa:	fa5f fb8b 	uxtb.w	fp, fp
 80042fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004302:	d820      	bhi.n	8004346 <_printf_float+0x18a>
 8004304:	3901      	subs	r1, #1
 8004306:	465a      	mov	r2, fp
 8004308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800430c:	9109      	str	r1, [sp, #36]	; 0x24
 800430e:	f7ff ff17 	bl	8004140 <__exponent>
 8004312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004314:	1813      	adds	r3, r2, r0
 8004316:	2a01      	cmp	r2, #1
 8004318:	4681      	mov	r9, r0
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	dc02      	bgt.n	8004324 <_printf_float+0x168>
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	07d2      	lsls	r2, r2, #31
 8004322:	d501      	bpl.n	8004328 <_printf_float+0x16c>
 8004324:	3301      	adds	r3, #1
 8004326:	6123      	str	r3, [r4, #16]
 8004328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800432c:	2b00      	cmp	r3, #0
 800432e:	d09c      	beq.n	800426a <_printf_float+0xae>
 8004330:	232d      	movs	r3, #45	; 0x2d
 8004332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004336:	e798      	b.n	800426a <_printf_float+0xae>
 8004338:	9a06      	ldr	r2, [sp, #24]
 800433a:	2a47      	cmp	r2, #71	; 0x47
 800433c:	d1be      	bne.n	80042bc <_printf_float+0x100>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1bc      	bne.n	80042bc <_printf_float+0x100>
 8004342:	2301      	movs	r3, #1
 8004344:	e7b9      	b.n	80042ba <_printf_float+0xfe>
 8004346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800434a:	d118      	bne.n	800437e <_printf_float+0x1c2>
 800434c:	2900      	cmp	r1, #0
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	dd0b      	ble.n	800436a <_printf_float+0x1ae>
 8004352:	6121      	str	r1, [r4, #16]
 8004354:	b913      	cbnz	r3, 800435c <_printf_float+0x1a0>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	07d0      	lsls	r0, r2, #31
 800435a:	d502      	bpl.n	8004362 <_printf_float+0x1a6>
 800435c:	3301      	adds	r3, #1
 800435e:	440b      	add	r3, r1
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	65a1      	str	r1, [r4, #88]	; 0x58
 8004364:	f04f 0900 	mov.w	r9, #0
 8004368:	e7de      	b.n	8004328 <_printf_float+0x16c>
 800436a:	b913      	cbnz	r3, 8004372 <_printf_float+0x1b6>
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	07d2      	lsls	r2, r2, #31
 8004370:	d501      	bpl.n	8004376 <_printf_float+0x1ba>
 8004372:	3302      	adds	r3, #2
 8004374:	e7f4      	b.n	8004360 <_printf_float+0x1a4>
 8004376:	2301      	movs	r3, #1
 8004378:	e7f2      	b.n	8004360 <_printf_float+0x1a4>
 800437a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800437e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004380:	4299      	cmp	r1, r3
 8004382:	db05      	blt.n	8004390 <_printf_float+0x1d4>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	6121      	str	r1, [r4, #16]
 8004388:	07d8      	lsls	r0, r3, #31
 800438a:	d5ea      	bpl.n	8004362 <_printf_float+0x1a6>
 800438c:	1c4b      	adds	r3, r1, #1
 800438e:	e7e7      	b.n	8004360 <_printf_float+0x1a4>
 8004390:	2900      	cmp	r1, #0
 8004392:	bfd4      	ite	le
 8004394:	f1c1 0202 	rsble	r2, r1, #2
 8004398:	2201      	movgt	r2, #1
 800439a:	4413      	add	r3, r2
 800439c:	e7e0      	b.n	8004360 <_printf_float+0x1a4>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	055a      	lsls	r2, r3, #21
 80043a2:	d407      	bmi.n	80043b4 <_printf_float+0x1f8>
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	4642      	mov	r2, r8
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	d12c      	bne.n	800440c <_printf_float+0x250>
 80043b2:	e764      	b.n	800427e <_printf_float+0xc2>
 80043b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043b8:	f240 80e0 	bls.w	800457c <_printf_float+0x3c0>
 80043bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f7fc fb88 	bl	8000ad8 <__aeabi_dcmpeq>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d034      	beq.n	8004436 <_printf_float+0x27a>
 80043cc:	4a37      	ldr	r2, [pc, #220]	; (80044ac <_printf_float+0x2f0>)
 80043ce:	2301      	movs	r3, #1
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f af51 	beq.w	800427e <_printf_float+0xc2>
 80043dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e0:	429a      	cmp	r2, r3
 80043e2:	db02      	blt.n	80043ea <_printf_float+0x22e>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	07d8      	lsls	r0, r3, #31
 80043e8:	d510      	bpl.n	800440c <_printf_float+0x250>
 80043ea:	ee18 3a10 	vmov	r3, s16
 80043ee:	4652      	mov	r2, sl
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f af41 	beq.w	800427e <_printf_float+0xc2>
 80043fc:	f04f 0800 	mov.w	r8, #0
 8004400:	f104 091a 	add.w	r9, r4, #26
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	3b01      	subs	r3, #1
 8004408:	4543      	cmp	r3, r8
 800440a:	dc09      	bgt.n	8004420 <_printf_float+0x264>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	079b      	lsls	r3, r3, #30
 8004410:	f100 8105 	bmi.w	800461e <_printf_float+0x462>
 8004414:	68e0      	ldr	r0, [r4, #12]
 8004416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004418:	4298      	cmp	r0, r3
 800441a:	bfb8      	it	lt
 800441c:	4618      	movlt	r0, r3
 800441e:	e730      	b.n	8004282 <_printf_float+0xc6>
 8004420:	2301      	movs	r3, #1
 8004422:	464a      	mov	r2, r9
 8004424:	4631      	mov	r1, r6
 8004426:	4628      	mov	r0, r5
 8004428:	47b8      	blx	r7
 800442a:	3001      	adds	r0, #1
 800442c:	f43f af27 	beq.w	800427e <_printf_float+0xc2>
 8004430:	f108 0801 	add.w	r8, r8, #1
 8004434:	e7e6      	b.n	8004404 <_printf_float+0x248>
 8004436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc39      	bgt.n	80044b0 <_printf_float+0x2f4>
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <_printf_float+0x2f0>)
 800443e:	2301      	movs	r3, #1
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f af19 	beq.w	800427e <_printf_float+0xc2>
 800444c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004450:	4313      	orrs	r3, r2
 8004452:	d102      	bne.n	800445a <_printf_float+0x29e>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07d9      	lsls	r1, r3, #31
 8004458:	d5d8      	bpl.n	800440c <_printf_float+0x250>
 800445a:	ee18 3a10 	vmov	r3, s16
 800445e:	4652      	mov	r2, sl
 8004460:	4631      	mov	r1, r6
 8004462:	4628      	mov	r0, r5
 8004464:	47b8      	blx	r7
 8004466:	3001      	adds	r0, #1
 8004468:	f43f af09 	beq.w	800427e <_printf_float+0xc2>
 800446c:	f04f 0900 	mov.w	r9, #0
 8004470:	f104 0a1a 	add.w	sl, r4, #26
 8004474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004476:	425b      	negs	r3, r3
 8004478:	454b      	cmp	r3, r9
 800447a:	dc01      	bgt.n	8004480 <_printf_float+0x2c4>
 800447c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800447e:	e792      	b.n	80043a6 <_printf_float+0x1ea>
 8004480:	2301      	movs	r3, #1
 8004482:	4652      	mov	r2, sl
 8004484:	4631      	mov	r1, r6
 8004486:	4628      	mov	r0, r5
 8004488:	47b8      	blx	r7
 800448a:	3001      	adds	r0, #1
 800448c:	f43f aef7 	beq.w	800427e <_printf_float+0xc2>
 8004490:	f109 0901 	add.w	r9, r9, #1
 8004494:	e7ee      	b.n	8004474 <_printf_float+0x2b8>
 8004496:	bf00      	nop
 8004498:	7fefffff 	.word	0x7fefffff
 800449c:	08007938 	.word	0x08007938
 80044a0:	0800793c 	.word	0x0800793c
 80044a4:	08007944 	.word	0x08007944
 80044a8:	08007940 	.word	0x08007940
 80044ac:	08007948 	.word	0x08007948
 80044b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044b4:	429a      	cmp	r2, r3
 80044b6:	bfa8      	it	ge
 80044b8:	461a      	movge	r2, r3
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	4691      	mov	r9, r2
 80044be:	dc37      	bgt.n	8004530 <_printf_float+0x374>
 80044c0:	f04f 0b00 	mov.w	fp, #0
 80044c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044c8:	f104 021a 	add.w	r2, r4, #26
 80044cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ce:	9305      	str	r3, [sp, #20]
 80044d0:	eba3 0309 	sub.w	r3, r3, r9
 80044d4:	455b      	cmp	r3, fp
 80044d6:	dc33      	bgt.n	8004540 <_printf_float+0x384>
 80044d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044dc:	429a      	cmp	r2, r3
 80044de:	db3b      	blt.n	8004558 <_printf_float+0x39c>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	07da      	lsls	r2, r3, #31
 80044e4:	d438      	bmi.n	8004558 <_printf_float+0x39c>
 80044e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e8:	9b05      	ldr	r3, [sp, #20]
 80044ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	eba2 0901 	sub.w	r9, r2, r1
 80044f2:	4599      	cmp	r9, r3
 80044f4:	bfa8      	it	ge
 80044f6:	4699      	movge	r9, r3
 80044f8:	f1b9 0f00 	cmp.w	r9, #0
 80044fc:	dc35      	bgt.n	800456a <_printf_float+0x3ae>
 80044fe:	f04f 0800 	mov.w	r8, #0
 8004502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004506:	f104 0a1a 	add.w	sl, r4, #26
 800450a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	eba3 0309 	sub.w	r3, r3, r9
 8004514:	4543      	cmp	r3, r8
 8004516:	f77f af79 	ble.w	800440c <_printf_float+0x250>
 800451a:	2301      	movs	r3, #1
 800451c:	4652      	mov	r2, sl
 800451e:	4631      	mov	r1, r6
 8004520:	4628      	mov	r0, r5
 8004522:	47b8      	blx	r7
 8004524:	3001      	adds	r0, #1
 8004526:	f43f aeaa 	beq.w	800427e <_printf_float+0xc2>
 800452a:	f108 0801 	add.w	r8, r8, #1
 800452e:	e7ec      	b.n	800450a <_printf_float+0x34e>
 8004530:	4613      	mov	r3, r2
 8004532:	4631      	mov	r1, r6
 8004534:	4642      	mov	r2, r8
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	d1c0      	bne.n	80044c0 <_printf_float+0x304>
 800453e:	e69e      	b.n	800427e <_printf_float+0xc2>
 8004540:	2301      	movs	r3, #1
 8004542:	4631      	mov	r1, r6
 8004544:	4628      	mov	r0, r5
 8004546:	9205      	str	r2, [sp, #20]
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	f43f ae97 	beq.w	800427e <_printf_float+0xc2>
 8004550:	9a05      	ldr	r2, [sp, #20]
 8004552:	f10b 0b01 	add.w	fp, fp, #1
 8004556:	e7b9      	b.n	80044cc <_printf_float+0x310>
 8004558:	ee18 3a10 	vmov	r3, s16
 800455c:	4652      	mov	r2, sl
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	d1be      	bne.n	80044e6 <_printf_float+0x32a>
 8004568:	e689      	b.n	800427e <_printf_float+0xc2>
 800456a:	9a05      	ldr	r2, [sp, #20]
 800456c:	464b      	mov	r3, r9
 800456e:	4442      	add	r2, r8
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d1c1      	bne.n	80044fe <_printf_float+0x342>
 800457a:	e680      	b.n	800427e <_printf_float+0xc2>
 800457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457e:	2a01      	cmp	r2, #1
 8004580:	dc01      	bgt.n	8004586 <_printf_float+0x3ca>
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d538      	bpl.n	80045f8 <_printf_float+0x43c>
 8004586:	2301      	movs	r3, #1
 8004588:	4642      	mov	r2, r8
 800458a:	4631      	mov	r1, r6
 800458c:	4628      	mov	r0, r5
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	f43f ae74 	beq.w	800427e <_printf_float+0xc2>
 8004596:	ee18 3a10 	vmov	r3, s16
 800459a:	4652      	mov	r2, sl
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	47b8      	blx	r7
 80045a2:	3001      	adds	r0, #1
 80045a4:	f43f ae6b 	beq.w	800427e <_printf_float+0xc2>
 80045a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045ac:	2200      	movs	r2, #0
 80045ae:	2300      	movs	r3, #0
 80045b0:	f7fc fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80045b4:	b9d8      	cbnz	r0, 80045ee <_printf_float+0x432>
 80045b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b8:	f108 0201 	add.w	r2, r8, #1
 80045bc:	3b01      	subs	r3, #1
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d10e      	bne.n	80045e6 <_printf_float+0x42a>
 80045c8:	e659      	b.n	800427e <_printf_float+0xc2>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	f43f ae52 	beq.w	800427e <_printf_float+0xc2>
 80045da:	f108 0801 	add.w	r8, r8, #1
 80045de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	4543      	cmp	r3, r8
 80045e4:	dcf1      	bgt.n	80045ca <_printf_float+0x40e>
 80045e6:	464b      	mov	r3, r9
 80045e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045ec:	e6dc      	b.n	80043a8 <_printf_float+0x1ec>
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f104 0a1a 	add.w	sl, r4, #26
 80045f6:	e7f2      	b.n	80045de <_printf_float+0x422>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4642      	mov	r2, r8
 80045fc:	e7df      	b.n	80045be <_printf_float+0x402>
 80045fe:	2301      	movs	r3, #1
 8004600:	464a      	mov	r2, r9
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae38 	beq.w	800427e <_printf_float+0xc2>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	4543      	cmp	r3, r8
 800461a:	dcf0      	bgt.n	80045fe <_printf_float+0x442>
 800461c:	e6fa      	b.n	8004414 <_printf_float+0x258>
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	f104 0919 	add.w	r9, r4, #25
 8004626:	e7f4      	b.n	8004612 <_printf_float+0x456>

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4699      	mov	r9, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004638:	4293      	cmp	r3, r2
 800463a:	bfb8      	it	lt
 800463c:	4613      	movlt	r3, r2
 800463e:	6033      	str	r3, [r6, #0]
 8004640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004644:	4607      	mov	r7, r0
 8004646:	460c      	mov	r4, r1
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc26      	bgt.n	80046be <_printf_common+0x96>
 8004670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d42b      	bmi.n	80046d8 <_printf_common+0xb0>
 8004680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d01e      	beq.n	80046cc <_printf_common+0xa4>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	68e5      	ldr	r5, [r4, #12]
 8004692:	6832      	ldr	r2, [r6, #0]
 8004694:	f003 0306 	and.w	r3, r3, #6
 8004698:	2b04      	cmp	r3, #4
 800469a:	bf08      	it	eq
 800469c:	1aad      	subeq	r5, r5, r2
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	bf0c      	ite	eq
 80046a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a8:	2500      	movne	r5, #0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bfc4      	itt	gt
 80046ae:	1a9b      	subgt	r3, r3, r2
 80046b0:	18ed      	addgt	r5, r5, r3
 80046b2:	2600      	movs	r6, #0
 80046b4:	341a      	adds	r4, #26
 80046b6:	42b5      	cmp	r5, r6
 80046b8:	d11a      	bne.n	80046f0 <_printf_common+0xc8>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e008      	b.n	80046d0 <_printf_common+0xa8>
 80046be:	2301      	movs	r3, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	4649      	mov	r1, r9
 80046c4:	4638      	mov	r0, r7
 80046c6:	47c0      	blx	r8
 80046c8:	3001      	adds	r0, #1
 80046ca:	d103      	bne.n	80046d4 <_printf_common+0xac>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d4:	3501      	adds	r5, #1
 80046d6:	e7c6      	b.n	8004666 <_printf_common+0x3e>
 80046d8:	18e1      	adds	r1, r4, r3
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	2030      	movs	r0, #48	; 0x30
 80046de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046e2:	4422      	add	r2, r4
 80046e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ec:	3302      	adds	r3, #2
 80046ee:	e7c7      	b.n	8004680 <_printf_common+0x58>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4622      	mov	r2, r4
 80046f4:	4649      	mov	r1, r9
 80046f6:	4638      	mov	r0, r7
 80046f8:	47c0      	blx	r8
 80046fa:	3001      	adds	r0, #1
 80046fc:	d0e6      	beq.n	80046cc <_printf_common+0xa4>
 80046fe:	3601      	adds	r6, #1
 8004700:	e7d9      	b.n	80046b6 <_printf_common+0x8e>
	...

08004704 <_printf_i>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	460c      	mov	r4, r1
 800470a:	4691      	mov	r9, r2
 800470c:	7e27      	ldrb	r7, [r4, #24]
 800470e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004710:	2f78      	cmp	r7, #120	; 0x78
 8004712:	4680      	mov	r8, r0
 8004714:	469a      	mov	sl, r3
 8004716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800471a:	d807      	bhi.n	800472c <_printf_i+0x28>
 800471c:	2f62      	cmp	r7, #98	; 0x62
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x32>
 8004720:	2f00      	cmp	r7, #0
 8004722:	f000 80d8 	beq.w	80048d6 <_printf_i+0x1d2>
 8004726:	2f58      	cmp	r7, #88	; 0x58
 8004728:	f000 80a3 	beq.w	8004872 <_printf_i+0x16e>
 800472c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004734:	e03a      	b.n	80047ac <_printf_i+0xa8>
 8004736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800473a:	2b15      	cmp	r3, #21
 800473c:	d8f6      	bhi.n	800472c <_printf_i+0x28>
 800473e:	a001      	add	r0, pc, #4	; (adr r0, 8004744 <_printf_i+0x40>)
 8004740:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047b1 	.word	0x080047b1
 800474c:	0800472d 	.word	0x0800472d
 8004750:	0800472d 	.word	0x0800472d
 8004754:	0800472d 	.word	0x0800472d
 8004758:	0800472d 	.word	0x0800472d
 800475c:	080047b1 	.word	0x080047b1
 8004760:	0800472d 	.word	0x0800472d
 8004764:	0800472d 	.word	0x0800472d
 8004768:	0800472d 	.word	0x0800472d
 800476c:	0800472d 	.word	0x0800472d
 8004770:	080048bd 	.word	0x080048bd
 8004774:	080047e1 	.word	0x080047e1
 8004778:	0800489f 	.word	0x0800489f
 800477c:	0800472d 	.word	0x0800472d
 8004780:	0800472d 	.word	0x0800472d
 8004784:	080048df 	.word	0x080048df
 8004788:	0800472d 	.word	0x0800472d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800472d 	.word	0x0800472d
 8004794:	0800472d 	.word	0x0800472d
 8004798:	080048a7 	.word	0x080048a7
 800479c:	680b      	ldr	r3, [r1, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	600a      	str	r2, [r1, #0]
 80047a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0a3      	b.n	80048f8 <_printf_i+0x1f4>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	6808      	ldr	r0, [r1, #0]
 80047b4:	062e      	lsls	r6, r5, #24
 80047b6:	f100 0304 	add.w	r3, r0, #4
 80047ba:	d50a      	bpl.n	80047d2 <_printf_i+0xce>
 80047bc:	6805      	ldr	r5, [r0, #0]
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	da03      	bge.n	80047cc <_printf_i+0xc8>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	426d      	negs	r5, r5
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	485e      	ldr	r0, [pc, #376]	; (8004948 <_printf_i+0x244>)
 80047ce:	230a      	movs	r3, #10
 80047d0:	e019      	b.n	8004806 <_printf_i+0x102>
 80047d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047d6:	6805      	ldr	r5, [r0, #0]
 80047d8:	600b      	str	r3, [r1, #0]
 80047da:	bf18      	it	ne
 80047dc:	b22d      	sxthne	r5, r5
 80047de:	e7ef      	b.n	80047c0 <_printf_i+0xbc>
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	6825      	ldr	r5, [r4, #0]
 80047e4:	1d18      	adds	r0, r3, #4
 80047e6:	6008      	str	r0, [r1, #0]
 80047e8:	0628      	lsls	r0, r5, #24
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0xec>
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0xf2>
 80047f0:	0669      	lsls	r1, r5, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0xe8>
 80047f4:	881d      	ldrh	r5, [r3, #0]
 80047f6:	4854      	ldr	r0, [pc, #336]	; (8004948 <_printf_i+0x244>)
 80047f8:	2f6f      	cmp	r7, #111	; 0x6f
 80047fa:	bf0c      	ite	eq
 80047fc:	2308      	moveq	r3, #8
 80047fe:	230a      	movne	r3, #10
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004806:	6866      	ldr	r6, [r4, #4]
 8004808:	60a6      	str	r6, [r4, #8]
 800480a:	2e00      	cmp	r6, #0
 800480c:	bfa2      	ittt	ge
 800480e:	6821      	ldrge	r1, [r4, #0]
 8004810:	f021 0104 	bicge.w	r1, r1, #4
 8004814:	6021      	strge	r1, [r4, #0]
 8004816:	b90d      	cbnz	r5, 800481c <_printf_i+0x118>
 8004818:	2e00      	cmp	r6, #0
 800481a:	d04d      	beq.n	80048b8 <_printf_i+0x1b4>
 800481c:	4616      	mov	r6, r2
 800481e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004822:	fb03 5711 	mls	r7, r3, r1, r5
 8004826:	5dc7      	ldrb	r7, [r0, r7]
 8004828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800482c:	462f      	mov	r7, r5
 800482e:	42bb      	cmp	r3, r7
 8004830:	460d      	mov	r5, r1
 8004832:	d9f4      	bls.n	800481e <_printf_i+0x11a>
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10b      	bne.n	8004850 <_printf_i+0x14c>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	07df      	lsls	r7, r3, #31
 800483c:	d508      	bpl.n	8004850 <_printf_i+0x14c>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4299      	cmp	r1, r3
 8004844:	bfde      	ittt	le
 8004846:	2330      	movle	r3, #48	; 0x30
 8004848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800484c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004850:	1b92      	subs	r2, r2, r6
 8004852:	6122      	str	r2, [r4, #16]
 8004854:	f8cd a000 	str.w	sl, [sp]
 8004858:	464b      	mov	r3, r9
 800485a:	aa03      	add	r2, sp, #12
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f7ff fee2 	bl	8004628 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	d14c      	bne.n	8004902 <_printf_i+0x1fe>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	b004      	add	sp, #16
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	4835      	ldr	r0, [pc, #212]	; (8004948 <_printf_i+0x244>)
 8004874:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	680e      	ldr	r6, [r1, #0]
 800487c:	061f      	lsls	r7, r3, #24
 800487e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004882:	600e      	str	r6, [r1, #0]
 8004884:	d514      	bpl.n	80048b0 <_printf_i+0x1ac>
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	bf44      	itt	mi
 800488a:	f043 0320 	orrmi.w	r3, r3, #32
 800488e:	6023      	strmi	r3, [r4, #0]
 8004890:	b91d      	cbnz	r5, 800489a <_printf_i+0x196>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f023 0320 	bic.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	2310      	movs	r3, #16
 800489c:	e7b0      	b.n	8004800 <_printf_i+0xfc>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	2378      	movs	r3, #120	; 0x78
 80048a8:	4828      	ldr	r0, [pc, #160]	; (800494c <_printf_i+0x248>)
 80048aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ae:	e7e3      	b.n	8004878 <_printf_i+0x174>
 80048b0:	065e      	lsls	r6, r3, #25
 80048b2:	bf48      	it	mi
 80048b4:	b2ad      	uxthmi	r5, r5
 80048b6:	e7e6      	b.n	8004886 <_printf_i+0x182>
 80048b8:	4616      	mov	r6, r2
 80048ba:	e7bb      	b.n	8004834 <_printf_i+0x130>
 80048bc:	680b      	ldr	r3, [r1, #0]
 80048be:	6826      	ldr	r6, [r4, #0]
 80048c0:	6960      	ldr	r0, [r4, #20]
 80048c2:	1d1d      	adds	r5, r3, #4
 80048c4:	600d      	str	r5, [r1, #0]
 80048c6:	0635      	lsls	r5, r6, #24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0x1cc>
 80048cc:	6018      	str	r0, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0x1d2>
 80048d0:	0671      	lsls	r1, r6, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0x1c8>
 80048d4:	8018      	strh	r0, [r3, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	4616      	mov	r6, r2
 80048dc:	e7ba      	b.n	8004854 <_printf_i+0x150>
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	600a      	str	r2, [r1, #0]
 80048e4:	681e      	ldr	r6, [r3, #0]
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	2100      	movs	r1, #0
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7fb fc80 	bl	80001f0 <memchr>
 80048f0:	b108      	cbz	r0, 80048f6 <_printf_i+0x1f2>
 80048f2:	1b80      	subs	r0, r0, r6
 80048f4:	6060      	str	r0, [r4, #4]
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	2300      	movs	r3, #0
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	e7a8      	b.n	8004854 <_printf_i+0x150>
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	4632      	mov	r2, r6
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	47d0      	blx	sl
 800490c:	3001      	adds	r0, #1
 800490e:	d0ab      	beq.n	8004868 <_printf_i+0x164>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	079b      	lsls	r3, r3, #30
 8004914:	d413      	bmi.n	800493e <_printf_i+0x23a>
 8004916:	68e0      	ldr	r0, [r4, #12]
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	4298      	cmp	r0, r3
 800491c:	bfb8      	it	lt
 800491e:	4618      	movlt	r0, r3
 8004920:	e7a4      	b.n	800486c <_printf_i+0x168>
 8004922:	2301      	movs	r3, #1
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d09b      	beq.n	8004868 <_printf_i+0x164>
 8004930:	3501      	adds	r5, #1
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	9903      	ldr	r1, [sp, #12]
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	42ab      	cmp	r3, r5
 800493a:	dcf2      	bgt.n	8004922 <_printf_i+0x21e>
 800493c:	e7eb      	b.n	8004916 <_printf_i+0x212>
 800493e:	2500      	movs	r5, #0
 8004940:	f104 0619 	add.w	r6, r4, #25
 8004944:	e7f5      	b.n	8004932 <_printf_i+0x22e>
 8004946:	bf00      	nop
 8004948:	0800794a 	.word	0x0800794a
 800494c:	0800795b 	.word	0x0800795b

08004950 <siprintf>:
 8004950:	b40e      	push	{r1, r2, r3}
 8004952:	b500      	push	{lr}
 8004954:	b09c      	sub	sp, #112	; 0x70
 8004956:	ab1d      	add	r3, sp, #116	; 0x74
 8004958:	9002      	str	r0, [sp, #8]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <siprintf+0x38>)
 8004962:	9107      	str	r1, [sp, #28]
 8004964:	9104      	str	r1, [sp, #16]
 8004966:	4909      	ldr	r1, [pc, #36]	; (800498c <siprintf+0x3c>)
 8004968:	f853 2b04 	ldr.w	r2, [r3], #4
 800496c:	9105      	str	r1, [sp, #20]
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	a902      	add	r1, sp, #8
 8004974:	f001 fb32 	bl	8005fdc <_svfiprintf_r>
 8004978:	9b02      	ldr	r3, [sp, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	b01c      	add	sp, #112	; 0x70
 8004980:	f85d eb04 	ldr.w	lr, [sp], #4
 8004984:	b003      	add	sp, #12
 8004986:	4770      	bx	lr
 8004988:	2000000c 	.word	0x2000000c
 800498c:	ffff0208 	.word	0xffff0208

08004990 <quorem>:
 8004990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	6903      	ldr	r3, [r0, #16]
 8004996:	690c      	ldr	r4, [r1, #16]
 8004998:	42a3      	cmp	r3, r4
 800499a:	4607      	mov	r7, r0
 800499c:	f2c0 8081 	blt.w	8004aa2 <quorem+0x112>
 80049a0:	3c01      	subs	r4, #1
 80049a2:	f101 0814 	add.w	r8, r1, #20
 80049a6:	f100 0514 	add.w	r5, r0, #20
 80049aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049b8:	3301      	adds	r3, #1
 80049ba:	429a      	cmp	r2, r3
 80049bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80049c8:	d331      	bcc.n	8004a2e <quorem+0x9e>
 80049ca:	f04f 0e00 	mov.w	lr, #0
 80049ce:	4640      	mov	r0, r8
 80049d0:	46ac      	mov	ip, r5
 80049d2:	46f2      	mov	sl, lr
 80049d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049d8:	b293      	uxth	r3, r2
 80049da:	fb06 e303 	mla	r3, r6, r3, lr
 80049de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	ebaa 0303 	sub.w	r3, sl, r3
 80049e8:	0c12      	lsrs	r2, r2, #16
 80049ea:	f8dc a000 	ldr.w	sl, [ip]
 80049ee:	fb06 e202 	mla	r2, r6, r2, lr
 80049f2:	fa13 f38a 	uxtah	r3, r3, sl
 80049f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049fa:	fa1f fa82 	uxth.w	sl, r2
 80049fe:	f8dc 2000 	ldr.w	r2, [ip]
 8004a02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a10:	4581      	cmp	r9, r0
 8004a12:	f84c 3b04 	str.w	r3, [ip], #4
 8004a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a1a:	d2db      	bcs.n	80049d4 <quorem+0x44>
 8004a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a20:	b92b      	cbnz	r3, 8004a2e <quorem+0x9e>
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	429d      	cmp	r5, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	d32e      	bcc.n	8004a8a <quorem+0xfa>
 8004a2c:	613c      	str	r4, [r7, #16]
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f001 f8be 	bl	8005bb0 <__mcmp>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	db24      	blt.n	8004a82 <quorem+0xf2>
 8004a38:	3601      	adds	r6, #1
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f04f 0c00 	mov.w	ip, #0
 8004a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a44:	f8d0 e000 	ldr.w	lr, [r0]
 8004a48:	b293      	uxth	r3, r2
 8004a4a:	ebac 0303 	sub.w	r3, ip, r3
 8004a4e:	0c12      	lsrs	r2, r2, #16
 8004a50:	fa13 f38e 	uxtah	r3, r3, lr
 8004a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a62:	45c1      	cmp	r9, r8
 8004a64:	f840 3b04 	str.w	r3, [r0], #4
 8004a68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a6c:	d2e8      	bcs.n	8004a40 <quorem+0xb0>
 8004a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a76:	b922      	cbnz	r2, 8004a82 <quorem+0xf2>
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	429d      	cmp	r5, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	d30a      	bcc.n	8004a96 <quorem+0x106>
 8004a80:	613c      	str	r4, [r7, #16]
 8004a82:	4630      	mov	r0, r6
 8004a84:	b003      	add	sp, #12
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d1cc      	bne.n	8004a2c <quorem+0x9c>
 8004a92:	3c01      	subs	r4, #1
 8004a94:	e7c7      	b.n	8004a26 <quorem+0x96>
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d1f0      	bne.n	8004a80 <quorem+0xf0>
 8004a9e:	3c01      	subs	r4, #1
 8004aa0:	e7eb      	b.n	8004a7a <quorem+0xea>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e7ee      	b.n	8004a84 <quorem+0xf4>
	...

08004aa8 <_dtoa_r>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	ed2d 8b02 	vpush	{d8}
 8004ab0:	ec57 6b10 	vmov	r6, r7, d0
 8004ab4:	b095      	sub	sp, #84	; 0x54
 8004ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ac8:	b975      	cbnz	r5, 8004ae8 <_dtoa_r+0x40>
 8004aca:	2010      	movs	r0, #16
 8004acc:	f000 fddc 	bl	8005688 <malloc>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8004ad4:	b920      	cbnz	r0, 8004ae0 <_dtoa_r+0x38>
 8004ad6:	4bb2      	ldr	r3, [pc, #712]	; (8004da0 <_dtoa_r+0x2f8>)
 8004ad8:	21ea      	movs	r1, #234	; 0xea
 8004ada:	48b2      	ldr	r0, [pc, #712]	; (8004da4 <_dtoa_r+0x2fc>)
 8004adc:	f001 fb8e 	bl	80061fc <__assert_func>
 8004ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ae4:	6005      	str	r5, [r0, #0]
 8004ae6:	60c5      	str	r5, [r0, #12]
 8004ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	b151      	cbz	r1, 8004b04 <_dtoa_r+0x5c>
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	604a      	str	r2, [r1, #4]
 8004af2:	2301      	movs	r3, #1
 8004af4:	4093      	lsls	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fe1b 	bl	8005734 <_Bfree>
 8004afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	1e3b      	subs	r3, r7, #0
 8004b06:	bfb9      	ittee	lt
 8004b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b0c:	9303      	strlt	r3, [sp, #12]
 8004b0e:	2300      	movge	r3, #0
 8004b10:	f8c8 3000 	strge.w	r3, [r8]
 8004b14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004b18:	4ba3      	ldr	r3, [pc, #652]	; (8004da8 <_dtoa_r+0x300>)
 8004b1a:	bfbc      	itt	lt
 8004b1c:	2201      	movlt	r2, #1
 8004b1e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b22:	ea33 0309 	bics.w	r3, r3, r9
 8004b26:	d11b      	bne.n	8004b60 <_dtoa_r+0xb8>
 8004b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b34:	4333      	orrs	r3, r6
 8004b36:	f000 857a 	beq.w	800562e <_dtoa_r+0xb86>
 8004b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b3c:	b963      	cbnz	r3, 8004b58 <_dtoa_r+0xb0>
 8004b3e:	4b9b      	ldr	r3, [pc, #620]	; (8004dac <_dtoa_r+0x304>)
 8004b40:	e024      	b.n	8004b8c <_dtoa_r+0xe4>
 8004b42:	4b9b      	ldr	r3, [pc, #620]	; (8004db0 <_dtoa_r+0x308>)
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	9800      	ldr	r0, [sp, #0]
 8004b4e:	b015      	add	sp, #84	; 0x54
 8004b50:	ecbd 8b02 	vpop	{d8}
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	4b94      	ldr	r3, [pc, #592]	; (8004dac <_dtoa_r+0x304>)
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	e7f3      	b.n	8004b48 <_dtoa_r+0xa0>
 8004b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	ec51 0b17 	vmov	r0, r1, d7
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b70:	f7fb ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b74:	4680      	mov	r8, r0
 8004b76:	b158      	cbz	r0, 8004b90 <_dtoa_r+0xe8>
 8004b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8551 	beq.w	8005628 <_dtoa_r+0xb80>
 8004b86:	488b      	ldr	r0, [pc, #556]	; (8004db4 <_dtoa_r+0x30c>)
 8004b88:	6018      	str	r0, [r3, #0]
 8004b8a:	1e43      	subs	r3, r0, #1
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	e7dd      	b.n	8004b4c <_dtoa_r+0xa4>
 8004b90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004b94:	aa12      	add	r2, sp, #72	; 0x48
 8004b96:	a913      	add	r1, sp, #76	; 0x4c
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f001 f8ad 	bl	8005cf8 <__d2b>
 8004b9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004ba2:	4683      	mov	fp, r0
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	d07c      	beq.n	8004ca2 <_dtoa_r+0x1fa>
 8004ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004baa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004bb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004bba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bc2:	4b7d      	ldr	r3, [pc, #500]	; (8004db8 <_dtoa_r+0x310>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	4639      	mov	r1, r7
 8004bca:	f7fb fb65 	bl	8000298 <__aeabi_dsub>
 8004bce:	a36e      	add	r3, pc, #440	; (adr r3, 8004d88 <_dtoa_r+0x2e0>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fd18 	bl	8000608 <__aeabi_dmul>
 8004bd8:	a36d      	add	r3, pc, #436	; (adr r3, 8004d90 <_dtoa_r+0x2e8>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f7fb fb5d 	bl	800029c <__adddf3>
 8004be2:	4606      	mov	r6, r0
 8004be4:	4628      	mov	r0, r5
 8004be6:	460f      	mov	r7, r1
 8004be8:	f7fb fca4 	bl	8000534 <__aeabi_i2d>
 8004bec:	a36a      	add	r3, pc, #424	; (adr r3, 8004d98 <_dtoa_r+0x2f0>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fd09 	bl	8000608 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb fb4d 	bl	800029c <__adddf3>
 8004c02:	4606      	mov	r6, r0
 8004c04:	460f      	mov	r7, r1
 8004c06:	f7fb ffaf 	bl	8000b68 <__aeabi_d2iz>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4682      	mov	sl, r0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4630      	mov	r0, r6
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb ff6a 	bl	8000aec <__aeabi_dcmplt>
 8004c18:	b148      	cbz	r0, 8004c2e <_dtoa_r+0x186>
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7fb fc8a 	bl	8000534 <__aeabi_i2d>
 8004c20:	4632      	mov	r2, r6
 8004c22:	463b      	mov	r3, r7
 8004c24:	f7fb ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c28:	b908      	cbnz	r0, 8004c2e <_dtoa_r+0x186>
 8004c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c2e:	f1ba 0f16 	cmp.w	sl, #22
 8004c32:	d854      	bhi.n	8004cde <_dtoa_r+0x236>
 8004c34:	4b61      	ldr	r3, [pc, #388]	; (8004dbc <_dtoa_r+0x314>)
 8004c36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c42:	f7fb ff53 	bl	8000aec <__aeabi_dcmplt>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d04b      	beq.n	8004ce2 <_dtoa_r+0x23a>
 8004c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c4e:	2300      	movs	r3, #0
 8004c50:	930e      	str	r3, [sp, #56]	; 0x38
 8004c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c54:	1b5d      	subs	r5, r3, r5
 8004c56:	1e6b      	subs	r3, r5, #1
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	bf43      	ittte	mi
 8004c5c:	2300      	movmi	r3, #0
 8004c5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c62:	9304      	strmi	r3, [sp, #16]
 8004c64:	f04f 0800 	movpl.w	r8, #0
 8004c68:	f1ba 0f00 	cmp.w	sl, #0
 8004c6c:	db3b      	blt.n	8004ce6 <_dtoa_r+0x23e>
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c74:	4453      	add	r3, sl
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9306      	str	r3, [sp, #24]
 8004c7c:	9b05      	ldr	r3, [sp, #20]
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d869      	bhi.n	8004d56 <_dtoa_r+0x2ae>
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	bfc4      	itt	gt
 8004c86:	3b04      	subgt	r3, #4
 8004c88:	9305      	strgt	r3, [sp, #20]
 8004c8a:	9b05      	ldr	r3, [sp, #20]
 8004c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8004c90:	bfcc      	ite	gt
 8004c92:	2500      	movgt	r5, #0
 8004c94:	2501      	movle	r5, #1
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d869      	bhi.n	8004d6e <_dtoa_r+0x2c6>
 8004c9a:	e8df f003 	tbb	[pc, r3]
 8004c9e:	4e2c      	.short	0x4e2c
 8004ca0:	5a4c      	.short	0x5a4c
 8004ca2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004ca6:	441d      	add	r5, r3
 8004ca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	bfc1      	itttt	gt
 8004cb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004cb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cc0:	bfda      	itte	le
 8004cc2:	f1c3 0320 	rsble	r3, r3, #32
 8004cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8004cca:	4318      	orrgt	r0, r3
 8004ccc:	f7fb fc22 	bl	8000514 <__aeabi_ui2d>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004cd8:	3d01      	subs	r5, #1
 8004cda:	9310      	str	r3, [sp, #64]	; 0x40
 8004cdc:	e771      	b.n	8004bc2 <_dtoa_r+0x11a>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e7b6      	b.n	8004c50 <_dtoa_r+0x1a8>
 8004ce2:	900e      	str	r0, [sp, #56]	; 0x38
 8004ce4:	e7b5      	b.n	8004c52 <_dtoa_r+0x1aa>
 8004ce6:	f1ca 0300 	rsb	r3, sl, #0
 8004cea:	9306      	str	r3, [sp, #24]
 8004cec:	2300      	movs	r3, #0
 8004cee:	eba8 080a 	sub.w	r8, r8, sl
 8004cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8004cf4:	e7c2      	b.n	8004c7c <_dtoa_r+0x1d4>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9308      	str	r3, [sp, #32]
 8004cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dc39      	bgt.n	8004d74 <_dtoa_r+0x2cc>
 8004d00:	f04f 0901 	mov.w	r9, #1
 8004d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d10:	2200      	movs	r2, #0
 8004d12:	6042      	str	r2, [r0, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f102 0614 	add.w	r6, r2, #20
 8004d1a:	429e      	cmp	r6, r3
 8004d1c:	6841      	ldr	r1, [r0, #4]
 8004d1e:	d92f      	bls.n	8004d80 <_dtoa_r+0x2d8>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 fcc7 	bl	80056b4 <_Balloc>
 8004d26:	9000      	str	r0, [sp, #0]
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d14b      	bne.n	8004dc4 <_dtoa_r+0x31c>
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <_dtoa_r+0x318>)
 8004d2e:	4602      	mov	r2, r0
 8004d30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d34:	e6d1      	b.n	8004ada <_dtoa_r+0x32>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e7de      	b.n	8004cf8 <_dtoa_r+0x250>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9308      	str	r3, [sp, #32]
 8004d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d40:	eb0a 0903 	add.w	r9, sl, r3
 8004d44:	f109 0301 	add.w	r3, r9, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	bfb8      	it	lt
 8004d4e:	2301      	movlt	r3, #1
 8004d50:	e7dd      	b.n	8004d0e <_dtoa_r+0x266>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e7f2      	b.n	8004d3c <_dtoa_r+0x294>
 8004d56:	2501      	movs	r5, #1
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9305      	str	r3, [sp, #20]
 8004d5c:	9508      	str	r5, [sp, #32]
 8004d5e:	f04f 39ff 	mov.w	r9, #4294967295
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d68:	2312      	movs	r3, #18
 8004d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d6c:	e7cf      	b.n	8004d0e <_dtoa_r+0x266>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	e7f4      	b.n	8004d5e <_dtoa_r+0x2b6>
 8004d74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d78:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	e7c6      	b.n	8004d0e <_dtoa_r+0x266>
 8004d80:	3101      	adds	r1, #1
 8004d82:	6041      	str	r1, [r0, #4]
 8004d84:	0052      	lsls	r2, r2, #1
 8004d86:	e7c6      	b.n	8004d16 <_dtoa_r+0x26e>
 8004d88:	636f4361 	.word	0x636f4361
 8004d8c:	3fd287a7 	.word	0x3fd287a7
 8004d90:	8b60c8b3 	.word	0x8b60c8b3
 8004d94:	3fc68a28 	.word	0x3fc68a28
 8004d98:	509f79fb 	.word	0x509f79fb
 8004d9c:	3fd34413 	.word	0x3fd34413
 8004da0:	08007979 	.word	0x08007979
 8004da4:	08007990 	.word	0x08007990
 8004da8:	7ff00000 	.word	0x7ff00000
 8004dac:	08007975 	.word	0x08007975
 8004db0:	0800796c 	.word	0x0800796c
 8004db4:	08007949 	.word	0x08007949
 8004db8:	3ff80000 	.word	0x3ff80000
 8004dbc:	08007a88 	.word	0x08007a88
 8004dc0:	080079ef 	.word	0x080079ef
 8004dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc6:	9a00      	ldr	r2, [sp, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	2b0e      	cmp	r3, #14
 8004dce:	f200 80ad 	bhi.w	8004f2c <_dtoa_r+0x484>
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f000 80aa 	beq.w	8004f2c <_dtoa_r+0x484>
 8004dd8:	f1ba 0f00 	cmp.w	sl, #0
 8004ddc:	dd36      	ble.n	8004e4c <_dtoa_r+0x3a4>
 8004dde:	4ac3      	ldr	r2, [pc, #780]	; (80050ec <_dtoa_r+0x644>)
 8004de0:	f00a 030f 	and.w	r3, sl, #15
 8004de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004df0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004df4:	eeb0 8a47 	vmov.f32	s16, s14
 8004df8:	eef0 8a67 	vmov.f32	s17, s15
 8004dfc:	d016      	beq.n	8004e2c <_dtoa_r+0x384>
 8004dfe:	4bbc      	ldr	r3, [pc, #752]	; (80050f0 <_dtoa_r+0x648>)
 8004e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e08:	f7fb fd28 	bl	800085c <__aeabi_ddiv>
 8004e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e10:	f007 070f 	and.w	r7, r7, #15
 8004e14:	2503      	movs	r5, #3
 8004e16:	4eb6      	ldr	r6, [pc, #728]	; (80050f0 <_dtoa_r+0x648>)
 8004e18:	b957      	cbnz	r7, 8004e30 <_dtoa_r+0x388>
 8004e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1e:	ec53 2b18 	vmov	r2, r3, d8
 8004e22:	f7fb fd1b 	bl	800085c <__aeabi_ddiv>
 8004e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2a:	e029      	b.n	8004e80 <_dtoa_r+0x3d8>
 8004e2c:	2502      	movs	r5, #2
 8004e2e:	e7f2      	b.n	8004e16 <_dtoa_r+0x36e>
 8004e30:	07f9      	lsls	r1, r7, #31
 8004e32:	d508      	bpl.n	8004e46 <_dtoa_r+0x39e>
 8004e34:	ec51 0b18 	vmov	r0, r1, d8
 8004e38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e3c:	f7fb fbe4 	bl	8000608 <__aeabi_dmul>
 8004e40:	ec41 0b18 	vmov	d8, r0, r1
 8004e44:	3501      	adds	r5, #1
 8004e46:	107f      	asrs	r7, r7, #1
 8004e48:	3608      	adds	r6, #8
 8004e4a:	e7e5      	b.n	8004e18 <_dtoa_r+0x370>
 8004e4c:	f000 80a6 	beq.w	8004f9c <_dtoa_r+0x4f4>
 8004e50:	f1ca 0600 	rsb	r6, sl, #0
 8004e54:	4ba5      	ldr	r3, [pc, #660]	; (80050ec <_dtoa_r+0x644>)
 8004e56:	4fa6      	ldr	r7, [pc, #664]	; (80050f0 <_dtoa_r+0x648>)
 8004e58:	f006 020f 	and.w	r2, r6, #15
 8004e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e68:	f7fb fbce 	bl	8000608 <__aeabi_dmul>
 8004e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e70:	1136      	asrs	r6, r6, #4
 8004e72:	2300      	movs	r3, #0
 8004e74:	2502      	movs	r5, #2
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	f040 8085 	bne.w	8004f86 <_dtoa_r+0x4de>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1d2      	bne.n	8004e26 <_dtoa_r+0x37e>
 8004e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 808c 	beq.w	8004fa0 <_dtoa_r+0x4f8>
 8004e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e8c:	4b99      	ldr	r3, [pc, #612]	; (80050f4 <_dtoa_r+0x64c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4630      	mov	r0, r6
 8004e92:	4639      	mov	r1, r7
 8004e94:	f7fb fe2a 	bl	8000aec <__aeabi_dcmplt>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f000 8081 	beq.w	8004fa0 <_dtoa_r+0x4f8>
 8004e9e:	9b01      	ldr	r3, [sp, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d07d      	beq.n	8004fa0 <_dtoa_r+0x4f8>
 8004ea4:	f1b9 0f00 	cmp.w	r9, #0
 8004ea8:	dd3c      	ble.n	8004f24 <_dtoa_r+0x47c>
 8004eaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004eae:	9307      	str	r3, [sp, #28]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4b91      	ldr	r3, [pc, #580]	; (80050f8 <_dtoa_r+0x650>)
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb fba6 	bl	8000608 <__aeabi_dmul>
 8004ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f7fb fb32 	bl	8000534 <__aeabi_i2d>
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	f7fb fb98 	bl	8000608 <__aeabi_dmul>
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <_dtoa_r+0x654>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	f7fb f9de 	bl	800029c <__adddf3>
 8004ee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee8:	9303      	str	r3, [sp, #12]
 8004eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d15c      	bne.n	8004faa <_dtoa_r+0x502>
 8004ef0:	4b83      	ldr	r3, [pc, #524]	; (8005100 <_dtoa_r+0x658>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f7fb f9ce 	bl	8000298 <__aeabi_dsub>
 8004efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	f7fb fe10 	bl	8000b28 <__aeabi_dcmpgt>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f040 8296 	bne.w	800543a <_dtoa_r+0x992>
 8004f0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f12:	4630      	mov	r0, r6
 8004f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb fde7 	bl	8000aec <__aeabi_dcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f040 8288 	bne.w	8005434 <_dtoa_r+0x98c>
 8004f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f2c0 8158 	blt.w	80051e4 <_dtoa_r+0x73c>
 8004f34:	f1ba 0f0e 	cmp.w	sl, #14
 8004f38:	f300 8154 	bgt.w	80051e4 <_dtoa_r+0x73c>
 8004f3c:	4b6b      	ldr	r3, [pc, #428]	; (80050ec <_dtoa_r+0x644>)
 8004f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f280 80e3 	bge.w	8005114 <_dtoa_r+0x66c>
 8004f4e:	9b01      	ldr	r3, [sp, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f300 80df 	bgt.w	8005114 <_dtoa_r+0x66c>
 8004f56:	f040 826d 	bne.w	8005434 <_dtoa_r+0x98c>
 8004f5a:	4b69      	ldr	r3, [pc, #420]	; (8005100 <_dtoa_r+0x658>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f7fb fb51 	bl	8000608 <__aeabi_dmul>
 8004f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f6a:	f7fb fdd3 	bl	8000b14 <__aeabi_dcmpge>
 8004f6e:	9e01      	ldr	r6, [sp, #4]
 8004f70:	4637      	mov	r7, r6
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f040 8243 	bne.w	80053fe <_dtoa_r+0x956>
 8004f78:	9d00      	ldr	r5, [sp, #0]
 8004f7a:	2331      	movs	r3, #49	; 0x31
 8004f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8004f80:	f10a 0a01 	add.w	sl, sl, #1
 8004f84:	e23f      	b.n	8005406 <_dtoa_r+0x95e>
 8004f86:	07f2      	lsls	r2, r6, #31
 8004f88:	d505      	bpl.n	8004f96 <_dtoa_r+0x4ee>
 8004f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8e:	f7fb fb3b 	bl	8000608 <__aeabi_dmul>
 8004f92:	3501      	adds	r5, #1
 8004f94:	2301      	movs	r3, #1
 8004f96:	1076      	asrs	r6, r6, #1
 8004f98:	3708      	adds	r7, #8
 8004f9a:	e76c      	b.n	8004e76 <_dtoa_r+0x3ce>
 8004f9c:	2502      	movs	r5, #2
 8004f9e:	e76f      	b.n	8004e80 <_dtoa_r+0x3d8>
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	f8cd a01c 	str.w	sl, [sp, #28]
 8004fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa8:	e78d      	b.n	8004ec6 <_dtoa_r+0x41e>
 8004faa:	9900      	ldr	r1, [sp, #0]
 8004fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fb0:	4b4e      	ldr	r3, [pc, #312]	; (80050ec <_dtoa_r+0x644>)
 8004fb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	9102      	str	r1, [sp, #8]
 8004fba:	9908      	ldr	r1, [sp, #32]
 8004fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8004fc0:	eef0 8a67 	vmov.f32	s17, s15
 8004fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d045      	beq.n	800505c <_dtoa_r+0x5b4>
 8004fd0:	494c      	ldr	r1, [pc, #304]	; (8005104 <_dtoa_r+0x65c>)
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f7fb fc42 	bl	800085c <__aeabi_ddiv>
 8004fd8:	ec53 2b18 	vmov	r2, r3, d8
 8004fdc:	f7fb f95c 	bl	8000298 <__aeabi_dsub>
 8004fe0:	9d00      	ldr	r5, [sp, #0]
 8004fe2:	ec41 0b18 	vmov	d8, r0, r1
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7fb fdbd 	bl	8000b68 <__aeabi_d2iz>
 8004fee:	900c      	str	r0, [sp, #48]	; 0x30
 8004ff0:	f7fb faa0 	bl	8000534 <__aeabi_i2d>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f7fb f94c 	bl	8000298 <__aeabi_dsub>
 8005000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005002:	3330      	adds	r3, #48	; 0x30
 8005004:	f805 3b01 	strb.w	r3, [r5], #1
 8005008:	ec53 2b18 	vmov	r2, r3, d8
 800500c:	4606      	mov	r6, r0
 800500e:	460f      	mov	r7, r1
 8005010:	f7fb fd6c 	bl	8000aec <__aeabi_dcmplt>
 8005014:	2800      	cmp	r0, #0
 8005016:	d165      	bne.n	80050e4 <_dtoa_r+0x63c>
 8005018:	4632      	mov	r2, r6
 800501a:	463b      	mov	r3, r7
 800501c:	4935      	ldr	r1, [pc, #212]	; (80050f4 <_dtoa_r+0x64c>)
 800501e:	2000      	movs	r0, #0
 8005020:	f7fb f93a 	bl	8000298 <__aeabi_dsub>
 8005024:	ec53 2b18 	vmov	r2, r3, d8
 8005028:	f7fb fd60 	bl	8000aec <__aeabi_dcmplt>
 800502c:	2800      	cmp	r0, #0
 800502e:	f040 80b9 	bne.w	80051a4 <_dtoa_r+0x6fc>
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	429d      	cmp	r5, r3
 8005036:	f43f af75 	beq.w	8004f24 <_dtoa_r+0x47c>
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <_dtoa_r+0x650>)
 800503c:	ec51 0b18 	vmov	r0, r1, d8
 8005040:	2200      	movs	r2, #0
 8005042:	f7fb fae1 	bl	8000608 <__aeabi_dmul>
 8005046:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <_dtoa_r+0x650>)
 8005048:	ec41 0b18 	vmov	d8, r0, r1
 800504c:	2200      	movs	r2, #0
 800504e:	4630      	mov	r0, r6
 8005050:	4639      	mov	r1, r7
 8005052:	f7fb fad9 	bl	8000608 <__aeabi_dmul>
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	e7c4      	b.n	8004fe6 <_dtoa_r+0x53e>
 800505c:	ec51 0b17 	vmov	r0, r1, d7
 8005060:	f7fb fad2 	bl	8000608 <__aeabi_dmul>
 8005064:	9b02      	ldr	r3, [sp, #8]
 8005066:	9d00      	ldr	r5, [sp, #0]
 8005068:	930c      	str	r3, [sp, #48]	; 0x30
 800506a:	ec41 0b18 	vmov	d8, r0, r1
 800506e:	4639      	mov	r1, r7
 8005070:	4630      	mov	r0, r6
 8005072:	f7fb fd79 	bl	8000b68 <__aeabi_d2iz>
 8005076:	9011      	str	r0, [sp, #68]	; 0x44
 8005078:	f7fb fa5c 	bl	8000534 <__aeabi_i2d>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb f908 	bl	8000298 <__aeabi_dsub>
 8005088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800508a:	3330      	adds	r3, #48	; 0x30
 800508c:	f805 3b01 	strb.w	r3, [r5], #1
 8005090:	9b02      	ldr	r3, [sp, #8]
 8005092:	429d      	cmp	r5, r3
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	d134      	bne.n	8005108 <_dtoa_r+0x660>
 800509e:	4b19      	ldr	r3, [pc, #100]	; (8005104 <_dtoa_r+0x65c>)
 80050a0:	ec51 0b18 	vmov	r0, r1, d8
 80050a4:	f7fb f8fa 	bl	800029c <__adddf3>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fd3a 	bl	8000b28 <__aeabi_dcmpgt>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d175      	bne.n	80051a4 <_dtoa_r+0x6fc>
 80050b8:	ec53 2b18 	vmov	r2, r3, d8
 80050bc:	4911      	ldr	r1, [pc, #68]	; (8005104 <_dtoa_r+0x65c>)
 80050be:	2000      	movs	r0, #0
 80050c0:	f7fb f8ea 	bl	8000298 <__aeabi_dsub>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	f7fb fd0e 	bl	8000aec <__aeabi_dcmplt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f43f af27 	beq.w	8004f24 <_dtoa_r+0x47c>
 80050d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050d8:	1e6b      	subs	r3, r5, #1
 80050da:	930c      	str	r3, [sp, #48]	; 0x30
 80050dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d0f8      	beq.n	80050d6 <_dtoa_r+0x62e>
 80050e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80050e8:	e04a      	b.n	8005180 <_dtoa_r+0x6d8>
 80050ea:	bf00      	nop
 80050ec:	08007a88 	.word	0x08007a88
 80050f0:	08007a60 	.word	0x08007a60
 80050f4:	3ff00000 	.word	0x3ff00000
 80050f8:	40240000 	.word	0x40240000
 80050fc:	401c0000 	.word	0x401c0000
 8005100:	40140000 	.word	0x40140000
 8005104:	3fe00000 	.word	0x3fe00000
 8005108:	4baf      	ldr	r3, [pc, #700]	; (80053c8 <_dtoa_r+0x920>)
 800510a:	f7fb fa7d 	bl	8000608 <__aeabi_dmul>
 800510e:	4606      	mov	r6, r0
 8005110:	460f      	mov	r7, r1
 8005112:	e7ac      	b.n	800506e <_dtoa_r+0x5c6>
 8005114:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005118:	9d00      	ldr	r5, [sp, #0]
 800511a:	4642      	mov	r2, r8
 800511c:	464b      	mov	r3, r9
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb fb9b 	bl	800085c <__aeabi_ddiv>
 8005126:	f7fb fd1f 	bl	8000b68 <__aeabi_d2iz>
 800512a:	9002      	str	r0, [sp, #8]
 800512c:	f7fb fa02 	bl	8000534 <__aeabi_i2d>
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	f7fb fa68 	bl	8000608 <__aeabi_dmul>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4630      	mov	r0, r6
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb f8aa 	bl	8000298 <__aeabi_dsub>
 8005144:	9e02      	ldr	r6, [sp, #8]
 8005146:	9f01      	ldr	r7, [sp, #4]
 8005148:	3630      	adds	r6, #48	; 0x30
 800514a:	f805 6b01 	strb.w	r6, [r5], #1
 800514e:	9e00      	ldr	r6, [sp, #0]
 8005150:	1bae      	subs	r6, r5, r6
 8005152:	42b7      	cmp	r7, r6
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	d137      	bne.n	80051ca <_dtoa_r+0x722>
 800515a:	f7fb f89f 	bl	800029c <__adddf3>
 800515e:	4642      	mov	r2, r8
 8005160:	464b      	mov	r3, r9
 8005162:	4606      	mov	r6, r0
 8005164:	460f      	mov	r7, r1
 8005166:	f7fb fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800516a:	b9c8      	cbnz	r0, 80051a0 <_dtoa_r+0x6f8>
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005178:	b110      	cbz	r0, 8005180 <_dtoa_r+0x6d8>
 800517a:	9b02      	ldr	r3, [sp, #8]
 800517c:	07d9      	lsls	r1, r3, #31
 800517e:	d40f      	bmi.n	80051a0 <_dtoa_r+0x6f8>
 8005180:	4620      	mov	r0, r4
 8005182:	4659      	mov	r1, fp
 8005184:	f000 fad6 	bl	8005734 <_Bfree>
 8005188:	2300      	movs	r3, #0
 800518a:	702b      	strb	r3, [r5, #0]
 800518c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800518e:	f10a 0001 	add.w	r0, sl, #1
 8005192:	6018      	str	r0, [r3, #0]
 8005194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005196:	2b00      	cmp	r3, #0
 8005198:	f43f acd8 	beq.w	8004b4c <_dtoa_r+0xa4>
 800519c:	601d      	str	r5, [r3, #0]
 800519e:	e4d5      	b.n	8004b4c <_dtoa_r+0xa4>
 80051a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80051a4:	462b      	mov	r3, r5
 80051a6:	461d      	mov	r5, r3
 80051a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ac:	2a39      	cmp	r2, #57	; 0x39
 80051ae:	d108      	bne.n	80051c2 <_dtoa_r+0x71a>
 80051b0:	9a00      	ldr	r2, [sp, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d1f7      	bne.n	80051a6 <_dtoa_r+0x6fe>
 80051b6:	9a07      	ldr	r2, [sp, #28]
 80051b8:	9900      	ldr	r1, [sp, #0]
 80051ba:	3201      	adds	r2, #1
 80051bc:	9207      	str	r2, [sp, #28]
 80051be:	2230      	movs	r2, #48	; 0x30
 80051c0:	700a      	strb	r2, [r1, #0]
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	3201      	adds	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e78c      	b.n	80050e4 <_dtoa_r+0x63c>
 80051ca:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <_dtoa_r+0x920>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	f7fb fa1b 	bl	8000608 <__aeabi_dmul>
 80051d2:	2200      	movs	r2, #0
 80051d4:	2300      	movs	r3, #0
 80051d6:	4606      	mov	r6, r0
 80051d8:	460f      	mov	r7, r1
 80051da:	f7fb fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d09b      	beq.n	800511a <_dtoa_r+0x672>
 80051e2:	e7cd      	b.n	8005180 <_dtoa_r+0x6d8>
 80051e4:	9a08      	ldr	r2, [sp, #32]
 80051e6:	2a00      	cmp	r2, #0
 80051e8:	f000 80c4 	beq.w	8005374 <_dtoa_r+0x8cc>
 80051ec:	9a05      	ldr	r2, [sp, #20]
 80051ee:	2a01      	cmp	r2, #1
 80051f0:	f300 80a8 	bgt.w	8005344 <_dtoa_r+0x89c>
 80051f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	f000 80a0 	beq.w	800533c <_dtoa_r+0x894>
 80051fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005200:	9e06      	ldr	r6, [sp, #24]
 8005202:	4645      	mov	r5, r8
 8005204:	9a04      	ldr	r2, [sp, #16]
 8005206:	2101      	movs	r1, #1
 8005208:	441a      	add	r2, r3
 800520a:	4620      	mov	r0, r4
 800520c:	4498      	add	r8, r3
 800520e:	9204      	str	r2, [sp, #16]
 8005210:	f000 fb4c 	bl	80058ac <__i2b>
 8005214:	4607      	mov	r7, r0
 8005216:	2d00      	cmp	r5, #0
 8005218:	dd0b      	ble.n	8005232 <_dtoa_r+0x78a>
 800521a:	9b04      	ldr	r3, [sp, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd08      	ble.n	8005232 <_dtoa_r+0x78a>
 8005220:	42ab      	cmp	r3, r5
 8005222:	9a04      	ldr	r2, [sp, #16]
 8005224:	bfa8      	it	ge
 8005226:	462b      	movge	r3, r5
 8005228:	eba8 0803 	sub.w	r8, r8, r3
 800522c:	1aed      	subs	r5, r5, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	9304      	str	r3, [sp, #16]
 8005232:	9b06      	ldr	r3, [sp, #24]
 8005234:	b1fb      	cbz	r3, 8005276 <_dtoa_r+0x7ce>
 8005236:	9b08      	ldr	r3, [sp, #32]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 809f 	beq.w	800537c <_dtoa_r+0x8d4>
 800523e:	2e00      	cmp	r6, #0
 8005240:	dd11      	ble.n	8005266 <_dtoa_r+0x7be>
 8005242:	4639      	mov	r1, r7
 8005244:	4632      	mov	r2, r6
 8005246:	4620      	mov	r0, r4
 8005248:	f000 fbec 	bl	8005a24 <__pow5mult>
 800524c:	465a      	mov	r2, fp
 800524e:	4601      	mov	r1, r0
 8005250:	4607      	mov	r7, r0
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fb40 	bl	80058d8 <__multiply>
 8005258:	4659      	mov	r1, fp
 800525a:	9007      	str	r0, [sp, #28]
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fa69 	bl	8005734 <_Bfree>
 8005262:	9b07      	ldr	r3, [sp, #28]
 8005264:	469b      	mov	fp, r3
 8005266:	9b06      	ldr	r3, [sp, #24]
 8005268:	1b9a      	subs	r2, r3, r6
 800526a:	d004      	beq.n	8005276 <_dtoa_r+0x7ce>
 800526c:	4659      	mov	r1, fp
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fbd8 	bl	8005a24 <__pow5mult>
 8005274:	4683      	mov	fp, r0
 8005276:	2101      	movs	r1, #1
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fb17 	bl	80058ac <__i2b>
 800527e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005280:	2b00      	cmp	r3, #0
 8005282:	4606      	mov	r6, r0
 8005284:	dd7c      	ble.n	8005380 <_dtoa_r+0x8d8>
 8005286:	461a      	mov	r2, r3
 8005288:	4601      	mov	r1, r0
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fbca 	bl	8005a24 <__pow5mult>
 8005290:	9b05      	ldr	r3, [sp, #20]
 8005292:	2b01      	cmp	r3, #1
 8005294:	4606      	mov	r6, r0
 8005296:	dd76      	ble.n	8005386 <_dtoa_r+0x8de>
 8005298:	2300      	movs	r3, #0
 800529a:	9306      	str	r3, [sp, #24]
 800529c:	6933      	ldr	r3, [r6, #16]
 800529e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052a2:	6918      	ldr	r0, [r3, #16]
 80052a4:	f000 fab2 	bl	800580c <__hi0bits>
 80052a8:	f1c0 0020 	rsb	r0, r0, #32
 80052ac:	9b04      	ldr	r3, [sp, #16]
 80052ae:	4418      	add	r0, r3
 80052b0:	f010 001f 	ands.w	r0, r0, #31
 80052b4:	f000 8086 	beq.w	80053c4 <_dtoa_r+0x91c>
 80052b8:	f1c0 0320 	rsb	r3, r0, #32
 80052bc:	2b04      	cmp	r3, #4
 80052be:	dd7f      	ble.n	80053c0 <_dtoa_r+0x918>
 80052c0:	f1c0 001c 	rsb	r0, r0, #28
 80052c4:	9b04      	ldr	r3, [sp, #16]
 80052c6:	4403      	add	r3, r0
 80052c8:	4480      	add	r8, r0
 80052ca:	4405      	add	r5, r0
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	f1b8 0f00 	cmp.w	r8, #0
 80052d2:	dd05      	ble.n	80052e0 <_dtoa_r+0x838>
 80052d4:	4659      	mov	r1, fp
 80052d6:	4642      	mov	r2, r8
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fbfd 	bl	8005ad8 <__lshift>
 80052de:	4683      	mov	fp, r0
 80052e0:	9b04      	ldr	r3, [sp, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd05      	ble.n	80052f2 <_dtoa_r+0x84a>
 80052e6:	4631      	mov	r1, r6
 80052e8:	461a      	mov	r2, r3
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fbf4 	bl	8005ad8 <__lshift>
 80052f0:	4606      	mov	r6, r0
 80052f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d069      	beq.n	80053cc <_dtoa_r+0x924>
 80052f8:	4631      	mov	r1, r6
 80052fa:	4658      	mov	r0, fp
 80052fc:	f000 fc58 	bl	8005bb0 <__mcmp>
 8005300:	2800      	cmp	r0, #0
 8005302:	da63      	bge.n	80053cc <_dtoa_r+0x924>
 8005304:	2300      	movs	r3, #0
 8005306:	4659      	mov	r1, fp
 8005308:	220a      	movs	r2, #10
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fa34 	bl	8005778 <__multadd>
 8005310:	9b08      	ldr	r3, [sp, #32]
 8005312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005316:	4683      	mov	fp, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 818f 	beq.w	800563c <_dtoa_r+0xb94>
 800531e:	4639      	mov	r1, r7
 8005320:	2300      	movs	r3, #0
 8005322:	220a      	movs	r2, #10
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fa27 	bl	8005778 <__multadd>
 800532a:	f1b9 0f00 	cmp.w	r9, #0
 800532e:	4607      	mov	r7, r0
 8005330:	f300 808e 	bgt.w	8005450 <_dtoa_r+0x9a8>
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	2b02      	cmp	r3, #2
 8005338:	dc50      	bgt.n	80053dc <_dtoa_r+0x934>
 800533a:	e089      	b.n	8005450 <_dtoa_r+0x9a8>
 800533c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800533e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005342:	e75d      	b.n	8005200 <_dtoa_r+0x758>
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	1e5e      	subs	r6, r3, #1
 8005348:	9b06      	ldr	r3, [sp, #24]
 800534a:	42b3      	cmp	r3, r6
 800534c:	bfbf      	itttt	lt
 800534e:	9b06      	ldrlt	r3, [sp, #24]
 8005350:	9606      	strlt	r6, [sp, #24]
 8005352:	1af2      	sublt	r2, r6, r3
 8005354:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005356:	bfb6      	itet	lt
 8005358:	189b      	addlt	r3, r3, r2
 800535a:	1b9e      	subge	r6, r3, r6
 800535c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800535e:	9b01      	ldr	r3, [sp, #4]
 8005360:	bfb8      	it	lt
 8005362:	2600      	movlt	r6, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfb5      	itete	lt
 8005368:	eba8 0503 	sublt.w	r5, r8, r3
 800536c:	9b01      	ldrge	r3, [sp, #4]
 800536e:	2300      	movlt	r3, #0
 8005370:	4645      	movge	r5, r8
 8005372:	e747      	b.n	8005204 <_dtoa_r+0x75c>
 8005374:	9e06      	ldr	r6, [sp, #24]
 8005376:	9f08      	ldr	r7, [sp, #32]
 8005378:	4645      	mov	r5, r8
 800537a:	e74c      	b.n	8005216 <_dtoa_r+0x76e>
 800537c:	9a06      	ldr	r2, [sp, #24]
 800537e:	e775      	b.n	800526c <_dtoa_r+0x7c4>
 8005380:	9b05      	ldr	r3, [sp, #20]
 8005382:	2b01      	cmp	r3, #1
 8005384:	dc18      	bgt.n	80053b8 <_dtoa_r+0x910>
 8005386:	9b02      	ldr	r3, [sp, #8]
 8005388:	b9b3      	cbnz	r3, 80053b8 <_dtoa_r+0x910>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005390:	b9a3      	cbnz	r3, 80053bc <_dtoa_r+0x914>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005398:	0d1b      	lsrs	r3, r3, #20
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	b12b      	cbz	r3, 80053aa <_dtoa_r+0x902>
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	3301      	adds	r3, #1
 80053a2:	9304      	str	r3, [sp, #16]
 80053a4:	f108 0801 	add.w	r8, r8, #1
 80053a8:	2301      	movs	r3, #1
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f47f af74 	bne.w	800529c <_dtoa_r+0x7f4>
 80053b4:	2001      	movs	r0, #1
 80053b6:	e779      	b.n	80052ac <_dtoa_r+0x804>
 80053b8:	2300      	movs	r3, #0
 80053ba:	e7f6      	b.n	80053aa <_dtoa_r+0x902>
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	e7f4      	b.n	80053aa <_dtoa_r+0x902>
 80053c0:	d085      	beq.n	80052ce <_dtoa_r+0x826>
 80053c2:	4618      	mov	r0, r3
 80053c4:	301c      	adds	r0, #28
 80053c6:	e77d      	b.n	80052c4 <_dtoa_r+0x81c>
 80053c8:	40240000 	.word	0x40240000
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dc38      	bgt.n	8005444 <_dtoa_r+0x99c>
 80053d2:	9b05      	ldr	r3, [sp, #20]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	dd35      	ble.n	8005444 <_dtoa_r+0x99c>
 80053d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053dc:	f1b9 0f00 	cmp.w	r9, #0
 80053e0:	d10d      	bne.n	80053fe <_dtoa_r+0x956>
 80053e2:	4631      	mov	r1, r6
 80053e4:	464b      	mov	r3, r9
 80053e6:	2205      	movs	r2, #5
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 f9c5 	bl	8005778 <__multadd>
 80053ee:	4601      	mov	r1, r0
 80053f0:	4606      	mov	r6, r0
 80053f2:	4658      	mov	r0, fp
 80053f4:	f000 fbdc 	bl	8005bb0 <__mcmp>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f73f adbd 	bgt.w	8004f78 <_dtoa_r+0x4d0>
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	9d00      	ldr	r5, [sp, #0]
 8005402:	ea6f 0a03 	mvn.w	sl, r3
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	4631      	mov	r1, r6
 800540c:	4620      	mov	r0, r4
 800540e:	f000 f991 	bl	8005734 <_Bfree>
 8005412:	2f00      	cmp	r7, #0
 8005414:	f43f aeb4 	beq.w	8005180 <_dtoa_r+0x6d8>
 8005418:	f1b8 0f00 	cmp.w	r8, #0
 800541c:	d005      	beq.n	800542a <_dtoa_r+0x982>
 800541e:	45b8      	cmp	r8, r7
 8005420:	d003      	beq.n	800542a <_dtoa_r+0x982>
 8005422:	4641      	mov	r1, r8
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f985 	bl	8005734 <_Bfree>
 800542a:	4639      	mov	r1, r7
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f981 	bl	8005734 <_Bfree>
 8005432:	e6a5      	b.n	8005180 <_dtoa_r+0x6d8>
 8005434:	2600      	movs	r6, #0
 8005436:	4637      	mov	r7, r6
 8005438:	e7e1      	b.n	80053fe <_dtoa_r+0x956>
 800543a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800543c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005440:	4637      	mov	r7, r6
 8005442:	e599      	b.n	8004f78 <_dtoa_r+0x4d0>
 8005444:	9b08      	ldr	r3, [sp, #32]
 8005446:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80fd 	beq.w	800564a <_dtoa_r+0xba2>
 8005450:	2d00      	cmp	r5, #0
 8005452:	dd05      	ble.n	8005460 <_dtoa_r+0x9b8>
 8005454:	4639      	mov	r1, r7
 8005456:	462a      	mov	r2, r5
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fb3d 	bl	8005ad8 <__lshift>
 800545e:	4607      	mov	r7, r0
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d05c      	beq.n	8005520 <_dtoa_r+0xa78>
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f923 	bl	80056b4 <_Balloc>
 800546e:	4605      	mov	r5, r0
 8005470:	b928      	cbnz	r0, 800547e <_dtoa_r+0x9d6>
 8005472:	4b80      	ldr	r3, [pc, #512]	; (8005674 <_dtoa_r+0xbcc>)
 8005474:	4602      	mov	r2, r0
 8005476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800547a:	f7ff bb2e 	b.w	8004ada <_dtoa_r+0x32>
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	3202      	adds	r2, #2
 8005482:	0092      	lsls	r2, r2, #2
 8005484:	f107 010c 	add.w	r1, r7, #12
 8005488:	300c      	adds	r0, #12
 800548a:	f000 f905 	bl	8005698 <memcpy>
 800548e:	2201      	movs	r2, #1
 8005490:	4629      	mov	r1, r5
 8005492:	4620      	mov	r0, r4
 8005494:	f000 fb20 	bl	8005ad8 <__lshift>
 8005498:	9b00      	ldr	r3, [sp, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	444b      	add	r3, r9
 80054a2:	9307      	str	r3, [sp, #28]
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	46b8      	mov	r8, r7
 80054ac:	9306      	str	r3, [sp, #24]
 80054ae:	4607      	mov	r7, r0
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	4631      	mov	r1, r6
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4658      	mov	r0, fp
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	f7ff fa69 	bl	8004990 <quorem>
 80054be:	4603      	mov	r3, r0
 80054c0:	3330      	adds	r3, #48	; 0x30
 80054c2:	9004      	str	r0, [sp, #16]
 80054c4:	4641      	mov	r1, r8
 80054c6:	4658      	mov	r0, fp
 80054c8:	9308      	str	r3, [sp, #32]
 80054ca:	f000 fb71 	bl	8005bb0 <__mcmp>
 80054ce:	463a      	mov	r2, r7
 80054d0:	4681      	mov	r9, r0
 80054d2:	4631      	mov	r1, r6
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 fb87 	bl	8005be8 <__mdiff>
 80054da:	68c2      	ldr	r2, [r0, #12]
 80054dc:	9b08      	ldr	r3, [sp, #32]
 80054de:	4605      	mov	r5, r0
 80054e0:	bb02      	cbnz	r2, 8005524 <_dtoa_r+0xa7c>
 80054e2:	4601      	mov	r1, r0
 80054e4:	4658      	mov	r0, fp
 80054e6:	f000 fb63 	bl	8005bb0 <__mcmp>
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	4602      	mov	r2, r0
 80054ee:	4629      	mov	r1, r5
 80054f0:	4620      	mov	r0, r4
 80054f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80054f6:	f000 f91d 	bl	8005734 <_Bfree>
 80054fa:	9b05      	ldr	r3, [sp, #20]
 80054fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054fe:	9d01      	ldr	r5, [sp, #4]
 8005500:	ea43 0102 	orr.w	r1, r3, r2
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	430b      	orrs	r3, r1
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	d10d      	bne.n	8005528 <_dtoa_r+0xa80>
 800550c:	2b39      	cmp	r3, #57	; 0x39
 800550e:	d029      	beq.n	8005564 <_dtoa_r+0xabc>
 8005510:	f1b9 0f00 	cmp.w	r9, #0
 8005514:	dd01      	ble.n	800551a <_dtoa_r+0xa72>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	3331      	adds	r3, #49	; 0x31
 800551a:	9a02      	ldr	r2, [sp, #8]
 800551c:	7013      	strb	r3, [r2, #0]
 800551e:	e774      	b.n	800540a <_dtoa_r+0x962>
 8005520:	4638      	mov	r0, r7
 8005522:	e7b9      	b.n	8005498 <_dtoa_r+0x9f0>
 8005524:	2201      	movs	r2, #1
 8005526:	e7e2      	b.n	80054ee <_dtoa_r+0xa46>
 8005528:	f1b9 0f00 	cmp.w	r9, #0
 800552c:	db06      	blt.n	800553c <_dtoa_r+0xa94>
 800552e:	9905      	ldr	r1, [sp, #20]
 8005530:	ea41 0909 	orr.w	r9, r1, r9
 8005534:	9906      	ldr	r1, [sp, #24]
 8005536:	ea59 0101 	orrs.w	r1, r9, r1
 800553a:	d120      	bne.n	800557e <_dtoa_r+0xad6>
 800553c:	2a00      	cmp	r2, #0
 800553e:	ddec      	ble.n	800551a <_dtoa_r+0xa72>
 8005540:	4659      	mov	r1, fp
 8005542:	2201      	movs	r2, #1
 8005544:	4620      	mov	r0, r4
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	f000 fac6 	bl	8005ad8 <__lshift>
 800554c:	4631      	mov	r1, r6
 800554e:	4683      	mov	fp, r0
 8005550:	f000 fb2e 	bl	8005bb0 <__mcmp>
 8005554:	2800      	cmp	r0, #0
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	dc02      	bgt.n	8005560 <_dtoa_r+0xab8>
 800555a:	d1de      	bne.n	800551a <_dtoa_r+0xa72>
 800555c:	07da      	lsls	r2, r3, #31
 800555e:	d5dc      	bpl.n	800551a <_dtoa_r+0xa72>
 8005560:	2b39      	cmp	r3, #57	; 0x39
 8005562:	d1d8      	bne.n	8005516 <_dtoa_r+0xa6e>
 8005564:	9a02      	ldr	r2, [sp, #8]
 8005566:	2339      	movs	r3, #57	; 0x39
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	462b      	mov	r3, r5
 800556c:	461d      	mov	r5, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005574:	2a39      	cmp	r2, #57	; 0x39
 8005576:	d050      	beq.n	800561a <_dtoa_r+0xb72>
 8005578:	3201      	adds	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e745      	b.n	800540a <_dtoa_r+0x962>
 800557e:	2a00      	cmp	r2, #0
 8005580:	dd03      	ble.n	800558a <_dtoa_r+0xae2>
 8005582:	2b39      	cmp	r3, #57	; 0x39
 8005584:	d0ee      	beq.n	8005564 <_dtoa_r+0xabc>
 8005586:	3301      	adds	r3, #1
 8005588:	e7c7      	b.n	800551a <_dtoa_r+0xa72>
 800558a:	9a01      	ldr	r2, [sp, #4]
 800558c:	9907      	ldr	r1, [sp, #28]
 800558e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005592:	428a      	cmp	r2, r1
 8005594:	d02a      	beq.n	80055ec <_dtoa_r+0xb44>
 8005596:	4659      	mov	r1, fp
 8005598:	2300      	movs	r3, #0
 800559a:	220a      	movs	r2, #10
 800559c:	4620      	mov	r0, r4
 800559e:	f000 f8eb 	bl	8005778 <__multadd>
 80055a2:	45b8      	cmp	r8, r7
 80055a4:	4683      	mov	fp, r0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f04f 020a 	mov.w	r2, #10
 80055ae:	4641      	mov	r1, r8
 80055b0:	4620      	mov	r0, r4
 80055b2:	d107      	bne.n	80055c4 <_dtoa_r+0xb1c>
 80055b4:	f000 f8e0 	bl	8005778 <__multadd>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4607      	mov	r7, r0
 80055bc:	9b01      	ldr	r3, [sp, #4]
 80055be:	3301      	adds	r3, #1
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	e775      	b.n	80054b0 <_dtoa_r+0xa08>
 80055c4:	f000 f8d8 	bl	8005778 <__multadd>
 80055c8:	4639      	mov	r1, r7
 80055ca:	4680      	mov	r8, r0
 80055cc:	2300      	movs	r3, #0
 80055ce:	220a      	movs	r2, #10
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 f8d1 	bl	8005778 <__multadd>
 80055d6:	4607      	mov	r7, r0
 80055d8:	e7f0      	b.n	80055bc <_dtoa_r+0xb14>
 80055da:	f1b9 0f00 	cmp.w	r9, #0
 80055de:	9a00      	ldr	r2, [sp, #0]
 80055e0:	bfcc      	ite	gt
 80055e2:	464d      	movgt	r5, r9
 80055e4:	2501      	movle	r5, #1
 80055e6:	4415      	add	r5, r2
 80055e8:	f04f 0800 	mov.w	r8, #0
 80055ec:	4659      	mov	r1, fp
 80055ee:	2201      	movs	r2, #1
 80055f0:	4620      	mov	r0, r4
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	f000 fa70 	bl	8005ad8 <__lshift>
 80055f8:	4631      	mov	r1, r6
 80055fa:	4683      	mov	fp, r0
 80055fc:	f000 fad8 	bl	8005bb0 <__mcmp>
 8005600:	2800      	cmp	r0, #0
 8005602:	dcb2      	bgt.n	800556a <_dtoa_r+0xac2>
 8005604:	d102      	bne.n	800560c <_dtoa_r+0xb64>
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	07db      	lsls	r3, r3, #31
 800560a:	d4ae      	bmi.n	800556a <_dtoa_r+0xac2>
 800560c:	462b      	mov	r3, r5
 800560e:	461d      	mov	r5, r3
 8005610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005614:	2a30      	cmp	r2, #48	; 0x30
 8005616:	d0fa      	beq.n	800560e <_dtoa_r+0xb66>
 8005618:	e6f7      	b.n	800540a <_dtoa_r+0x962>
 800561a:	9a00      	ldr	r2, [sp, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d1a5      	bne.n	800556c <_dtoa_r+0xac4>
 8005620:	f10a 0a01 	add.w	sl, sl, #1
 8005624:	2331      	movs	r3, #49	; 0x31
 8005626:	e779      	b.n	800551c <_dtoa_r+0xa74>
 8005628:	4b13      	ldr	r3, [pc, #76]	; (8005678 <_dtoa_r+0xbd0>)
 800562a:	f7ff baaf 	b.w	8004b8c <_dtoa_r+0xe4>
 800562e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f aa86 	bne.w	8004b42 <_dtoa_r+0x9a>
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <_dtoa_r+0xbd4>)
 8005638:	f7ff baa8 	b.w	8004b8c <_dtoa_r+0xe4>
 800563c:	f1b9 0f00 	cmp.w	r9, #0
 8005640:	dc03      	bgt.n	800564a <_dtoa_r+0xba2>
 8005642:	9b05      	ldr	r3, [sp, #20]
 8005644:	2b02      	cmp	r3, #2
 8005646:	f73f aec9 	bgt.w	80053dc <_dtoa_r+0x934>
 800564a:	9d00      	ldr	r5, [sp, #0]
 800564c:	4631      	mov	r1, r6
 800564e:	4658      	mov	r0, fp
 8005650:	f7ff f99e 	bl	8004990 <quorem>
 8005654:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005658:	f805 3b01 	strb.w	r3, [r5], #1
 800565c:	9a00      	ldr	r2, [sp, #0]
 800565e:	1aaa      	subs	r2, r5, r2
 8005660:	4591      	cmp	r9, r2
 8005662:	ddba      	ble.n	80055da <_dtoa_r+0xb32>
 8005664:	4659      	mov	r1, fp
 8005666:	2300      	movs	r3, #0
 8005668:	220a      	movs	r2, #10
 800566a:	4620      	mov	r0, r4
 800566c:	f000 f884 	bl	8005778 <__multadd>
 8005670:	4683      	mov	fp, r0
 8005672:	e7eb      	b.n	800564c <_dtoa_r+0xba4>
 8005674:	080079ef 	.word	0x080079ef
 8005678:	08007948 	.word	0x08007948
 800567c:	0800796c 	.word	0x0800796c

08005680 <_localeconv_r>:
 8005680:	4800      	ldr	r0, [pc, #0]	; (8005684 <_localeconv_r+0x4>)
 8005682:	4770      	bx	lr
 8005684:	20000160 	.word	0x20000160

08005688 <malloc>:
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <malloc+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f000 bbef 	b.w	8005e70 <_malloc_r>
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c

08005698 <memcpy>:
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a0:	d100      	bne.n	80056a4 <memcpy+0xc>
 80056a2:	4770      	bx	lr
 80056a4:	b510      	push	{r4, lr}
 80056a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ae:	4291      	cmp	r1, r2
 80056b0:	d1f9      	bne.n	80056a6 <memcpy+0xe>
 80056b2:	bd10      	pop	{r4, pc}

080056b4 <_Balloc>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056b8:	4604      	mov	r4, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	b976      	cbnz	r6, 80056dc <_Balloc+0x28>
 80056be:	2010      	movs	r0, #16
 80056c0:	f7ff ffe2 	bl	8005688 <malloc>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6260      	str	r0, [r4, #36]	; 0x24
 80056c8:	b920      	cbnz	r0, 80056d4 <_Balloc+0x20>
 80056ca:	4b18      	ldr	r3, [pc, #96]	; (800572c <_Balloc+0x78>)
 80056cc:	4818      	ldr	r0, [pc, #96]	; (8005730 <_Balloc+0x7c>)
 80056ce:	2166      	movs	r1, #102	; 0x66
 80056d0:	f000 fd94 	bl	80061fc <__assert_func>
 80056d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d8:	6006      	str	r6, [r0, #0]
 80056da:	60c6      	str	r6, [r0, #12]
 80056dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056de:	68f3      	ldr	r3, [r6, #12]
 80056e0:	b183      	cbz	r3, 8005704 <_Balloc+0x50>
 80056e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056ea:	b9b8      	cbnz	r0, 800571c <_Balloc+0x68>
 80056ec:	2101      	movs	r1, #1
 80056ee:	fa01 f605 	lsl.w	r6, r1, r5
 80056f2:	1d72      	adds	r2, r6, #5
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 fb5a 	bl	8005db0 <_calloc_r>
 80056fc:	b160      	cbz	r0, 8005718 <_Balloc+0x64>
 80056fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005702:	e00e      	b.n	8005722 <_Balloc+0x6e>
 8005704:	2221      	movs	r2, #33	; 0x21
 8005706:	2104      	movs	r1, #4
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fb51 	bl	8005db0 <_calloc_r>
 800570e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005710:	60f0      	str	r0, [r6, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e4      	bne.n	80056e2 <_Balloc+0x2e>
 8005718:	2000      	movs	r0, #0
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	6802      	ldr	r2, [r0, #0]
 800571e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005722:	2300      	movs	r3, #0
 8005724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005728:	e7f7      	b.n	800571a <_Balloc+0x66>
 800572a:	bf00      	nop
 800572c:	08007979 	.word	0x08007979
 8005730:	08007a00 	.word	0x08007a00

08005734 <_Bfree>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005738:	4605      	mov	r5, r0
 800573a:	460c      	mov	r4, r1
 800573c:	b976      	cbnz	r6, 800575c <_Bfree+0x28>
 800573e:	2010      	movs	r0, #16
 8005740:	f7ff ffa2 	bl	8005688 <malloc>
 8005744:	4602      	mov	r2, r0
 8005746:	6268      	str	r0, [r5, #36]	; 0x24
 8005748:	b920      	cbnz	r0, 8005754 <_Bfree+0x20>
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <_Bfree+0x3c>)
 800574c:	4809      	ldr	r0, [pc, #36]	; (8005774 <_Bfree+0x40>)
 800574e:	218a      	movs	r1, #138	; 0x8a
 8005750:	f000 fd54 	bl	80061fc <__assert_func>
 8005754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005758:	6006      	str	r6, [r0, #0]
 800575a:	60c6      	str	r6, [r0, #12]
 800575c:	b13c      	cbz	r4, 800576e <_Bfree+0x3a>
 800575e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005760:	6862      	ldr	r2, [r4, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005768:	6021      	str	r1, [r4, #0]
 800576a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	08007979 	.word	0x08007979
 8005774:	08007a00 	.word	0x08007a00

08005778 <__multadd>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	690e      	ldr	r6, [r1, #16]
 800577e:	4607      	mov	r7, r0
 8005780:	4698      	mov	r8, r3
 8005782:	460c      	mov	r4, r1
 8005784:	f101 0014 	add.w	r0, r1, #20
 8005788:	2300      	movs	r3, #0
 800578a:	6805      	ldr	r5, [r0, #0]
 800578c:	b2a9      	uxth	r1, r5
 800578e:	fb02 8101 	mla	r1, r2, r1, r8
 8005792:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005796:	0c2d      	lsrs	r5, r5, #16
 8005798:	fb02 c505 	mla	r5, r2, r5, ip
 800579c:	b289      	uxth	r1, r1
 800579e:	3301      	adds	r3, #1
 80057a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057a4:	429e      	cmp	r6, r3
 80057a6:	f840 1b04 	str.w	r1, [r0], #4
 80057aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057ae:	dcec      	bgt.n	800578a <__multadd+0x12>
 80057b0:	f1b8 0f00 	cmp.w	r8, #0
 80057b4:	d022      	beq.n	80057fc <__multadd+0x84>
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	42b3      	cmp	r3, r6
 80057ba:	dc19      	bgt.n	80057f0 <__multadd+0x78>
 80057bc:	6861      	ldr	r1, [r4, #4]
 80057be:	4638      	mov	r0, r7
 80057c0:	3101      	adds	r1, #1
 80057c2:	f7ff ff77 	bl	80056b4 <_Balloc>
 80057c6:	4605      	mov	r5, r0
 80057c8:	b928      	cbnz	r0, 80057d6 <__multadd+0x5e>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <__multadd+0x8c>)
 80057ce:	480e      	ldr	r0, [pc, #56]	; (8005808 <__multadd+0x90>)
 80057d0:	21b5      	movs	r1, #181	; 0xb5
 80057d2:	f000 fd13 	bl	80061fc <__assert_func>
 80057d6:	6922      	ldr	r2, [r4, #16]
 80057d8:	3202      	adds	r2, #2
 80057da:	f104 010c 	add.w	r1, r4, #12
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	300c      	adds	r0, #12
 80057e2:	f7ff ff59 	bl	8005698 <memcpy>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4638      	mov	r0, r7
 80057ea:	f7ff ffa3 	bl	8005734 <_Bfree>
 80057ee:	462c      	mov	r4, r5
 80057f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057f4:	3601      	adds	r6, #1
 80057f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80057fa:	6126      	str	r6, [r4, #16]
 80057fc:	4620      	mov	r0, r4
 80057fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005802:	bf00      	nop
 8005804:	080079ef 	.word	0x080079ef
 8005808:	08007a00 	.word	0x08007a00

0800580c <__hi0bits>:
 800580c:	0c03      	lsrs	r3, r0, #16
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	b9d3      	cbnz	r3, 8005848 <__hi0bits+0x3c>
 8005812:	0400      	lsls	r0, r0, #16
 8005814:	2310      	movs	r3, #16
 8005816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800581a:	bf04      	itt	eq
 800581c:	0200      	lsleq	r0, r0, #8
 800581e:	3308      	addeq	r3, #8
 8005820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005824:	bf04      	itt	eq
 8005826:	0100      	lsleq	r0, r0, #4
 8005828:	3304      	addeq	r3, #4
 800582a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800582e:	bf04      	itt	eq
 8005830:	0080      	lsleq	r0, r0, #2
 8005832:	3302      	addeq	r3, #2
 8005834:	2800      	cmp	r0, #0
 8005836:	db05      	blt.n	8005844 <__hi0bits+0x38>
 8005838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800583c:	f103 0301 	add.w	r3, r3, #1
 8005840:	bf08      	it	eq
 8005842:	2320      	moveq	r3, #32
 8005844:	4618      	mov	r0, r3
 8005846:	4770      	bx	lr
 8005848:	2300      	movs	r3, #0
 800584a:	e7e4      	b.n	8005816 <__hi0bits+0xa>

0800584c <__lo0bits>:
 800584c:	6803      	ldr	r3, [r0, #0]
 800584e:	f013 0207 	ands.w	r2, r3, #7
 8005852:	4601      	mov	r1, r0
 8005854:	d00b      	beq.n	800586e <__lo0bits+0x22>
 8005856:	07da      	lsls	r2, r3, #31
 8005858:	d424      	bmi.n	80058a4 <__lo0bits+0x58>
 800585a:	0798      	lsls	r0, r3, #30
 800585c:	bf49      	itett	mi
 800585e:	085b      	lsrmi	r3, r3, #1
 8005860:	089b      	lsrpl	r3, r3, #2
 8005862:	2001      	movmi	r0, #1
 8005864:	600b      	strmi	r3, [r1, #0]
 8005866:	bf5c      	itt	pl
 8005868:	600b      	strpl	r3, [r1, #0]
 800586a:	2002      	movpl	r0, #2
 800586c:	4770      	bx	lr
 800586e:	b298      	uxth	r0, r3
 8005870:	b9b0      	cbnz	r0, 80058a0 <__lo0bits+0x54>
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	2010      	movs	r0, #16
 8005876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800587a:	bf04      	itt	eq
 800587c:	0a1b      	lsreq	r3, r3, #8
 800587e:	3008      	addeq	r0, #8
 8005880:	071a      	lsls	r2, r3, #28
 8005882:	bf04      	itt	eq
 8005884:	091b      	lsreq	r3, r3, #4
 8005886:	3004      	addeq	r0, #4
 8005888:	079a      	lsls	r2, r3, #30
 800588a:	bf04      	itt	eq
 800588c:	089b      	lsreq	r3, r3, #2
 800588e:	3002      	addeq	r0, #2
 8005890:	07da      	lsls	r2, r3, #31
 8005892:	d403      	bmi.n	800589c <__lo0bits+0x50>
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f100 0001 	add.w	r0, r0, #1
 800589a:	d005      	beq.n	80058a8 <__lo0bits+0x5c>
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	4770      	bx	lr
 80058a0:	4610      	mov	r0, r2
 80058a2:	e7e8      	b.n	8005876 <__lo0bits+0x2a>
 80058a4:	2000      	movs	r0, #0
 80058a6:	4770      	bx	lr
 80058a8:	2020      	movs	r0, #32
 80058aa:	4770      	bx	lr

080058ac <__i2b>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	2101      	movs	r1, #1
 80058b2:	f7ff feff 	bl	80056b4 <_Balloc>
 80058b6:	4602      	mov	r2, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <__i2b+0x1a>
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <__i2b+0x24>)
 80058bc:	4805      	ldr	r0, [pc, #20]	; (80058d4 <__i2b+0x28>)
 80058be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058c2:	f000 fc9b 	bl	80061fc <__assert_func>
 80058c6:	2301      	movs	r3, #1
 80058c8:	6144      	str	r4, [r0, #20]
 80058ca:	6103      	str	r3, [r0, #16]
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	bf00      	nop
 80058d0:	080079ef 	.word	0x080079ef
 80058d4:	08007a00 	.word	0x08007a00

080058d8 <__multiply>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4614      	mov	r4, r2
 80058de:	690a      	ldr	r2, [r1, #16]
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bfb8      	it	lt
 80058e6:	460b      	movlt	r3, r1
 80058e8:	460d      	mov	r5, r1
 80058ea:	bfbc      	itt	lt
 80058ec:	4625      	movlt	r5, r4
 80058ee:	461c      	movlt	r4, r3
 80058f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058f8:	68ab      	ldr	r3, [r5, #8]
 80058fa:	6869      	ldr	r1, [r5, #4]
 80058fc:	eb0a 0709 	add.w	r7, sl, r9
 8005900:	42bb      	cmp	r3, r7
 8005902:	b085      	sub	sp, #20
 8005904:	bfb8      	it	lt
 8005906:	3101      	addlt	r1, #1
 8005908:	f7ff fed4 	bl	80056b4 <_Balloc>
 800590c:	b930      	cbnz	r0, 800591c <__multiply+0x44>
 800590e:	4602      	mov	r2, r0
 8005910:	4b42      	ldr	r3, [pc, #264]	; (8005a1c <__multiply+0x144>)
 8005912:	4843      	ldr	r0, [pc, #268]	; (8005a20 <__multiply+0x148>)
 8005914:	f240 115d 	movw	r1, #349	; 0x15d
 8005918:	f000 fc70 	bl	80061fc <__assert_func>
 800591c:	f100 0614 	add.w	r6, r0, #20
 8005920:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005924:	4633      	mov	r3, r6
 8005926:	2200      	movs	r2, #0
 8005928:	4543      	cmp	r3, r8
 800592a:	d31e      	bcc.n	800596a <__multiply+0x92>
 800592c:	f105 0c14 	add.w	ip, r5, #20
 8005930:	f104 0314 	add.w	r3, r4, #20
 8005934:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005938:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800593c:	9202      	str	r2, [sp, #8]
 800593e:	ebac 0205 	sub.w	r2, ip, r5
 8005942:	3a15      	subs	r2, #21
 8005944:	f022 0203 	bic.w	r2, r2, #3
 8005948:	3204      	adds	r2, #4
 800594a:	f105 0115 	add.w	r1, r5, #21
 800594e:	458c      	cmp	ip, r1
 8005950:	bf38      	it	cc
 8005952:	2204      	movcc	r2, #4
 8005954:	9201      	str	r2, [sp, #4]
 8005956:	9a02      	ldr	r2, [sp, #8]
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	429a      	cmp	r2, r3
 800595c:	d808      	bhi.n	8005970 <__multiply+0x98>
 800595e:	2f00      	cmp	r7, #0
 8005960:	dc55      	bgt.n	8005a0e <__multiply+0x136>
 8005962:	6107      	str	r7, [r0, #16]
 8005964:	b005      	add	sp, #20
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	f843 2b04 	str.w	r2, [r3], #4
 800596e:	e7db      	b.n	8005928 <__multiply+0x50>
 8005970:	f8b3 a000 	ldrh.w	sl, [r3]
 8005974:	f1ba 0f00 	cmp.w	sl, #0
 8005978:	d020      	beq.n	80059bc <__multiply+0xe4>
 800597a:	f105 0e14 	add.w	lr, r5, #20
 800597e:	46b1      	mov	r9, r6
 8005980:	2200      	movs	r2, #0
 8005982:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005986:	f8d9 b000 	ldr.w	fp, [r9]
 800598a:	b2a1      	uxth	r1, r4
 800598c:	fa1f fb8b 	uxth.w	fp, fp
 8005990:	fb0a b101 	mla	r1, sl, r1, fp
 8005994:	4411      	add	r1, r2
 8005996:	f8d9 2000 	ldr.w	r2, [r9]
 800599a:	0c24      	lsrs	r4, r4, #16
 800599c:	0c12      	lsrs	r2, r2, #16
 800599e:	fb0a 2404 	mla	r4, sl, r4, r2
 80059a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059a6:	b289      	uxth	r1, r1
 80059a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059ac:	45f4      	cmp	ip, lr
 80059ae:	f849 1b04 	str.w	r1, [r9], #4
 80059b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059b6:	d8e4      	bhi.n	8005982 <__multiply+0xaa>
 80059b8:	9901      	ldr	r1, [sp, #4]
 80059ba:	5072      	str	r2, [r6, r1]
 80059bc:	9a03      	ldr	r2, [sp, #12]
 80059be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c2:	3304      	adds	r3, #4
 80059c4:	f1b9 0f00 	cmp.w	r9, #0
 80059c8:	d01f      	beq.n	8005a0a <__multiply+0x132>
 80059ca:	6834      	ldr	r4, [r6, #0]
 80059cc:	f105 0114 	add.w	r1, r5, #20
 80059d0:	46b6      	mov	lr, r6
 80059d2:	f04f 0a00 	mov.w	sl, #0
 80059d6:	880a      	ldrh	r2, [r1, #0]
 80059d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059dc:	fb09 b202 	mla	r2, r9, r2, fp
 80059e0:	4492      	add	sl, r2
 80059e2:	b2a4      	uxth	r4, r4
 80059e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059e8:	f84e 4b04 	str.w	r4, [lr], #4
 80059ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80059f0:	f8be 2000 	ldrh.w	r2, [lr]
 80059f4:	0c24      	lsrs	r4, r4, #16
 80059f6:	fb09 2404 	mla	r4, r9, r4, r2
 80059fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80059fe:	458c      	cmp	ip, r1
 8005a00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a04:	d8e7      	bhi.n	80059d6 <__multiply+0xfe>
 8005a06:	9a01      	ldr	r2, [sp, #4]
 8005a08:	50b4      	str	r4, [r6, r2]
 8005a0a:	3604      	adds	r6, #4
 8005a0c:	e7a3      	b.n	8005956 <__multiply+0x7e>
 8005a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1a5      	bne.n	8005962 <__multiply+0x8a>
 8005a16:	3f01      	subs	r7, #1
 8005a18:	e7a1      	b.n	800595e <__multiply+0x86>
 8005a1a:	bf00      	nop
 8005a1c:	080079ef 	.word	0x080079ef
 8005a20:	08007a00 	.word	0x08007a00

08005a24 <__pow5mult>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4615      	mov	r5, r2
 8005a2a:	f012 0203 	ands.w	r2, r2, #3
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	d007      	beq.n	8005a44 <__pow5mult+0x20>
 8005a34:	4c25      	ldr	r4, [pc, #148]	; (8005acc <__pow5mult+0xa8>)
 8005a36:	3a01      	subs	r2, #1
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a3e:	f7ff fe9b 	bl	8005778 <__multadd>
 8005a42:	4607      	mov	r7, r0
 8005a44:	10ad      	asrs	r5, r5, #2
 8005a46:	d03d      	beq.n	8005ac4 <__pow5mult+0xa0>
 8005a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a4a:	b97c      	cbnz	r4, 8005a6c <__pow5mult+0x48>
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f7ff fe1b 	bl	8005688 <malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6270      	str	r0, [r6, #36]	; 0x24
 8005a56:	b928      	cbnz	r0, 8005a64 <__pow5mult+0x40>
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <__pow5mult+0xac>)
 8005a5a:	481e      	ldr	r0, [pc, #120]	; (8005ad4 <__pow5mult+0xb0>)
 8005a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a60:	f000 fbcc 	bl	80061fc <__assert_func>
 8005a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a68:	6004      	str	r4, [r0, #0]
 8005a6a:	60c4      	str	r4, [r0, #12]
 8005a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a74:	b94c      	cbnz	r4, 8005a8a <__pow5mult+0x66>
 8005a76:	f240 2171 	movw	r1, #625	; 0x271
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f7ff ff16 	bl	80058ac <__i2b>
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a86:	4604      	mov	r4, r0
 8005a88:	6003      	str	r3, [r0, #0]
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	07eb      	lsls	r3, r5, #31
 8005a90:	d50a      	bpl.n	8005aa8 <__pow5mult+0x84>
 8005a92:	4639      	mov	r1, r7
 8005a94:	4622      	mov	r2, r4
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ff1e 	bl	80058d8 <__multiply>
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff fe47 	bl	8005734 <_Bfree>
 8005aa6:	4647      	mov	r7, r8
 8005aa8:	106d      	asrs	r5, r5, #1
 8005aaa:	d00b      	beq.n	8005ac4 <__pow5mult+0xa0>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	b938      	cbnz	r0, 8005ac0 <__pow5mult+0x9c>
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff ff0f 	bl	80058d8 <__multiply>
 8005aba:	6020      	str	r0, [r4, #0]
 8005abc:	f8c0 9000 	str.w	r9, [r0]
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	e7e4      	b.n	8005a8e <__pow5mult+0x6a>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aca:	bf00      	nop
 8005acc:	08007b50 	.word	0x08007b50
 8005ad0:	08007979 	.word	0x08007979
 8005ad4:	08007a00 	.word	0x08007a00

08005ad8 <__lshift>:
 8005ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	6849      	ldr	r1, [r1, #4]
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ae6:	68a3      	ldr	r3, [r4, #8]
 8005ae8:	4607      	mov	r7, r0
 8005aea:	4691      	mov	r9, r2
 8005aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af0:	f108 0601 	add.w	r6, r8, #1
 8005af4:	42b3      	cmp	r3, r6
 8005af6:	db0b      	blt.n	8005b10 <__lshift+0x38>
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff fddb 	bl	80056b4 <_Balloc>
 8005afe:	4605      	mov	r5, r0
 8005b00:	b948      	cbnz	r0, 8005b16 <__lshift+0x3e>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <__lshift+0xd0>)
 8005b06:	4829      	ldr	r0, [pc, #164]	; (8005bac <__lshift+0xd4>)
 8005b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b0c:	f000 fb76 	bl	80061fc <__assert_func>
 8005b10:	3101      	adds	r1, #1
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	e7ee      	b.n	8005af4 <__lshift+0x1c>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f100 0114 	add.w	r1, r0, #20
 8005b1c:	f100 0210 	add.w	r2, r0, #16
 8005b20:	4618      	mov	r0, r3
 8005b22:	4553      	cmp	r3, sl
 8005b24:	db33      	blt.n	8005b8e <__lshift+0xb6>
 8005b26:	6920      	ldr	r0, [r4, #16]
 8005b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b2c:	f104 0314 	add.w	r3, r4, #20
 8005b30:	f019 091f 	ands.w	r9, r9, #31
 8005b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b3c:	d02b      	beq.n	8005b96 <__lshift+0xbe>
 8005b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005b42:	468a      	mov	sl, r1
 8005b44:	2200      	movs	r2, #0
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	fa00 f009 	lsl.w	r0, r0, r9
 8005b4c:	4302      	orrs	r2, r0
 8005b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	459c      	cmp	ip, r3
 8005b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b5c:	d8f3      	bhi.n	8005b46 <__lshift+0x6e>
 8005b5e:	ebac 0304 	sub.w	r3, ip, r4
 8005b62:	3b15      	subs	r3, #21
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	3304      	adds	r3, #4
 8005b6a:	f104 0015 	add.w	r0, r4, #21
 8005b6e:	4584      	cmp	ip, r0
 8005b70:	bf38      	it	cc
 8005b72:	2304      	movcc	r3, #4
 8005b74:	50ca      	str	r2, [r1, r3]
 8005b76:	b10a      	cbz	r2, 8005b7c <__lshift+0xa4>
 8005b78:	f108 0602 	add.w	r6, r8, #2
 8005b7c:	3e01      	subs	r6, #1
 8005b7e:	4638      	mov	r0, r7
 8005b80:	612e      	str	r6, [r5, #16]
 8005b82:	4621      	mov	r1, r4
 8005b84:	f7ff fdd6 	bl	8005734 <_Bfree>
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b92:	3301      	adds	r3, #1
 8005b94:	e7c5      	b.n	8005b22 <__lshift+0x4a>
 8005b96:	3904      	subs	r1, #4
 8005b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba0:	459c      	cmp	ip, r3
 8005ba2:	d8f9      	bhi.n	8005b98 <__lshift+0xc0>
 8005ba4:	e7ea      	b.n	8005b7c <__lshift+0xa4>
 8005ba6:	bf00      	nop
 8005ba8:	080079ef 	.word	0x080079ef
 8005bac:	08007a00 	.word	0x08007a00

08005bb0 <__mcmp>:
 8005bb0:	b530      	push	{r4, r5, lr}
 8005bb2:	6902      	ldr	r2, [r0, #16]
 8005bb4:	690c      	ldr	r4, [r1, #16]
 8005bb6:	1b12      	subs	r2, r2, r4
 8005bb8:	d10e      	bne.n	8005bd8 <__mcmp+0x28>
 8005bba:	f100 0314 	add.w	r3, r0, #20
 8005bbe:	3114      	adds	r1, #20
 8005bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd0:	42a5      	cmp	r5, r4
 8005bd2:	d003      	beq.n	8005bdc <__mcmp+0x2c>
 8005bd4:	d305      	bcc.n	8005be2 <__mcmp+0x32>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4610      	mov	r0, r2
 8005bda:	bd30      	pop	{r4, r5, pc}
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	d3f3      	bcc.n	8005bc8 <__mcmp+0x18>
 8005be0:	e7fa      	b.n	8005bd8 <__mcmp+0x28>
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	e7f7      	b.n	8005bd8 <__mcmp+0x28>

08005be8 <__mdiff>:
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460c      	mov	r4, r1
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4617      	mov	r7, r2
 8005bf6:	f7ff ffdb 	bl	8005bb0 <__mcmp>
 8005bfa:	1e05      	subs	r5, r0, #0
 8005bfc:	d110      	bne.n	8005c20 <__mdiff+0x38>
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4630      	mov	r0, r6
 8005c02:	f7ff fd57 	bl	80056b4 <_Balloc>
 8005c06:	b930      	cbnz	r0, 8005c16 <__mdiff+0x2e>
 8005c08:	4b39      	ldr	r3, [pc, #228]	; (8005cf0 <__mdiff+0x108>)
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f240 2132 	movw	r1, #562	; 0x232
 8005c10:	4838      	ldr	r0, [pc, #224]	; (8005cf4 <__mdiff+0x10c>)
 8005c12:	f000 faf3 	bl	80061fc <__assert_func>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	bfa4      	itt	ge
 8005c22:	463b      	movge	r3, r7
 8005c24:	4627      	movge	r7, r4
 8005c26:	4630      	mov	r0, r6
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	bfa6      	itte	ge
 8005c2c:	461c      	movge	r4, r3
 8005c2e:	2500      	movge	r5, #0
 8005c30:	2501      	movlt	r5, #1
 8005c32:	f7ff fd3f 	bl	80056b4 <_Balloc>
 8005c36:	b920      	cbnz	r0, 8005c42 <__mdiff+0x5a>
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <__mdiff+0x108>)
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c40:	e7e6      	b.n	8005c10 <__mdiff+0x28>
 8005c42:	693e      	ldr	r6, [r7, #16]
 8005c44:	60c5      	str	r5, [r0, #12]
 8005c46:	6925      	ldr	r5, [r4, #16]
 8005c48:	f107 0114 	add.w	r1, r7, #20
 8005c4c:	f104 0914 	add.w	r9, r4, #20
 8005c50:	f100 0e14 	add.w	lr, r0, #20
 8005c54:	f107 0210 	add.w	r2, r7, #16
 8005c58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005c5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005c60:	46f2      	mov	sl, lr
 8005c62:	2700      	movs	r7, #0
 8005c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c6c:	fa1f f883 	uxth.w	r8, r3
 8005c70:	fa17 f78b 	uxtah	r7, r7, fp
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	eba7 0808 	sub.w	r8, r7, r8
 8005c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c82:	fa1f f888 	uxth.w	r8, r8
 8005c86:	141f      	asrs	r7, r3, #16
 8005c88:	454d      	cmp	r5, r9
 8005c8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8005c92:	d8e7      	bhi.n	8005c64 <__mdiff+0x7c>
 8005c94:	1b2b      	subs	r3, r5, r4
 8005c96:	3b15      	subs	r3, #21
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	3415      	adds	r4, #21
 8005ca0:	42a5      	cmp	r5, r4
 8005ca2:	bf38      	it	cc
 8005ca4:	2304      	movcc	r3, #4
 8005ca6:	4419      	add	r1, r3
 8005ca8:	4473      	add	r3, lr
 8005caa:	469e      	mov	lr, r3
 8005cac:	460d      	mov	r5, r1
 8005cae:	4565      	cmp	r5, ip
 8005cb0:	d30e      	bcc.n	8005cd0 <__mdiff+0xe8>
 8005cb2:	f10c 0203 	add.w	r2, ip, #3
 8005cb6:	1a52      	subs	r2, r2, r1
 8005cb8:	f022 0203 	bic.w	r2, r2, #3
 8005cbc:	3903      	subs	r1, #3
 8005cbe:	458c      	cmp	ip, r1
 8005cc0:	bf38      	it	cc
 8005cc2:	2200      	movcc	r2, #0
 8005cc4:	441a      	add	r2, r3
 8005cc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cca:	b17b      	cbz	r3, 8005cec <__mdiff+0x104>
 8005ccc:	6106      	str	r6, [r0, #16]
 8005cce:	e7a5      	b.n	8005c1c <__mdiff+0x34>
 8005cd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8005cd4:	fa17 f488 	uxtah	r4, r7, r8
 8005cd8:	1422      	asrs	r2, r4, #16
 8005cda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005cde:	b2a4      	uxth	r4, r4
 8005ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ce4:	f84e 4b04 	str.w	r4, [lr], #4
 8005ce8:	1417      	asrs	r7, r2, #16
 8005cea:	e7e0      	b.n	8005cae <__mdiff+0xc6>
 8005cec:	3e01      	subs	r6, #1
 8005cee:	e7ea      	b.n	8005cc6 <__mdiff+0xde>
 8005cf0:	080079ef 	.word	0x080079ef
 8005cf4:	08007a00 	.word	0x08007a00

08005cf8 <__d2b>:
 8005cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	2101      	movs	r1, #1
 8005d00:	ec57 6b10 	vmov	r6, r7, d0
 8005d04:	4690      	mov	r8, r2
 8005d06:	f7ff fcd5 	bl	80056b4 <_Balloc>
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	b930      	cbnz	r0, 8005d1c <__d2b+0x24>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <__d2b+0xb0>)
 8005d12:	4826      	ldr	r0, [pc, #152]	; (8005dac <__d2b+0xb4>)
 8005d14:	f240 310a 	movw	r1, #778	; 0x30a
 8005d18:	f000 fa70 	bl	80061fc <__assert_func>
 8005d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d24:	bb35      	cbnz	r5, 8005d74 <__d2b+0x7c>
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	d028      	beq.n	8005d7e <__d2b+0x86>
 8005d2c:	4668      	mov	r0, sp
 8005d2e:	9600      	str	r6, [sp, #0]
 8005d30:	f7ff fd8c 	bl	800584c <__lo0bits>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	b300      	cbz	r0, 8005d7a <__d2b+0x82>
 8005d38:	9a01      	ldr	r2, [sp, #4]
 8005d3a:	f1c0 0320 	rsb	r3, r0, #32
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	430b      	orrs	r3, r1
 8005d44:	40c2      	lsrs	r2, r0
 8005d46:	6163      	str	r3, [r4, #20]
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	61a3      	str	r3, [r4, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2202      	movne	r2, #2
 8005d54:	2201      	moveq	r2, #1
 8005d56:	6122      	str	r2, [r4, #16]
 8005d58:	b1d5      	cbz	r5, 8005d90 <__d2b+0x98>
 8005d5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d5e:	4405      	add	r5, r0
 8005d60:	f8c9 5000 	str.w	r5, [r9]
 8005d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d68:	f8c8 0000 	str.w	r0, [r8]
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	b003      	add	sp, #12
 8005d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d78:	e7d5      	b.n	8005d26 <__d2b+0x2e>
 8005d7a:	6161      	str	r1, [r4, #20]
 8005d7c:	e7e5      	b.n	8005d4a <__d2b+0x52>
 8005d7e:	a801      	add	r0, sp, #4
 8005d80:	f7ff fd64 	bl	800584c <__lo0bits>
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	6163      	str	r3, [r4, #20]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	6122      	str	r2, [r4, #16]
 8005d8c:	3020      	adds	r0, #32
 8005d8e:	e7e3      	b.n	8005d58 <__d2b+0x60>
 8005d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d98:	f8c9 0000 	str.w	r0, [r9]
 8005d9c:	6918      	ldr	r0, [r3, #16]
 8005d9e:	f7ff fd35 	bl	800580c <__hi0bits>
 8005da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005da6:	e7df      	b.n	8005d68 <__d2b+0x70>
 8005da8:	080079ef 	.word	0x080079ef
 8005dac:	08007a00 	.word	0x08007a00

08005db0 <_calloc_r>:
 8005db0:	b513      	push	{r0, r1, r4, lr}
 8005db2:	434a      	muls	r2, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	9201      	str	r2, [sp, #4]
 8005db8:	f000 f85a 	bl	8005e70 <_malloc_r>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <_calloc_r+0x18>
 8005dc0:	9a01      	ldr	r2, [sp, #4]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f7fe f952 	bl	800406c <memset>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	b002      	add	sp, #8
 8005dcc:	bd10      	pop	{r4, pc}
	...

08005dd0 <_free_r>:
 8005dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d048      	beq.n	8005e68 <_free_r+0x98>
 8005dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dda:	9001      	str	r0, [sp, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f1a1 0404 	sub.w	r4, r1, #4
 8005de2:	bfb8      	it	lt
 8005de4:	18e4      	addlt	r4, r4, r3
 8005de6:	f000 fa65 	bl	80062b4 <__malloc_lock>
 8005dea:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <_free_r+0x9c>)
 8005dec:	9801      	ldr	r0, [sp, #4]
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	4615      	mov	r5, r2
 8005df2:	b933      	cbnz	r3, 8005e02 <_free_r+0x32>
 8005df4:	6063      	str	r3, [r4, #4]
 8005df6:	6014      	str	r4, [r2, #0]
 8005df8:	b003      	add	sp, #12
 8005dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dfe:	f000 ba5f 	b.w	80062c0 <__malloc_unlock>
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	d90b      	bls.n	8005e1e <_free_r+0x4e>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	1862      	adds	r2, r4, r1
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	bf04      	itt	eq
 8005e0e:	681a      	ldreq	r2, [r3, #0]
 8005e10:	685b      	ldreq	r3, [r3, #4]
 8005e12:	6063      	str	r3, [r4, #4]
 8005e14:	bf04      	itt	eq
 8005e16:	1852      	addeq	r2, r2, r1
 8005e18:	6022      	streq	r2, [r4, #0]
 8005e1a:	602c      	str	r4, [r5, #0]
 8005e1c:	e7ec      	b.n	8005df8 <_free_r+0x28>
 8005e1e:	461a      	mov	r2, r3
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b10b      	cbz	r3, 8005e28 <_free_r+0x58>
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d9fa      	bls.n	8005e1e <_free_r+0x4e>
 8005e28:	6811      	ldr	r1, [r2, #0]
 8005e2a:	1855      	adds	r5, r2, r1
 8005e2c:	42a5      	cmp	r5, r4
 8005e2e:	d10b      	bne.n	8005e48 <_free_r+0x78>
 8005e30:	6824      	ldr	r4, [r4, #0]
 8005e32:	4421      	add	r1, r4
 8005e34:	1854      	adds	r4, r2, r1
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	d1dd      	bne.n	8005df8 <_free_r+0x28>
 8005e3c:	681c      	ldr	r4, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	6053      	str	r3, [r2, #4]
 8005e42:	4421      	add	r1, r4
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	e7d7      	b.n	8005df8 <_free_r+0x28>
 8005e48:	d902      	bls.n	8005e50 <_free_r+0x80>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	6003      	str	r3, [r0, #0]
 8005e4e:	e7d3      	b.n	8005df8 <_free_r+0x28>
 8005e50:	6825      	ldr	r5, [r4, #0]
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	428b      	cmp	r3, r1
 8005e56:	bf04      	itt	eq
 8005e58:	6819      	ldreq	r1, [r3, #0]
 8005e5a:	685b      	ldreq	r3, [r3, #4]
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	bf04      	itt	eq
 8005e60:	1949      	addeq	r1, r1, r5
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	6054      	str	r4, [r2, #4]
 8005e66:	e7c7      	b.n	8005df8 <_free_r+0x28>
 8005e68:	b003      	add	sp, #12
 8005e6a:	bd30      	pop	{r4, r5, pc}
 8005e6c:	200001fc 	.word	0x200001fc

08005e70 <_malloc_r>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	1ccd      	adds	r5, r1, #3
 8005e74:	f025 0503 	bic.w	r5, r5, #3
 8005e78:	3508      	adds	r5, #8
 8005e7a:	2d0c      	cmp	r5, #12
 8005e7c:	bf38      	it	cc
 8005e7e:	250c      	movcc	r5, #12
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	4606      	mov	r6, r0
 8005e84:	db01      	blt.n	8005e8a <_malloc_r+0x1a>
 8005e86:	42a9      	cmp	r1, r5
 8005e88:	d903      	bls.n	8005e92 <_malloc_r+0x22>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	2000      	movs	r0, #0
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	f000 fa0f 	bl	80062b4 <__malloc_lock>
 8005e96:	4921      	ldr	r1, [pc, #132]	; (8005f1c <_malloc_r+0xac>)
 8005e98:	680a      	ldr	r2, [r1, #0]
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	b99c      	cbnz	r4, 8005ec6 <_malloc_r+0x56>
 8005e9e:	4f20      	ldr	r7, [pc, #128]	; (8005f20 <_malloc_r+0xb0>)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b923      	cbnz	r3, 8005eae <_malloc_r+0x3e>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f000 f998 	bl	80061dc <_sbrk_r>
 8005eac:	6038      	str	r0, [r7, #0]
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 f993 	bl	80061dc <_sbrk_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d123      	bne.n	8005f02 <_malloc_r+0x92>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f000 f9fe 	bl	80062c0 <__malloc_unlock>
 8005ec4:	e7e3      	b.n	8005e8e <_malloc_r+0x1e>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	1b5b      	subs	r3, r3, r5
 8005eca:	d417      	bmi.n	8005efc <_malloc_r+0x8c>
 8005ecc:	2b0b      	cmp	r3, #11
 8005ece:	d903      	bls.n	8005ed8 <_malloc_r+0x68>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	441c      	add	r4, r3
 8005ed4:	6025      	str	r5, [r4, #0]
 8005ed6:	e004      	b.n	8005ee2 <_malloc_r+0x72>
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	42a2      	cmp	r2, r4
 8005edc:	bf0c      	ite	eq
 8005ede:	600b      	streq	r3, [r1, #0]
 8005ee0:	6053      	strne	r3, [r2, #4]
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f9ec 	bl	80062c0 <__malloc_unlock>
 8005ee8:	f104 000b 	add.w	r0, r4, #11
 8005eec:	1d23      	adds	r3, r4, #4
 8005eee:	f020 0007 	bic.w	r0, r0, #7
 8005ef2:	1ac2      	subs	r2, r0, r3
 8005ef4:	d0cc      	beq.n	8005e90 <_malloc_r+0x20>
 8005ef6:	1a1b      	subs	r3, r3, r0
 8005ef8:	50a3      	str	r3, [r4, r2]
 8005efa:	e7c9      	b.n	8005e90 <_malloc_r+0x20>
 8005efc:	4622      	mov	r2, r4
 8005efe:	6864      	ldr	r4, [r4, #4]
 8005f00:	e7cc      	b.n	8005e9c <_malloc_r+0x2c>
 8005f02:	1cc4      	adds	r4, r0, #3
 8005f04:	f024 0403 	bic.w	r4, r4, #3
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d0e3      	beq.n	8005ed4 <_malloc_r+0x64>
 8005f0c:	1a21      	subs	r1, r4, r0
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f000 f964 	bl	80061dc <_sbrk_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d1dd      	bne.n	8005ed4 <_malloc_r+0x64>
 8005f18:	e7cf      	b.n	8005eba <_malloc_r+0x4a>
 8005f1a:	bf00      	nop
 8005f1c:	200001fc 	.word	0x200001fc
 8005f20:	20000200 	.word	0x20000200

08005f24 <__ssputs_r>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	688e      	ldr	r6, [r1, #8]
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4690      	mov	r8, r2
 8005f32:	461f      	mov	r7, r3
 8005f34:	d838      	bhi.n	8005fa8 <__ssputs_r+0x84>
 8005f36:	898a      	ldrh	r2, [r1, #12]
 8005f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f3c:	d032      	beq.n	8005fa4 <__ssputs_r+0x80>
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	6909      	ldr	r1, [r1, #16]
 8005f42:	eba5 0901 	sub.w	r9, r5, r1
 8005f46:	6965      	ldr	r5, [r4, #20]
 8005f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f50:	3301      	adds	r3, #1
 8005f52:	444b      	add	r3, r9
 8005f54:	106d      	asrs	r5, r5, #1
 8005f56:	429d      	cmp	r5, r3
 8005f58:	bf38      	it	cc
 8005f5a:	461d      	movcc	r5, r3
 8005f5c:	0553      	lsls	r3, r2, #21
 8005f5e:	d531      	bpl.n	8005fc4 <__ssputs_r+0xa0>
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7ff ff85 	bl	8005e70 <_malloc_r>
 8005f66:	4606      	mov	r6, r0
 8005f68:	b950      	cbnz	r0, 8005f80 <__ssputs_r+0x5c>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	f8ca 3000 	str.w	r3, [sl]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	6921      	ldr	r1, [r4, #16]
 8005f82:	464a      	mov	r2, r9
 8005f84:	f7ff fb88 	bl	8005698 <memcpy>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	6126      	str	r6, [r4, #16]
 8005f96:	6165      	str	r5, [r4, #20]
 8005f98:	444e      	add	r6, r9
 8005f9a:	eba5 0509 	sub.w	r5, r5, r9
 8005f9e:	6026      	str	r6, [r4, #0]
 8005fa0:	60a5      	str	r5, [r4, #8]
 8005fa2:	463e      	mov	r6, r7
 8005fa4:	42be      	cmp	r6, r7
 8005fa6:	d900      	bls.n	8005faa <__ssputs_r+0x86>
 8005fa8:	463e      	mov	r6, r7
 8005faa:	4632      	mov	r2, r6
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	4641      	mov	r1, r8
 8005fb0:	f000 f966 	bl	8006280 <memmove>
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	1b9b      	subs	r3, r3, r6
 8005fba:	4432      	add	r2, r6
 8005fbc:	60a3      	str	r3, [r4, #8]
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	e7db      	b.n	8005f7c <__ssputs_r+0x58>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	f000 f981 	bl	80062cc <_realloc_r>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d1e1      	bne.n	8005f94 <__ssputs_r+0x70>
 8005fd0:	6921      	ldr	r1, [r4, #16]
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f7ff fefc 	bl	8005dd0 <_free_r>
 8005fd8:	e7c7      	b.n	8005f6a <__ssputs_r+0x46>
	...

08005fdc <_svfiprintf_r>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	898b      	ldrh	r3, [r1, #12]
 8005fe4:	061b      	lsls	r3, r3, #24
 8005fe6:	b09d      	sub	sp, #116	; 0x74
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	4614      	mov	r4, r2
 8005fee:	d50e      	bpl.n	800600e <_svfiprintf_r+0x32>
 8005ff0:	690b      	ldr	r3, [r1, #16]
 8005ff2:	b963      	cbnz	r3, 800600e <_svfiprintf_r+0x32>
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	f7ff ff3b 	bl	8005e70 <_malloc_r>
 8005ffa:	6028      	str	r0, [r5, #0]
 8005ffc:	6128      	str	r0, [r5, #16]
 8005ffe:	b920      	cbnz	r0, 800600a <_svfiprintf_r+0x2e>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	e0d1      	b.n	80061ae <_svfiprintf_r+0x1d2>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	616b      	str	r3, [r5, #20]
 800600e:	2300      	movs	r3, #0
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	2320      	movs	r3, #32
 8006014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006018:	f8cd 800c 	str.w	r8, [sp, #12]
 800601c:	2330      	movs	r3, #48	; 0x30
 800601e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061c8 <_svfiprintf_r+0x1ec>
 8006022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006026:	f04f 0901 	mov.w	r9, #1
 800602a:	4623      	mov	r3, r4
 800602c:	469a      	mov	sl, r3
 800602e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006032:	b10a      	cbz	r2, 8006038 <_svfiprintf_r+0x5c>
 8006034:	2a25      	cmp	r2, #37	; 0x25
 8006036:	d1f9      	bne.n	800602c <_svfiprintf_r+0x50>
 8006038:	ebba 0b04 	subs.w	fp, sl, r4
 800603c:	d00b      	beq.n	8006056 <_svfiprintf_r+0x7a>
 800603e:	465b      	mov	r3, fp
 8006040:	4622      	mov	r2, r4
 8006042:	4629      	mov	r1, r5
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff6d 	bl	8005f24 <__ssputs_r>
 800604a:	3001      	adds	r0, #1
 800604c:	f000 80aa 	beq.w	80061a4 <_svfiprintf_r+0x1c8>
 8006050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006052:	445a      	add	r2, fp
 8006054:	9209      	str	r2, [sp, #36]	; 0x24
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80a2 	beq.w	80061a4 <_svfiprintf_r+0x1c8>
 8006060:	2300      	movs	r3, #0
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606a:	f10a 0a01 	add.w	sl, sl, #1
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006076:	931a      	str	r3, [sp, #104]	; 0x68
 8006078:	4654      	mov	r4, sl
 800607a:	2205      	movs	r2, #5
 800607c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006080:	4851      	ldr	r0, [pc, #324]	; (80061c8 <_svfiprintf_r+0x1ec>)
 8006082:	f7fa f8b5 	bl	80001f0 <memchr>
 8006086:	9a04      	ldr	r2, [sp, #16]
 8006088:	b9d8      	cbnz	r0, 80060c2 <_svfiprintf_r+0xe6>
 800608a:	06d0      	lsls	r0, r2, #27
 800608c:	bf44      	itt	mi
 800608e:	2320      	movmi	r3, #32
 8006090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006094:	0711      	lsls	r1, r2, #28
 8006096:	bf44      	itt	mi
 8006098:	232b      	movmi	r3, #43	; 0x2b
 800609a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b2a      	cmp	r3, #42	; 0x2a
 80060a4:	d015      	beq.n	80060d2 <_svfiprintf_r+0xf6>
 80060a6:	9a07      	ldr	r2, [sp, #28]
 80060a8:	4654      	mov	r4, sl
 80060aa:	2000      	movs	r0, #0
 80060ac:	f04f 0c0a 	mov.w	ip, #10
 80060b0:	4621      	mov	r1, r4
 80060b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b6:	3b30      	subs	r3, #48	; 0x30
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d94e      	bls.n	800615a <_svfiprintf_r+0x17e>
 80060bc:	b1b0      	cbz	r0, 80060ec <_svfiprintf_r+0x110>
 80060be:	9207      	str	r2, [sp, #28]
 80060c0:	e014      	b.n	80060ec <_svfiprintf_r+0x110>
 80060c2:	eba0 0308 	sub.w	r3, r0, r8
 80060c6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ca:	4313      	orrs	r3, r2
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	46a2      	mov	sl, r4
 80060d0:	e7d2      	b.n	8006078 <_svfiprintf_r+0x9c>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	1d19      	adds	r1, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9103      	str	r1, [sp, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfbb      	ittet	lt
 80060de:	425b      	neglt	r3, r3
 80060e0:	f042 0202 	orrlt.w	r2, r2, #2
 80060e4:	9307      	strge	r3, [sp, #28]
 80060e6:	9307      	strlt	r3, [sp, #28]
 80060e8:	bfb8      	it	lt
 80060ea:	9204      	strlt	r2, [sp, #16]
 80060ec:	7823      	ldrb	r3, [r4, #0]
 80060ee:	2b2e      	cmp	r3, #46	; 0x2e
 80060f0:	d10c      	bne.n	800610c <_svfiprintf_r+0x130>
 80060f2:	7863      	ldrb	r3, [r4, #1]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d135      	bne.n	8006164 <_svfiprintf_r+0x188>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	9203      	str	r2, [sp, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	bfb8      	it	lt
 8006104:	f04f 33ff 	movlt.w	r3, #4294967295
 8006108:	3402      	adds	r4, #2
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061d8 <_svfiprintf_r+0x1fc>
 8006110:	7821      	ldrb	r1, [r4, #0]
 8006112:	2203      	movs	r2, #3
 8006114:	4650      	mov	r0, sl
 8006116:	f7fa f86b 	bl	80001f0 <memchr>
 800611a:	b140      	cbz	r0, 800612e <_svfiprintf_r+0x152>
 800611c:	2340      	movs	r3, #64	; 0x40
 800611e:	eba0 000a 	sub.w	r0, r0, sl
 8006122:	fa03 f000 	lsl.w	r0, r3, r0
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	4303      	orrs	r3, r0
 800612a:	3401      	adds	r4, #1
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006132:	4826      	ldr	r0, [pc, #152]	; (80061cc <_svfiprintf_r+0x1f0>)
 8006134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006138:	2206      	movs	r2, #6
 800613a:	f7fa f859 	bl	80001f0 <memchr>
 800613e:	2800      	cmp	r0, #0
 8006140:	d038      	beq.n	80061b4 <_svfiprintf_r+0x1d8>
 8006142:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <_svfiprintf_r+0x1f4>)
 8006144:	bb1b      	cbnz	r3, 800618e <_svfiprintf_r+0x1b2>
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	3307      	adds	r3, #7
 800614a:	f023 0307 	bic.w	r3, r3, #7
 800614e:	3308      	adds	r3, #8
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006154:	4433      	add	r3, r6
 8006156:	9309      	str	r3, [sp, #36]	; 0x24
 8006158:	e767      	b.n	800602a <_svfiprintf_r+0x4e>
 800615a:	fb0c 3202 	mla	r2, ip, r2, r3
 800615e:	460c      	mov	r4, r1
 8006160:	2001      	movs	r0, #1
 8006162:	e7a5      	b.n	80060b0 <_svfiprintf_r+0xd4>
 8006164:	2300      	movs	r3, #0
 8006166:	3401      	adds	r4, #1
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	4619      	mov	r1, r3
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4620      	mov	r0, r4
 8006172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006176:	3a30      	subs	r2, #48	; 0x30
 8006178:	2a09      	cmp	r2, #9
 800617a:	d903      	bls.n	8006184 <_svfiprintf_r+0x1a8>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0c5      	beq.n	800610c <_svfiprintf_r+0x130>
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	e7c3      	b.n	800610c <_svfiprintf_r+0x130>
 8006184:	fb0c 2101 	mla	r1, ip, r1, r2
 8006188:	4604      	mov	r4, r0
 800618a:	2301      	movs	r3, #1
 800618c:	e7f0      	b.n	8006170 <_svfiprintf_r+0x194>
 800618e:	ab03      	add	r3, sp, #12
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	462a      	mov	r2, r5
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <_svfiprintf_r+0x1f8>)
 8006196:	a904      	add	r1, sp, #16
 8006198:	4638      	mov	r0, r7
 800619a:	f7fe f80f 	bl	80041bc <_printf_float>
 800619e:	1c42      	adds	r2, r0, #1
 80061a0:	4606      	mov	r6, r0
 80061a2:	d1d6      	bne.n	8006152 <_svfiprintf_r+0x176>
 80061a4:	89ab      	ldrh	r3, [r5, #12]
 80061a6:	065b      	lsls	r3, r3, #25
 80061a8:	f53f af2c 	bmi.w	8006004 <_svfiprintf_r+0x28>
 80061ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ae:	b01d      	add	sp, #116	; 0x74
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	ab03      	add	r3, sp, #12
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	462a      	mov	r2, r5
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <_svfiprintf_r+0x1f8>)
 80061bc:	a904      	add	r1, sp, #16
 80061be:	4638      	mov	r0, r7
 80061c0:	f7fe faa0 	bl	8004704 <_printf_i>
 80061c4:	e7eb      	b.n	800619e <_svfiprintf_r+0x1c2>
 80061c6:	bf00      	nop
 80061c8:	08007b5c 	.word	0x08007b5c
 80061cc:	08007b66 	.word	0x08007b66
 80061d0:	080041bd 	.word	0x080041bd
 80061d4:	08005f25 	.word	0x08005f25
 80061d8:	08007b62 	.word	0x08007b62

080061dc <_sbrk_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d06      	ldr	r5, [pc, #24]	; (80061f8 <_sbrk_r+0x1c>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	602b      	str	r3, [r5, #0]
 80061e8:	f7fb fc40 	bl	8001a6c <_sbrk>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_sbrk_r+0x1a>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_sbrk_r+0x1a>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	20000384 	.word	0x20000384

080061fc <__assert_func>:
 80061fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061fe:	4614      	mov	r4, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <__assert_func+0x2c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4605      	mov	r5, r0
 8006208:	68d8      	ldr	r0, [r3, #12]
 800620a:	b14c      	cbz	r4, 8006220 <__assert_func+0x24>
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <__assert_func+0x30>)
 800620e:	9100      	str	r1, [sp, #0]
 8006210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006214:	4906      	ldr	r1, [pc, #24]	; (8006230 <__assert_func+0x34>)
 8006216:	462b      	mov	r3, r5
 8006218:	f000 f80e 	bl	8006238 <fiprintf>
 800621c:	f000 faa4 	bl	8006768 <abort>
 8006220:	4b04      	ldr	r3, [pc, #16]	; (8006234 <__assert_func+0x38>)
 8006222:	461c      	mov	r4, r3
 8006224:	e7f3      	b.n	800620e <__assert_func+0x12>
 8006226:	bf00      	nop
 8006228:	2000000c 	.word	0x2000000c
 800622c:	08007b6d 	.word	0x08007b6d
 8006230:	08007b7a 	.word	0x08007b7a
 8006234:	08007ba8 	.word	0x08007ba8

08006238 <fiprintf>:
 8006238:	b40e      	push	{r1, r2, r3}
 800623a:	b503      	push	{r0, r1, lr}
 800623c:	4601      	mov	r1, r0
 800623e:	ab03      	add	r3, sp, #12
 8006240:	4805      	ldr	r0, [pc, #20]	; (8006258 <fiprintf+0x20>)
 8006242:	f853 2b04 	ldr.w	r2, [r3], #4
 8006246:	6800      	ldr	r0, [r0, #0]
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	f000 f88f 	bl	800636c <_vfiprintf_r>
 800624e:	b002      	add	sp, #8
 8006250:	f85d eb04 	ldr.w	lr, [sp], #4
 8006254:	b003      	add	sp, #12
 8006256:	4770      	bx	lr
 8006258:	2000000c 	.word	0x2000000c

0800625c <__ascii_mbtowc>:
 800625c:	b082      	sub	sp, #8
 800625e:	b901      	cbnz	r1, 8006262 <__ascii_mbtowc+0x6>
 8006260:	a901      	add	r1, sp, #4
 8006262:	b142      	cbz	r2, 8006276 <__ascii_mbtowc+0x1a>
 8006264:	b14b      	cbz	r3, 800627a <__ascii_mbtowc+0x1e>
 8006266:	7813      	ldrb	r3, [r2, #0]
 8006268:	600b      	str	r3, [r1, #0]
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	1e10      	subs	r0, r2, #0
 800626e:	bf18      	it	ne
 8006270:	2001      	movne	r0, #1
 8006272:	b002      	add	sp, #8
 8006274:	4770      	bx	lr
 8006276:	4610      	mov	r0, r2
 8006278:	e7fb      	b.n	8006272 <__ascii_mbtowc+0x16>
 800627a:	f06f 0001 	mvn.w	r0, #1
 800627e:	e7f8      	b.n	8006272 <__ascii_mbtowc+0x16>

08006280 <memmove>:
 8006280:	4288      	cmp	r0, r1
 8006282:	b510      	push	{r4, lr}
 8006284:	eb01 0402 	add.w	r4, r1, r2
 8006288:	d902      	bls.n	8006290 <memmove+0x10>
 800628a:	4284      	cmp	r4, r0
 800628c:	4623      	mov	r3, r4
 800628e:	d807      	bhi.n	80062a0 <memmove+0x20>
 8006290:	1e43      	subs	r3, r0, #1
 8006292:	42a1      	cmp	r1, r4
 8006294:	d008      	beq.n	80062a8 <memmove+0x28>
 8006296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800629e:	e7f8      	b.n	8006292 <memmove+0x12>
 80062a0:	4402      	add	r2, r0
 80062a2:	4601      	mov	r1, r0
 80062a4:	428a      	cmp	r2, r1
 80062a6:	d100      	bne.n	80062aa <memmove+0x2a>
 80062a8:	bd10      	pop	{r4, pc}
 80062aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062b2:	e7f7      	b.n	80062a4 <memmove+0x24>

080062b4 <__malloc_lock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__malloc_lock+0x8>)
 80062b6:	f000 bc17 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	2000038c 	.word	0x2000038c

080062c0 <__malloc_unlock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__malloc_unlock+0x8>)
 80062c2:	f000 bc12 	b.w	8006aea <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	2000038c 	.word	0x2000038c

080062cc <_realloc_r>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	4607      	mov	r7, r0
 80062d0:	4614      	mov	r4, r2
 80062d2:	460e      	mov	r6, r1
 80062d4:	b921      	cbnz	r1, 80062e0 <_realloc_r+0x14>
 80062d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062da:	4611      	mov	r1, r2
 80062dc:	f7ff bdc8 	b.w	8005e70 <_malloc_r>
 80062e0:	b922      	cbnz	r2, 80062ec <_realloc_r+0x20>
 80062e2:	f7ff fd75 	bl	8005dd0 <_free_r>
 80062e6:	4625      	mov	r5, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ec:	f000 fc62 	bl	8006bb4 <_malloc_usable_size_r>
 80062f0:	42a0      	cmp	r0, r4
 80062f2:	d20f      	bcs.n	8006314 <_realloc_r+0x48>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff fdba 	bl	8005e70 <_malloc_r>
 80062fc:	4605      	mov	r5, r0
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0f2      	beq.n	80062e8 <_realloc_r+0x1c>
 8006302:	4631      	mov	r1, r6
 8006304:	4622      	mov	r2, r4
 8006306:	f7ff f9c7 	bl	8005698 <memcpy>
 800630a:	4631      	mov	r1, r6
 800630c:	4638      	mov	r0, r7
 800630e:	f7ff fd5f 	bl	8005dd0 <_free_r>
 8006312:	e7e9      	b.n	80062e8 <_realloc_r+0x1c>
 8006314:	4635      	mov	r5, r6
 8006316:	e7e7      	b.n	80062e8 <_realloc_r+0x1c>

08006318 <__sfputc_r>:
 8006318:	6893      	ldr	r3, [r2, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	b410      	push	{r4}
 8006320:	6093      	str	r3, [r2, #8]
 8006322:	da08      	bge.n	8006336 <__sfputc_r+0x1e>
 8006324:	6994      	ldr	r4, [r2, #24]
 8006326:	42a3      	cmp	r3, r4
 8006328:	db01      	blt.n	800632e <__sfputc_r+0x16>
 800632a:	290a      	cmp	r1, #10
 800632c:	d103      	bne.n	8006336 <__sfputc_r+0x1e>
 800632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006332:	f000 b94b 	b.w	80065cc <__swbuf_r>
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	1c58      	adds	r0, r3, #1
 800633a:	6010      	str	r0, [r2, #0]
 800633c:	7019      	strb	r1, [r3, #0]
 800633e:	4608      	mov	r0, r1
 8006340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006344:	4770      	bx	lr

08006346 <__sfputs_r>:
 8006346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	4614      	mov	r4, r2
 800634e:	18d5      	adds	r5, r2, r3
 8006350:	42ac      	cmp	r4, r5
 8006352:	d101      	bne.n	8006358 <__sfputs_r+0x12>
 8006354:	2000      	movs	r0, #0
 8006356:	e007      	b.n	8006368 <__sfputs_r+0x22>
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	463a      	mov	r2, r7
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ffda 	bl	8006318 <__sfputc_r>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d1f3      	bne.n	8006350 <__sfputs_r+0xa>
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800636c <_vfiprintf_r>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	b09d      	sub	sp, #116	; 0x74
 8006374:	4614      	mov	r4, r2
 8006376:	4698      	mov	r8, r3
 8006378:	4606      	mov	r6, r0
 800637a:	b118      	cbz	r0, 8006384 <_vfiprintf_r+0x18>
 800637c:	6983      	ldr	r3, [r0, #24]
 800637e:	b90b      	cbnz	r3, 8006384 <_vfiprintf_r+0x18>
 8006380:	f000 fb14 	bl	80069ac <__sinit>
 8006384:	4b89      	ldr	r3, [pc, #548]	; (80065ac <_vfiprintf_r+0x240>)
 8006386:	429d      	cmp	r5, r3
 8006388:	d11b      	bne.n	80063c2 <_vfiprintf_r+0x56>
 800638a:	6875      	ldr	r5, [r6, #4]
 800638c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800638e:	07d9      	lsls	r1, r3, #31
 8006390:	d405      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	059a      	lsls	r2, r3, #22
 8006396:	d402      	bmi.n	800639e <_vfiprintf_r+0x32>
 8006398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639a:	f000 fba5 	bl	8006ae8 <__retarget_lock_acquire_recursive>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	071b      	lsls	r3, r3, #28
 80063a2:	d501      	bpl.n	80063a8 <_vfiprintf_r+0x3c>
 80063a4:	692b      	ldr	r3, [r5, #16]
 80063a6:	b9eb      	cbnz	r3, 80063e4 <_vfiprintf_r+0x78>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f000 f96e 	bl	800668c <__swsetup_r>
 80063b0:	b1c0      	cbz	r0, 80063e4 <_vfiprintf_r+0x78>
 80063b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b4:	07dc      	lsls	r4, r3, #31
 80063b6:	d50e      	bpl.n	80063d6 <_vfiprintf_r+0x6a>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	b01d      	add	sp, #116	; 0x74
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <_vfiprintf_r+0x244>)
 80063c4:	429d      	cmp	r5, r3
 80063c6:	d101      	bne.n	80063cc <_vfiprintf_r+0x60>
 80063c8:	68b5      	ldr	r5, [r6, #8]
 80063ca:	e7df      	b.n	800638c <_vfiprintf_r+0x20>
 80063cc:	4b79      	ldr	r3, [pc, #484]	; (80065b4 <_vfiprintf_r+0x248>)
 80063ce:	429d      	cmp	r5, r3
 80063d0:	bf08      	it	eq
 80063d2:	68f5      	ldreq	r5, [r6, #12]
 80063d4:	e7da      	b.n	800638c <_vfiprintf_r+0x20>
 80063d6:	89ab      	ldrh	r3, [r5, #12]
 80063d8:	0598      	lsls	r0, r3, #22
 80063da:	d4ed      	bmi.n	80063b8 <_vfiprintf_r+0x4c>
 80063dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063de:	f000 fb84 	bl	8006aea <__retarget_lock_release_recursive>
 80063e2:	e7e9      	b.n	80063b8 <_vfiprintf_r+0x4c>
 80063e4:	2300      	movs	r3, #0
 80063e6:	9309      	str	r3, [sp, #36]	; 0x24
 80063e8:	2320      	movs	r3, #32
 80063ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f2:	2330      	movs	r3, #48	; 0x30
 80063f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065b8 <_vfiprintf_r+0x24c>
 80063f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063fc:	f04f 0901 	mov.w	r9, #1
 8006400:	4623      	mov	r3, r4
 8006402:	469a      	mov	sl, r3
 8006404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006408:	b10a      	cbz	r2, 800640e <_vfiprintf_r+0xa2>
 800640a:	2a25      	cmp	r2, #37	; 0x25
 800640c:	d1f9      	bne.n	8006402 <_vfiprintf_r+0x96>
 800640e:	ebba 0b04 	subs.w	fp, sl, r4
 8006412:	d00b      	beq.n	800642c <_vfiprintf_r+0xc0>
 8006414:	465b      	mov	r3, fp
 8006416:	4622      	mov	r2, r4
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f7ff ff93 	bl	8006346 <__sfputs_r>
 8006420:	3001      	adds	r0, #1
 8006422:	f000 80aa 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006428:	445a      	add	r2, fp
 800642a:	9209      	str	r2, [sp, #36]	; 0x24
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a2 	beq.w	800657a <_vfiprintf_r+0x20e>
 8006436:	2300      	movs	r3, #0
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006440:	f10a 0a01 	add.w	sl, sl, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800644c:	931a      	str	r3, [sp, #104]	; 0x68
 800644e:	4654      	mov	r4, sl
 8006450:	2205      	movs	r2, #5
 8006452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006456:	4858      	ldr	r0, [pc, #352]	; (80065b8 <_vfiprintf_r+0x24c>)
 8006458:	f7f9 feca 	bl	80001f0 <memchr>
 800645c:	9a04      	ldr	r2, [sp, #16]
 800645e:	b9d8      	cbnz	r0, 8006498 <_vfiprintf_r+0x12c>
 8006460:	06d1      	lsls	r1, r2, #27
 8006462:	bf44      	itt	mi
 8006464:	2320      	movmi	r3, #32
 8006466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800646a:	0713      	lsls	r3, r2, #28
 800646c:	bf44      	itt	mi
 800646e:	232b      	movmi	r3, #43	; 0x2b
 8006470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b2a      	cmp	r3, #42	; 0x2a
 800647a:	d015      	beq.n	80064a8 <_vfiprintf_r+0x13c>
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	4654      	mov	r4, sl
 8006480:	2000      	movs	r0, #0
 8006482:	f04f 0c0a 	mov.w	ip, #10
 8006486:	4621      	mov	r1, r4
 8006488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648c:	3b30      	subs	r3, #48	; 0x30
 800648e:	2b09      	cmp	r3, #9
 8006490:	d94e      	bls.n	8006530 <_vfiprintf_r+0x1c4>
 8006492:	b1b0      	cbz	r0, 80064c2 <_vfiprintf_r+0x156>
 8006494:	9207      	str	r2, [sp, #28]
 8006496:	e014      	b.n	80064c2 <_vfiprintf_r+0x156>
 8006498:	eba0 0308 	sub.w	r3, r0, r8
 800649c:	fa09 f303 	lsl.w	r3, r9, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	46a2      	mov	sl, r4
 80064a6:	e7d2      	b.n	800644e <_vfiprintf_r+0xe2>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	1d19      	adds	r1, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	9103      	str	r1, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbb      	ittet	lt
 80064b4:	425b      	neglt	r3, r3
 80064b6:	f042 0202 	orrlt.w	r2, r2, #2
 80064ba:	9307      	strge	r3, [sp, #28]
 80064bc:	9307      	strlt	r3, [sp, #28]
 80064be:	bfb8      	it	lt
 80064c0:	9204      	strlt	r2, [sp, #16]
 80064c2:	7823      	ldrb	r3, [r4, #0]
 80064c4:	2b2e      	cmp	r3, #46	; 0x2e
 80064c6:	d10c      	bne.n	80064e2 <_vfiprintf_r+0x176>
 80064c8:	7863      	ldrb	r3, [r4, #1]
 80064ca:	2b2a      	cmp	r3, #42	; 0x2a
 80064cc:	d135      	bne.n	800653a <_vfiprintf_r+0x1ce>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	9203      	str	r2, [sp, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	f04f 33ff 	movlt.w	r3, #4294967295
 80064de:	3402      	adds	r4, #2
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065c8 <_vfiprintf_r+0x25c>
 80064e6:	7821      	ldrb	r1, [r4, #0]
 80064e8:	2203      	movs	r2, #3
 80064ea:	4650      	mov	r0, sl
 80064ec:	f7f9 fe80 	bl	80001f0 <memchr>
 80064f0:	b140      	cbz	r0, 8006504 <_vfiprintf_r+0x198>
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	eba0 000a 	sub.w	r0, r0, sl
 80064f8:	fa03 f000 	lsl.w	r0, r3, r0
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	4303      	orrs	r3, r0
 8006500:	3401      	adds	r4, #1
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006508:	482c      	ldr	r0, [pc, #176]	; (80065bc <_vfiprintf_r+0x250>)
 800650a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800650e:	2206      	movs	r2, #6
 8006510:	f7f9 fe6e 	bl	80001f0 <memchr>
 8006514:	2800      	cmp	r0, #0
 8006516:	d03f      	beq.n	8006598 <_vfiprintf_r+0x22c>
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <_vfiprintf_r+0x254>)
 800651a:	bb1b      	cbnz	r3, 8006564 <_vfiprintf_r+0x1f8>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	3307      	adds	r3, #7
 8006520:	f023 0307 	bic.w	r3, r3, #7
 8006524:	3308      	adds	r3, #8
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	443b      	add	r3, r7
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	e767      	b.n	8006400 <_vfiprintf_r+0x94>
 8006530:	fb0c 3202 	mla	r2, ip, r2, r3
 8006534:	460c      	mov	r4, r1
 8006536:	2001      	movs	r0, #1
 8006538:	e7a5      	b.n	8006486 <_vfiprintf_r+0x11a>
 800653a:	2300      	movs	r3, #0
 800653c:	3401      	adds	r4, #1
 800653e:	9305      	str	r3, [sp, #20]
 8006540:	4619      	mov	r1, r3
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4620      	mov	r0, r4
 8006548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800654c:	3a30      	subs	r2, #48	; 0x30
 800654e:	2a09      	cmp	r2, #9
 8006550:	d903      	bls.n	800655a <_vfiprintf_r+0x1ee>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c5      	beq.n	80064e2 <_vfiprintf_r+0x176>
 8006556:	9105      	str	r1, [sp, #20]
 8006558:	e7c3      	b.n	80064e2 <_vfiprintf_r+0x176>
 800655a:	fb0c 2101 	mla	r1, ip, r1, r2
 800655e:	4604      	mov	r4, r0
 8006560:	2301      	movs	r3, #1
 8006562:	e7f0      	b.n	8006546 <_vfiprintf_r+0x1da>
 8006564:	ab03      	add	r3, sp, #12
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	462a      	mov	r2, r5
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <_vfiprintf_r+0x258>)
 800656c:	a904      	add	r1, sp, #16
 800656e:	4630      	mov	r0, r6
 8006570:	f7fd fe24 	bl	80041bc <_printf_float>
 8006574:	4607      	mov	r7, r0
 8006576:	1c78      	adds	r0, r7, #1
 8006578:	d1d6      	bne.n	8006528 <_vfiprintf_r+0x1bc>
 800657a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800657c:	07d9      	lsls	r1, r3, #31
 800657e:	d405      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006580:	89ab      	ldrh	r3, [r5, #12]
 8006582:	059a      	lsls	r2, r3, #22
 8006584:	d402      	bmi.n	800658c <_vfiprintf_r+0x220>
 8006586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006588:	f000 faaf 	bl	8006aea <__retarget_lock_release_recursive>
 800658c:	89ab      	ldrh	r3, [r5, #12]
 800658e:	065b      	lsls	r3, r3, #25
 8006590:	f53f af12 	bmi.w	80063b8 <_vfiprintf_r+0x4c>
 8006594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006596:	e711      	b.n	80063bc <_vfiprintf_r+0x50>
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <_vfiprintf_r+0x258>)
 80065a0:	a904      	add	r1, sp, #16
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7fe f8ae 	bl	8004704 <_printf_i>
 80065a8:	e7e4      	b.n	8006574 <_vfiprintf_r+0x208>
 80065aa:	bf00      	nop
 80065ac:	08007cd4 	.word	0x08007cd4
 80065b0:	08007cf4 	.word	0x08007cf4
 80065b4:	08007cb4 	.word	0x08007cb4
 80065b8:	08007b5c 	.word	0x08007b5c
 80065bc:	08007b66 	.word	0x08007b66
 80065c0:	080041bd 	.word	0x080041bd
 80065c4:	08006347 	.word	0x08006347
 80065c8:	08007b62 	.word	0x08007b62

080065cc <__swbuf_r>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	460e      	mov	r6, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	4605      	mov	r5, r0
 80065d4:	b118      	cbz	r0, 80065de <__swbuf_r+0x12>
 80065d6:	6983      	ldr	r3, [r0, #24]
 80065d8:	b90b      	cbnz	r3, 80065de <__swbuf_r+0x12>
 80065da:	f000 f9e7 	bl	80069ac <__sinit>
 80065de:	4b21      	ldr	r3, [pc, #132]	; (8006664 <__swbuf_r+0x98>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	d12b      	bne.n	800663c <__swbuf_r+0x70>
 80065e4:	686c      	ldr	r4, [r5, #4]
 80065e6:	69a3      	ldr	r3, [r4, #24]
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	071a      	lsls	r2, r3, #28
 80065ee:	d52f      	bpl.n	8006650 <__swbuf_r+0x84>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b36b      	cbz	r3, 8006650 <__swbuf_r+0x84>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	1ac0      	subs	r0, r0, r3
 80065fa:	6963      	ldr	r3, [r4, #20]
 80065fc:	b2f6      	uxtb	r6, r6
 80065fe:	4283      	cmp	r3, r0
 8006600:	4637      	mov	r7, r6
 8006602:	dc04      	bgt.n	800660e <__swbuf_r+0x42>
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f93c 	bl	8006884 <_fflush_r>
 800660c:	bb30      	cbnz	r0, 800665c <__swbuf_r+0x90>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	60a3      	str	r3, [r4, #8]
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	6022      	str	r2, [r4, #0]
 800661a:	701e      	strb	r6, [r3, #0]
 800661c:	6963      	ldr	r3, [r4, #20]
 800661e:	3001      	adds	r0, #1
 8006620:	4283      	cmp	r3, r0
 8006622:	d004      	beq.n	800662e <__swbuf_r+0x62>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	07db      	lsls	r3, r3, #31
 8006628:	d506      	bpl.n	8006638 <__swbuf_r+0x6c>
 800662a:	2e0a      	cmp	r6, #10
 800662c:	d104      	bne.n	8006638 <__swbuf_r+0x6c>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f927 	bl	8006884 <_fflush_r>
 8006636:	b988      	cbnz	r0, 800665c <__swbuf_r+0x90>
 8006638:	4638      	mov	r0, r7
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <__swbuf_r+0x9c>)
 800663e:	429c      	cmp	r4, r3
 8006640:	d101      	bne.n	8006646 <__swbuf_r+0x7a>
 8006642:	68ac      	ldr	r4, [r5, #8]
 8006644:	e7cf      	b.n	80065e6 <__swbuf_r+0x1a>
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <__swbuf_r+0xa0>)
 8006648:	429c      	cmp	r4, r3
 800664a:	bf08      	it	eq
 800664c:	68ec      	ldreq	r4, [r5, #12]
 800664e:	e7ca      	b.n	80065e6 <__swbuf_r+0x1a>
 8006650:	4621      	mov	r1, r4
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f81a 	bl	800668c <__swsetup_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	d0cb      	beq.n	80065f4 <__swbuf_r+0x28>
 800665c:	f04f 37ff 	mov.w	r7, #4294967295
 8006660:	e7ea      	b.n	8006638 <__swbuf_r+0x6c>
 8006662:	bf00      	nop
 8006664:	08007cd4 	.word	0x08007cd4
 8006668:	08007cf4 	.word	0x08007cf4
 800666c:	08007cb4 	.word	0x08007cb4

08006670 <__ascii_wctomb>:
 8006670:	b149      	cbz	r1, 8006686 <__ascii_wctomb+0x16>
 8006672:	2aff      	cmp	r2, #255	; 0xff
 8006674:	bf85      	ittet	hi
 8006676:	238a      	movhi	r3, #138	; 0x8a
 8006678:	6003      	strhi	r3, [r0, #0]
 800667a:	700a      	strbls	r2, [r1, #0]
 800667c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006680:	bf98      	it	ls
 8006682:	2001      	movls	r0, #1
 8006684:	4770      	bx	lr
 8006686:	4608      	mov	r0, r1
 8006688:	4770      	bx	lr
	...

0800668c <__swsetup_r>:
 800668c:	4b32      	ldr	r3, [pc, #200]	; (8006758 <__swsetup_r+0xcc>)
 800668e:	b570      	push	{r4, r5, r6, lr}
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	4606      	mov	r6, r0
 8006694:	460c      	mov	r4, r1
 8006696:	b125      	cbz	r5, 80066a2 <__swsetup_r+0x16>
 8006698:	69ab      	ldr	r3, [r5, #24]
 800669a:	b913      	cbnz	r3, 80066a2 <__swsetup_r+0x16>
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f985 	bl	80069ac <__sinit>
 80066a2:	4b2e      	ldr	r3, [pc, #184]	; (800675c <__swsetup_r+0xd0>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	d10f      	bne.n	80066c8 <__swsetup_r+0x3c>
 80066a8:	686c      	ldr	r4, [r5, #4]
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b0:	0719      	lsls	r1, r3, #28
 80066b2:	d42c      	bmi.n	800670e <__swsetup_r+0x82>
 80066b4:	06dd      	lsls	r5, r3, #27
 80066b6:	d411      	bmi.n	80066dc <__swsetup_r+0x50>
 80066b8:	2309      	movs	r3, #9
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295
 80066c6:	e03e      	b.n	8006746 <__swsetup_r+0xba>
 80066c8:	4b25      	ldr	r3, [pc, #148]	; (8006760 <__swsetup_r+0xd4>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d101      	bne.n	80066d2 <__swsetup_r+0x46>
 80066ce:	68ac      	ldr	r4, [r5, #8]
 80066d0:	e7eb      	b.n	80066aa <__swsetup_r+0x1e>
 80066d2:	4b24      	ldr	r3, [pc, #144]	; (8006764 <__swsetup_r+0xd8>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	bf08      	it	eq
 80066d8:	68ec      	ldreq	r4, [r5, #12]
 80066da:	e7e6      	b.n	80066aa <__swsetup_r+0x1e>
 80066dc:	0758      	lsls	r0, r3, #29
 80066de:	d512      	bpl.n	8006706 <__swsetup_r+0x7a>
 80066e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e2:	b141      	cbz	r1, 80066f6 <__swsetup_r+0x6a>
 80066e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d002      	beq.n	80066f2 <__swsetup_r+0x66>
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7ff fb6f 	bl	8005dd0 <_free_r>
 80066f2:	2300      	movs	r3, #0
 80066f4:	6363      	str	r3, [r4, #52]	; 0x34
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	2300      	movs	r3, #0
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f043 0308 	orr.w	r3, r3, #8
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	b94b      	cbnz	r3, 8006726 <__swsetup_r+0x9a>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d003      	beq.n	8006726 <__swsetup_r+0x9a>
 800671e:	4621      	mov	r1, r4
 8006720:	4630      	mov	r0, r6
 8006722:	f000 fa07 	bl	8006b34 <__smakebuf_r>
 8006726:	89a0      	ldrh	r0, [r4, #12]
 8006728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800672c:	f010 0301 	ands.w	r3, r0, #1
 8006730:	d00a      	beq.n	8006748 <__swsetup_r+0xbc>
 8006732:	2300      	movs	r3, #0
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	6963      	ldr	r3, [r4, #20]
 8006738:	425b      	negs	r3, r3
 800673a:	61a3      	str	r3, [r4, #24]
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	b943      	cbnz	r3, 8006752 <__swsetup_r+0xc6>
 8006740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006744:	d1ba      	bne.n	80066bc <__swsetup_r+0x30>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	0781      	lsls	r1, r0, #30
 800674a:	bf58      	it	pl
 800674c:	6963      	ldrpl	r3, [r4, #20]
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	e7f4      	b.n	800673c <__swsetup_r+0xb0>
 8006752:	2000      	movs	r0, #0
 8006754:	e7f7      	b.n	8006746 <__swsetup_r+0xba>
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c
 800675c:	08007cd4 	.word	0x08007cd4
 8006760:	08007cf4 	.word	0x08007cf4
 8006764:	08007cb4 	.word	0x08007cb4

08006768 <abort>:
 8006768:	b508      	push	{r3, lr}
 800676a:	2006      	movs	r0, #6
 800676c:	f000 fa52 	bl	8006c14 <raise>
 8006770:	2001      	movs	r0, #1
 8006772:	f7fb f903 	bl	800197c <_exit>
	...

08006778 <__sflush_r>:
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	4605      	mov	r5, r0
 8006780:	0710      	lsls	r0, r2, #28
 8006782:	460c      	mov	r4, r1
 8006784:	d458      	bmi.n	8006838 <__sflush_r+0xc0>
 8006786:	684b      	ldr	r3, [r1, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc05      	bgt.n	8006798 <__sflush_r+0x20>
 800678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc02      	bgt.n	8006798 <__sflush_r+0x20>
 8006792:	2000      	movs	r0, #0
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	2e00      	cmp	r6, #0
 800679c:	d0f9      	beq.n	8006792 <__sflush_r+0x1a>
 800679e:	2300      	movs	r3, #0
 80067a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a4:	682f      	ldr	r7, [r5, #0]
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	d032      	beq.n	8006810 <__sflush_r+0x98>
 80067aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	075a      	lsls	r2, r3, #29
 80067b0:	d505      	bpl.n	80067be <__sflush_r+0x46>
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	1ac0      	subs	r0, r0, r3
 80067b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067b8:	b10b      	cbz	r3, 80067be <__sflush_r+0x46>
 80067ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067bc:	1ac0      	subs	r0, r0, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	4602      	mov	r2, r0
 80067c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c4:	6a21      	ldr	r1, [r4, #32]
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b0      	blx	r6
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	d106      	bne.n	80067de <__sflush_r+0x66>
 80067d0:	6829      	ldr	r1, [r5, #0]
 80067d2:	291d      	cmp	r1, #29
 80067d4:	d82c      	bhi.n	8006830 <__sflush_r+0xb8>
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <__sflush_r+0x108>)
 80067d8:	40ca      	lsrs	r2, r1
 80067da:	07d6      	lsls	r6, r2, #31
 80067dc:	d528      	bpl.n	8006830 <__sflush_r+0xb8>
 80067de:	2200      	movs	r2, #0
 80067e0:	6062      	str	r2, [r4, #4]
 80067e2:	04d9      	lsls	r1, r3, #19
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	d504      	bpl.n	80067f4 <__sflush_r+0x7c>
 80067ea:	1c42      	adds	r2, r0, #1
 80067ec:	d101      	bne.n	80067f2 <__sflush_r+0x7a>
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	b903      	cbnz	r3, 80067f4 <__sflush_r+0x7c>
 80067f2:	6560      	str	r0, [r4, #84]	; 0x54
 80067f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f6:	602f      	str	r7, [r5, #0]
 80067f8:	2900      	cmp	r1, #0
 80067fa:	d0ca      	beq.n	8006792 <__sflush_r+0x1a>
 80067fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <__sflush_r+0x92>
 8006804:	4628      	mov	r0, r5
 8006806:	f7ff fae3 	bl	8005dd0 <_free_r>
 800680a:	2000      	movs	r0, #0
 800680c:	6360      	str	r0, [r4, #52]	; 0x34
 800680e:	e7c1      	b.n	8006794 <__sflush_r+0x1c>
 8006810:	6a21      	ldr	r1, [r4, #32]
 8006812:	2301      	movs	r3, #1
 8006814:	4628      	mov	r0, r5
 8006816:	47b0      	blx	r6
 8006818:	1c41      	adds	r1, r0, #1
 800681a:	d1c7      	bne.n	80067ac <__sflush_r+0x34>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c4      	beq.n	80067ac <__sflush_r+0x34>
 8006822:	2b1d      	cmp	r3, #29
 8006824:	d001      	beq.n	800682a <__sflush_r+0xb2>
 8006826:	2b16      	cmp	r3, #22
 8006828:	d101      	bne.n	800682e <__sflush_r+0xb6>
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	e7b1      	b.n	8006792 <__sflush_r+0x1a>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	e7ad      	b.n	8006794 <__sflush_r+0x1c>
 8006838:	690f      	ldr	r7, [r1, #16]
 800683a:	2f00      	cmp	r7, #0
 800683c:	d0a9      	beq.n	8006792 <__sflush_r+0x1a>
 800683e:	0793      	lsls	r3, r2, #30
 8006840:	680e      	ldr	r6, [r1, #0]
 8006842:	bf08      	it	eq
 8006844:	694b      	ldreq	r3, [r1, #20]
 8006846:	600f      	str	r7, [r1, #0]
 8006848:	bf18      	it	ne
 800684a:	2300      	movne	r3, #0
 800684c:	eba6 0807 	sub.w	r8, r6, r7
 8006850:	608b      	str	r3, [r1, #8]
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	dd9c      	ble.n	8006792 <__sflush_r+0x1a>
 8006858:	6a21      	ldr	r1, [r4, #32]
 800685a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800685c:	4643      	mov	r3, r8
 800685e:	463a      	mov	r2, r7
 8006860:	4628      	mov	r0, r5
 8006862:	47b0      	blx	r6
 8006864:	2800      	cmp	r0, #0
 8006866:	dc06      	bgt.n	8006876 <__sflush_r+0xfe>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e78e      	b.n	8006794 <__sflush_r+0x1c>
 8006876:	4407      	add	r7, r0
 8006878:	eba8 0800 	sub.w	r8, r8, r0
 800687c:	e7e9      	b.n	8006852 <__sflush_r+0xda>
 800687e:	bf00      	nop
 8006880:	20400001 	.word	0x20400001

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b913      	cbnz	r3, 8006894 <_fflush_r+0x10>
 800688e:	2500      	movs	r5, #0
 8006890:	4628      	mov	r0, r5
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	b118      	cbz	r0, 800689e <_fflush_r+0x1a>
 8006896:	6983      	ldr	r3, [r0, #24]
 8006898:	b90b      	cbnz	r3, 800689e <_fflush_r+0x1a>
 800689a:	f000 f887 	bl	80069ac <__sinit>
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <_fflush_r+0x6c>)
 80068a0:	429c      	cmp	r4, r3
 80068a2:	d11b      	bne.n	80068dc <_fflush_r+0x58>
 80068a4:	686c      	ldr	r4, [r5, #4]
 80068a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0ef      	beq.n	800688e <_fflush_r+0xa>
 80068ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068b0:	07d0      	lsls	r0, r2, #31
 80068b2:	d404      	bmi.n	80068be <_fflush_r+0x3a>
 80068b4:	0599      	lsls	r1, r3, #22
 80068b6:	d402      	bmi.n	80068be <_fflush_r+0x3a>
 80068b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ba:	f000 f915 	bl	8006ae8 <__retarget_lock_acquire_recursive>
 80068be:	4628      	mov	r0, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7ff ff59 	bl	8006778 <__sflush_r>
 80068c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068c8:	07da      	lsls	r2, r3, #31
 80068ca:	4605      	mov	r5, r0
 80068cc:	d4e0      	bmi.n	8006890 <_fflush_r+0xc>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	059b      	lsls	r3, r3, #22
 80068d2:	d4dd      	bmi.n	8006890 <_fflush_r+0xc>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f000 f908 	bl	8006aea <__retarget_lock_release_recursive>
 80068da:	e7d9      	b.n	8006890 <_fflush_r+0xc>
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <_fflush_r+0x70>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d101      	bne.n	80068e6 <_fflush_r+0x62>
 80068e2:	68ac      	ldr	r4, [r5, #8]
 80068e4:	e7df      	b.n	80068a6 <_fflush_r+0x22>
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <_fflush_r+0x74>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	bf08      	it	eq
 80068ec:	68ec      	ldreq	r4, [r5, #12]
 80068ee:	e7da      	b.n	80068a6 <_fflush_r+0x22>
 80068f0:	08007cd4 	.word	0x08007cd4
 80068f4:	08007cf4 	.word	0x08007cf4
 80068f8:	08007cb4 	.word	0x08007cb4

080068fc <std>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	e9c0 3300 	strd	r3, r3, [r0]
 8006906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800690a:	6083      	str	r3, [r0, #8]
 800690c:	8181      	strh	r1, [r0, #12]
 800690e:	6643      	str	r3, [r0, #100]	; 0x64
 8006910:	81c2      	strh	r2, [r0, #14]
 8006912:	6183      	str	r3, [r0, #24]
 8006914:	4619      	mov	r1, r3
 8006916:	2208      	movs	r2, #8
 8006918:	305c      	adds	r0, #92	; 0x5c
 800691a:	f7fd fba7 	bl	800406c <memset>
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <std+0x38>)
 8006920:	6263      	str	r3, [r4, #36]	; 0x24
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <std+0x3c>)
 8006924:	62a3      	str	r3, [r4, #40]	; 0x28
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <std+0x40>)
 8006928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <std+0x44>)
 800692c:	6224      	str	r4, [r4, #32]
 800692e:	6323      	str	r3, [r4, #48]	; 0x30
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	08006c4d 	.word	0x08006c4d
 8006938:	08006c6f 	.word	0x08006c6f
 800693c:	08006ca7 	.word	0x08006ca7
 8006940:	08006ccb 	.word	0x08006ccb

08006944 <_cleanup_r>:
 8006944:	4901      	ldr	r1, [pc, #4]	; (800694c <_cleanup_r+0x8>)
 8006946:	f000 b8af 	b.w	8006aa8 <_fwalk_reent>
 800694a:	bf00      	nop
 800694c:	08006885 	.word	0x08006885

08006950 <__sfmoreglue>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	1e4a      	subs	r2, r1, #1
 8006954:	2568      	movs	r5, #104	; 0x68
 8006956:	4355      	muls	r5, r2
 8006958:	460e      	mov	r6, r1
 800695a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800695e:	f7ff fa87 	bl	8005e70 <_malloc_r>
 8006962:	4604      	mov	r4, r0
 8006964:	b140      	cbz	r0, 8006978 <__sfmoreglue+0x28>
 8006966:	2100      	movs	r1, #0
 8006968:	e9c0 1600 	strd	r1, r6, [r0]
 800696c:	300c      	adds	r0, #12
 800696e:	60a0      	str	r0, [r4, #8]
 8006970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006974:	f7fd fb7a 	bl	800406c <memset>
 8006978:	4620      	mov	r0, r4
 800697a:	bd70      	pop	{r4, r5, r6, pc}

0800697c <__sfp_lock_acquire>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__sfp_lock_acquire+0x8>)
 800697e:	f000 b8b3 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 8006982:	bf00      	nop
 8006984:	20000390 	.word	0x20000390

08006988 <__sfp_lock_release>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_release+0x8>)
 800698a:	f000 b8ae 	b.w	8006aea <__retarget_lock_release_recursive>
 800698e:	bf00      	nop
 8006990:	20000390 	.word	0x20000390

08006994 <__sinit_lock_acquire>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sinit_lock_acquire+0x8>)
 8006996:	f000 b8a7 	b.w	8006ae8 <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	2000038b 	.word	0x2000038b

080069a0 <__sinit_lock_release>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_release+0x8>)
 80069a2:	f000 b8a2 	b.w	8006aea <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000038b 	.word	0x2000038b

080069ac <__sinit>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4604      	mov	r4, r0
 80069b0:	f7ff fff0 	bl	8006994 <__sinit_lock_acquire>
 80069b4:	69a3      	ldr	r3, [r4, #24]
 80069b6:	b11b      	cbz	r3, 80069c0 <__sinit+0x14>
 80069b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069bc:	f7ff bff0 	b.w	80069a0 <__sinit_lock_release>
 80069c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069c4:	6523      	str	r3, [r4, #80]	; 0x50
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <__sinit+0x68>)
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <__sinit+0x6c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	bf04      	itt	eq
 80069d2:	2301      	moveq	r3, #1
 80069d4:	61a3      	streq	r3, [r4, #24]
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 f820 	bl	8006a1c <__sfp>
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f81c 	bl	8006a1c <__sfp>
 80069e4:	60a0      	str	r0, [r4, #8]
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 f818 	bl	8006a1c <__sfp>
 80069ec:	2200      	movs	r2, #0
 80069ee:	60e0      	str	r0, [r4, #12]
 80069f0:	2104      	movs	r1, #4
 80069f2:	6860      	ldr	r0, [r4, #4]
 80069f4:	f7ff ff82 	bl	80068fc <std>
 80069f8:	68a0      	ldr	r0, [r4, #8]
 80069fa:	2201      	movs	r2, #1
 80069fc:	2109      	movs	r1, #9
 80069fe:	f7ff ff7d 	bl	80068fc <std>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	2202      	movs	r2, #2
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff ff78 	bl	80068fc <std>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61a3      	str	r3, [r4, #24]
 8006a10:	e7d2      	b.n	80069b8 <__sinit+0xc>
 8006a12:	bf00      	nop
 8006a14:	08007934 	.word	0x08007934
 8006a18:	08006945 	.word	0x08006945

08006a1c <__sfp>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f7ff ffac 	bl	800697c <__sfp_lock_acquire>
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <__sfp+0x84>)
 8006a26:	681e      	ldr	r6, [r3, #0]
 8006a28:	69b3      	ldr	r3, [r6, #24]
 8006a2a:	b913      	cbnz	r3, 8006a32 <__sfp+0x16>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff ffbd 	bl	80069ac <__sinit>
 8006a32:	3648      	adds	r6, #72	; 0x48
 8006a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	d503      	bpl.n	8006a44 <__sfp+0x28>
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	b30b      	cbz	r3, 8006a84 <__sfp+0x68>
 8006a40:	6836      	ldr	r6, [r6, #0]
 8006a42:	e7f7      	b.n	8006a34 <__sfp+0x18>
 8006a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a48:	b9d5      	cbnz	r5, 8006a80 <__sfp+0x64>
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <__sfp+0x88>)
 8006a4c:	60e3      	str	r3, [r4, #12]
 8006a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a52:	6665      	str	r5, [r4, #100]	; 0x64
 8006a54:	f000 f847 	bl	8006ae6 <__retarget_lock_init_recursive>
 8006a58:	f7ff ff96 	bl	8006988 <__sfp_lock_release>
 8006a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a64:	6025      	str	r5, [r4, #0]
 8006a66:	61a5      	str	r5, [r4, #24]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a70:	f7fd fafc 	bl	800406c <memset>
 8006a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a80:	3468      	adds	r4, #104	; 0x68
 8006a82:	e7d9      	b.n	8006a38 <__sfp+0x1c>
 8006a84:	2104      	movs	r1, #4
 8006a86:	4638      	mov	r0, r7
 8006a88:	f7ff ff62 	bl	8006950 <__sfmoreglue>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	6030      	str	r0, [r6, #0]
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d1d5      	bne.n	8006a40 <__sfp+0x24>
 8006a94:	f7ff ff78 	bl	8006988 <__sfp_lock_release>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	e7ee      	b.n	8006a7c <__sfp+0x60>
 8006a9e:	bf00      	nop
 8006aa0:	08007934 	.word	0x08007934
 8006aa4:	ffff0001 	.word	0xffff0001

08006aa8 <_fwalk_reent>:
 8006aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	4688      	mov	r8, r1
 8006ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ab4:	2700      	movs	r7, #0
 8006ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aba:	f1b9 0901 	subs.w	r9, r9, #1
 8006abe:	d505      	bpl.n	8006acc <_fwalk_reent+0x24>
 8006ac0:	6824      	ldr	r4, [r4, #0]
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	d1f7      	bne.n	8006ab6 <_fwalk_reent+0xe>
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006acc:	89ab      	ldrh	r3, [r5, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d907      	bls.n	8006ae2 <_fwalk_reent+0x3a>
 8006ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	d003      	beq.n	8006ae2 <_fwalk_reent+0x3a>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	47c0      	blx	r8
 8006ae0:	4307      	orrs	r7, r0
 8006ae2:	3568      	adds	r5, #104	; 0x68
 8006ae4:	e7e9      	b.n	8006aba <_fwalk_reent+0x12>

08006ae6 <__retarget_lock_init_recursive>:
 8006ae6:	4770      	bx	lr

08006ae8 <__retarget_lock_acquire_recursive>:
 8006ae8:	4770      	bx	lr

08006aea <__retarget_lock_release_recursive>:
 8006aea:	4770      	bx	lr

08006aec <__swhatbuf_r>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	460e      	mov	r6, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	b096      	sub	sp, #88	; 0x58
 8006af8:	4614      	mov	r4, r2
 8006afa:	461d      	mov	r5, r3
 8006afc:	da07      	bge.n	8006b0e <__swhatbuf_r+0x22>
 8006afe:	2300      	movs	r3, #0
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	89b3      	ldrh	r3, [r6, #12]
 8006b04:	061a      	lsls	r2, r3, #24
 8006b06:	d410      	bmi.n	8006b2a <__swhatbuf_r+0x3e>
 8006b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0c:	e00e      	b.n	8006b2c <__swhatbuf_r+0x40>
 8006b0e:	466a      	mov	r2, sp
 8006b10:	f000 f902 	bl	8006d18 <_fstat_r>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	dbf2      	blt.n	8006afe <__swhatbuf_r+0x12>
 8006b18:	9a01      	ldr	r2, [sp, #4]
 8006b1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b22:	425a      	negs	r2, r3
 8006b24:	415a      	adcs	r2, r3
 8006b26:	602a      	str	r2, [r5, #0]
 8006b28:	e7ee      	b.n	8006b08 <__swhatbuf_r+0x1c>
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	b016      	add	sp, #88	; 0x58
 8006b32:	bd70      	pop	{r4, r5, r6, pc}

08006b34 <__smakebuf_r>:
 8006b34:	898b      	ldrh	r3, [r1, #12]
 8006b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b38:	079d      	lsls	r5, r3, #30
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	d507      	bpl.n	8006b50 <__smakebuf_r+0x1c>
 8006b40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2301      	movs	r3, #1
 8006b4a:	6163      	str	r3, [r4, #20]
 8006b4c:	b002      	add	sp, #8
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	ab01      	add	r3, sp, #4
 8006b52:	466a      	mov	r2, sp
 8006b54:	f7ff ffca 	bl	8006aec <__swhatbuf_r>
 8006b58:	9900      	ldr	r1, [sp, #0]
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff f987 	bl	8005e70 <_malloc_r>
 8006b62:	b948      	cbnz	r0, 8006b78 <__smakebuf_r+0x44>
 8006b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b68:	059a      	lsls	r2, r3, #22
 8006b6a:	d4ef      	bmi.n	8006b4c <__smakebuf_r+0x18>
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	e7e3      	b.n	8006b40 <__smakebuf_r+0xc>
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <__smakebuf_r+0x7c>)
 8006b7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	6163      	str	r3, [r4, #20]
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	6120      	str	r0, [r4, #16]
 8006b8e:	b15b      	cbz	r3, 8006ba8 <__smakebuf_r+0x74>
 8006b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 f8d1 	bl	8006d3c <_isatty_r>
 8006b9a:	b128      	cbz	r0, 8006ba8 <__smakebuf_r+0x74>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	89a0      	ldrh	r0, [r4, #12]
 8006baa:	4305      	orrs	r5, r0
 8006bac:	81a5      	strh	r5, [r4, #12]
 8006bae:	e7cd      	b.n	8006b4c <__smakebuf_r+0x18>
 8006bb0:	08006945 	.word	0x08006945

08006bb4 <_malloc_usable_size_r>:
 8006bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb8:	1f18      	subs	r0, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfbc      	itt	lt
 8006bbe:	580b      	ldrlt	r3, [r1, r0]
 8006bc0:	18c0      	addlt	r0, r0, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_raise_r>:
 8006bc4:	291f      	cmp	r1, #31
 8006bc6:	b538      	push	{r3, r4, r5, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	d904      	bls.n	8006bd8 <_raise_r+0x14>
 8006bce:	2316      	movs	r3, #22
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bda:	b112      	cbz	r2, 8006be2 <_raise_r+0x1e>
 8006bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006be0:	b94b      	cbnz	r3, 8006bf6 <_raise_r+0x32>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f830 	bl	8006c48 <_getpid_r>
 8006be8:	462a      	mov	r2, r5
 8006bea:	4601      	mov	r1, r0
 8006bec:	4620      	mov	r0, r4
 8006bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf2:	f000 b817 	b.w	8006c24 <_kill_r>
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00a      	beq.n	8006c10 <_raise_r+0x4c>
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	d103      	bne.n	8006c06 <_raise_r+0x42>
 8006bfe:	2316      	movs	r3, #22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	2001      	movs	r0, #1
 8006c04:	e7e7      	b.n	8006bd6 <_raise_r+0x12>
 8006c06:	2400      	movs	r4, #0
 8006c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	4798      	blx	r3
 8006c10:	2000      	movs	r0, #0
 8006c12:	e7e0      	b.n	8006bd6 <_raise_r+0x12>

08006c14 <raise>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <raise+0xc>)
 8006c16:	4601      	mov	r1, r0
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f7ff bfd3 	b.w	8006bc4 <_raise_r>
 8006c1e:	bf00      	nop
 8006c20:	2000000c 	.word	0x2000000c

08006c24 <_kill_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	; (8006c44 <_kill_r+0x20>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	f7fa fe93 	bl	800195c <_kill>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d102      	bne.n	8006c40 <_kill_r+0x1c>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	b103      	cbz	r3, 8006c40 <_kill_r+0x1c>
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	bf00      	nop
 8006c44:	20000384 	.word	0x20000384

08006c48 <_getpid_r>:
 8006c48:	f7fa be80 	b.w	800194c <_getpid>

08006c4c <__sread>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c54:	f000 f894 	bl	8006d80 <_read_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	bfab      	itete	ge
 8006c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c60:	181b      	addge	r3, r3, r0
 8006c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c66:	bfac      	ite	ge
 8006c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c6a:	81a3      	strhlt	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__swrite>:
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	461f      	mov	r7, r3
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	05db      	lsls	r3, r3, #23
 8006c78:	4605      	mov	r5, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d505      	bpl.n	8006c8c <__swrite+0x1e>
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2302      	movs	r3, #2
 8006c86:	2200      	movs	r2, #0
 8006c88:	f000 f868 	bl	8006d5c <_lseek_r>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	f000 b817 	b.w	8006cd4 <_write_r>

08006ca6 <__sseek>:
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 f855 	bl	8006d5c <_lseek_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	bf15      	itete	ne
 8006cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cc2:	81a3      	strheq	r3, [r4, #12]
 8006cc4:	bf18      	it	ne
 8006cc6:	81a3      	strhne	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__sclose>:
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 b813 	b.w	8006cf8 <_close_r>
	...

08006cd4 <_write_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d07      	ldr	r5, [pc, #28]	; (8006cf4 <_write_r+0x20>)
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4608      	mov	r0, r1
 8006cdc:	4611      	mov	r1, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7fa fe71 	bl	80019ca <_write>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_write_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_write_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000384 	.word	0x20000384

08006cf8 <_close_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d06      	ldr	r5, [pc, #24]	; (8006d14 <_close_r+0x1c>)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f7fa fe7d 	bl	8001a02 <_close>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_close_r+0x1a>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_close_r+0x1a>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20000384 	.word	0x20000384

08006d18 <_fstat_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4d07      	ldr	r5, [pc, #28]	; (8006d38 <_fstat_r+0x20>)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	f7fa fe78 	bl	8001a1a <_fstat>
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	d102      	bne.n	8006d34 <_fstat_r+0x1c>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b103      	cbz	r3, 8006d34 <_fstat_r+0x1c>
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	bd38      	pop	{r3, r4, r5, pc}
 8006d36:	bf00      	nop
 8006d38:	20000384 	.word	0x20000384

08006d3c <_isatty_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4d06      	ldr	r5, [pc, #24]	; (8006d58 <_isatty_r+0x1c>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fa fe77 	bl	8001a3a <_isatty>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_isatty_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_isatty_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000384 	.word	0x20000384

08006d5c <_lseek_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d07      	ldr	r5, [pc, #28]	; (8006d7c <_lseek_r+0x20>)
 8006d60:	4604      	mov	r4, r0
 8006d62:	4608      	mov	r0, r1
 8006d64:	4611      	mov	r1, r2
 8006d66:	2200      	movs	r2, #0
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f7fa fe70 	bl	8001a50 <_lseek>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_lseek_r+0x1e>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_lseek_r+0x1e>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000384 	.word	0x20000384

08006d80 <_read_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d07      	ldr	r5, [pc, #28]	; (8006da0 <_read_r+0x20>)
 8006d84:	4604      	mov	r4, r0
 8006d86:	4608      	mov	r0, r1
 8006d88:	4611      	mov	r1, r2
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	602a      	str	r2, [r5, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f7fa fdfe 	bl	8001990 <_read>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_read_r+0x1e>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_read_r+0x1e>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20000384 	.word	0x20000384

08006da4 <cosf>:
 8006da4:	ee10 3a10 	vmov	r3, s0
 8006da8:	b507      	push	{r0, r1, r2, lr}
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <cosf+0x78>)
 8006dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	4293      	cmp	r3, r2
 8006db2:	dc04      	bgt.n	8006dbe <cosf+0x1a>
 8006db4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006e20 <cosf+0x7c>
 8006db8:	f000 f970 	bl	800709c <__kernel_cosf>
 8006dbc:	e004      	b.n	8006dc8 <cosf+0x24>
 8006dbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006dc2:	db04      	blt.n	8006dce <cosf+0x2a>
 8006dc4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006dc8:	b003      	add	sp, #12
 8006dca:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dce:	4668      	mov	r0, sp
 8006dd0:	f000 f828 	bl	8006e24 <__ieee754_rem_pio2f>
 8006dd4:	f000 0003 	and.w	r0, r0, #3
 8006dd8:	2801      	cmp	r0, #1
 8006dda:	d007      	beq.n	8006dec <cosf+0x48>
 8006ddc:	2802      	cmp	r0, #2
 8006dde:	d00e      	beq.n	8006dfe <cosf+0x5a>
 8006de0:	b9a0      	cbnz	r0, 8006e0c <cosf+0x68>
 8006de2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006de6:	ed9d 0a00 	vldr	s0, [sp]
 8006dea:	e7e5      	b.n	8006db8 <cosf+0x14>
 8006dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8006df0:	ed9d 0a00 	vldr	s0, [sp]
 8006df4:	f000 fc3c 	bl	8007670 <__kernel_sinf>
 8006df8:	eeb1 0a40 	vneg.f32	s0, s0
 8006dfc:	e7e4      	b.n	8006dc8 <cosf+0x24>
 8006dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e02:	ed9d 0a00 	vldr	s0, [sp]
 8006e06:	f000 f949 	bl	800709c <__kernel_cosf>
 8006e0a:	e7f5      	b.n	8006df8 <cosf+0x54>
 8006e0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e10:	ed9d 0a00 	vldr	s0, [sp]
 8006e14:	2001      	movs	r0, #1
 8006e16:	f000 fc2b 	bl	8007670 <__kernel_sinf>
 8006e1a:	e7d5      	b.n	8006dc8 <cosf+0x24>
 8006e1c:	3f490fd8 	.word	0x3f490fd8
 8006e20:	00000000 	.word	0x00000000

08006e24 <__ieee754_rem_pio2f>:
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	ee10 6a10 	vmov	r6, s0
 8006e2a:	4b8e      	ldr	r3, [pc, #568]	; (8007064 <__ieee754_rem_pio2f+0x240>)
 8006e2c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006e30:	429d      	cmp	r5, r3
 8006e32:	b087      	sub	sp, #28
 8006e34:	eef0 7a40 	vmov.f32	s15, s0
 8006e38:	4604      	mov	r4, r0
 8006e3a:	dc05      	bgt.n	8006e48 <__ieee754_rem_pio2f+0x24>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	ed80 0a00 	vstr	s0, [r0]
 8006e42:	6043      	str	r3, [r0, #4]
 8006e44:	2000      	movs	r0, #0
 8006e46:	e01a      	b.n	8006e7e <__ieee754_rem_pio2f+0x5a>
 8006e48:	4b87      	ldr	r3, [pc, #540]	; (8007068 <__ieee754_rem_pio2f+0x244>)
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	dc46      	bgt.n	8006edc <__ieee754_rem_pio2f+0xb8>
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800706c <__ieee754_rem_pio2f+0x248>
 8006e54:	4b86      	ldr	r3, [pc, #536]	; (8007070 <__ieee754_rem_pio2f+0x24c>)
 8006e56:	f025 050f 	bic.w	r5, r5, #15
 8006e5a:	dd1f      	ble.n	8006e9c <__ieee754_rem_pio2f+0x78>
 8006e5c:	429d      	cmp	r5, r3
 8006e5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e62:	d00e      	beq.n	8006e82 <__ieee754_rem_pio2f+0x5e>
 8006e64:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007074 <__ieee754_rem_pio2f+0x250>
 8006e68:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006e6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e70:	ed80 0a00 	vstr	s0, [r0]
 8006e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e78:	2001      	movs	r0, #1
 8006e7a:	edc4 7a01 	vstr	s15, [r4, #4]
 8006e7e:	b007      	add	sp, #28
 8006e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e82:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007078 <__ieee754_rem_pio2f+0x254>
 8006e86:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800707c <__ieee754_rem_pio2f+0x258>
 8006e8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e8e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006e92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e96:	edc0 6a00 	vstr	s13, [r0]
 8006e9a:	e7eb      	b.n	8006e74 <__ieee754_rem_pio2f+0x50>
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006ea2:	d00e      	beq.n	8006ec2 <__ieee754_rem_pio2f+0x9e>
 8006ea4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007074 <__ieee754_rem_pio2f+0x250>
 8006ea8:	ee37 0a87 	vadd.f32	s0, s15, s14
 8006eac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006eb0:	ed80 0a00 	vstr	s0, [r0]
 8006eb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	edc4 7a01 	vstr	s15, [r4, #4]
 8006ec0:	e7dd      	b.n	8006e7e <__ieee754_rem_pio2f+0x5a>
 8006ec2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007078 <__ieee754_rem_pio2f+0x254>
 8006ec6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800707c <__ieee754_rem_pio2f+0x258>
 8006eca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006ece:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006ed2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ed6:	edc0 6a00 	vstr	s13, [r0]
 8006eda:	e7eb      	b.n	8006eb4 <__ieee754_rem_pio2f+0x90>
 8006edc:	4b68      	ldr	r3, [pc, #416]	; (8007080 <__ieee754_rem_pio2f+0x25c>)
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	dc72      	bgt.n	8006fc8 <__ieee754_rem_pio2f+0x1a4>
 8006ee2:	f000 fc0d 	bl	8007700 <fabsf>
 8006ee6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007084 <__ieee754_rem_pio2f+0x260>
 8006eea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006eee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006efa:	ee17 0a90 	vmov	r0, s15
 8006efe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800706c <__ieee754_rem_pio2f+0x248>
 8006f02:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006f06:	281f      	cmp	r0, #31
 8006f08:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007074 <__ieee754_rem_pio2f+0x250>
 8006f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f10:	eeb1 6a47 	vneg.f32	s12, s14
 8006f14:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006f18:	ee16 2a90 	vmov	r2, s13
 8006f1c:	dc1c      	bgt.n	8006f58 <__ieee754_rem_pio2f+0x134>
 8006f1e:	495a      	ldr	r1, [pc, #360]	; (8007088 <__ieee754_rem_pio2f+0x264>)
 8006f20:	1e47      	subs	r7, r0, #1
 8006f22:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8006f26:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006f2a:	428b      	cmp	r3, r1
 8006f2c:	d014      	beq.n	8006f58 <__ieee754_rem_pio2f+0x134>
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	ed94 7a00 	vldr	s14, [r4]
 8006f34:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006f3e:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f42:	da9c      	bge.n	8006e7e <__ieee754_rem_pio2f+0x5a>
 8006f44:	eeb1 7a47 	vneg.f32	s14, s14
 8006f48:	eeb1 0a40 	vneg.f32	s0, s0
 8006f4c:	ed84 7a00 	vstr	s14, [r4]
 8006f50:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f54:	4240      	negs	r0, r0
 8006f56:	e792      	b.n	8006e7e <__ieee754_rem_pio2f+0x5a>
 8006f58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f5c:	15eb      	asrs	r3, r5, #23
 8006f5e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8006f62:	2d08      	cmp	r5, #8
 8006f64:	dde3      	ble.n	8006f2e <__ieee754_rem_pio2f+0x10a>
 8006f66:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007078 <__ieee754_rem_pio2f+0x254>
 8006f6a:	eef0 6a40 	vmov.f32	s13, s0
 8006f6e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f72:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006f76:	eea6 0a27 	vfma.f32	s0, s12, s15
 8006f7a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800707c <__ieee754_rem_pio2f+0x258>
 8006f7e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8006f82:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8006f86:	eef0 7a40 	vmov.f32	s15, s0
 8006f8a:	ee15 2a90 	vmov	r2, s11
 8006f8e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f92:	1a5b      	subs	r3, r3, r1
 8006f94:	2b19      	cmp	r3, #25
 8006f96:	dc04      	bgt.n	8006fa2 <__ieee754_rem_pio2f+0x17e>
 8006f98:	edc4 5a00 	vstr	s11, [r4]
 8006f9c:	eeb0 0a66 	vmov.f32	s0, s13
 8006fa0:	e7c6      	b.n	8006f30 <__ieee754_rem_pio2f+0x10c>
 8006fa2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800708c <__ieee754_rem_pio2f+0x268>
 8006fa6:	eeb0 0a66 	vmov.f32	s0, s13
 8006faa:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006fae:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006fb2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007090 <__ieee754_rem_pio2f+0x26c>
 8006fb6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006fba:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006fbe:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006fc2:	ed84 7a00 	vstr	s14, [r4]
 8006fc6:	e7b3      	b.n	8006f30 <__ieee754_rem_pio2f+0x10c>
 8006fc8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006fcc:	db06      	blt.n	8006fdc <__ieee754_rem_pio2f+0x1b8>
 8006fce:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006fd2:	edc0 7a01 	vstr	s15, [r0, #4]
 8006fd6:	edc0 7a00 	vstr	s15, [r0]
 8006fda:	e733      	b.n	8006e44 <__ieee754_rem_pio2f+0x20>
 8006fdc:	15ea      	asrs	r2, r5, #23
 8006fde:	3a86      	subs	r2, #134	; 0x86
 8006fe0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fec:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007094 <__ieee754_rem_pio2f+0x270>
 8006ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ff8:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006ffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007000:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800700c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007020:	d11e      	bne.n	8007060 <__ieee754_rem_pio2f+0x23c>
 8007022:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	bf14      	ite	ne
 800702c:	2302      	movne	r3, #2
 800702e:	2301      	moveq	r3, #1
 8007030:	4919      	ldr	r1, [pc, #100]	; (8007098 <__ieee754_rem_pio2f+0x274>)
 8007032:	9101      	str	r1, [sp, #4]
 8007034:	2102      	movs	r1, #2
 8007036:	9100      	str	r1, [sp, #0]
 8007038:	a803      	add	r0, sp, #12
 800703a:	4621      	mov	r1, r4
 800703c:	f000 f88e 	bl	800715c <__kernel_rem_pio2f>
 8007040:	2e00      	cmp	r6, #0
 8007042:	f6bf af1c 	bge.w	8006e7e <__ieee754_rem_pio2f+0x5a>
 8007046:	edd4 7a00 	vldr	s15, [r4]
 800704a:	eef1 7a67 	vneg.f32	s15, s15
 800704e:	edc4 7a00 	vstr	s15, [r4]
 8007052:	edd4 7a01 	vldr	s15, [r4, #4]
 8007056:	eef1 7a67 	vneg.f32	s15, s15
 800705a:	edc4 7a01 	vstr	s15, [r4, #4]
 800705e:	e779      	b.n	8006f54 <__ieee754_rem_pio2f+0x130>
 8007060:	2303      	movs	r3, #3
 8007062:	e7e5      	b.n	8007030 <__ieee754_rem_pio2f+0x20c>
 8007064:	3f490fd8 	.word	0x3f490fd8
 8007068:	4016cbe3 	.word	0x4016cbe3
 800706c:	3fc90f80 	.word	0x3fc90f80
 8007070:	3fc90fd0 	.word	0x3fc90fd0
 8007074:	37354443 	.word	0x37354443
 8007078:	37354400 	.word	0x37354400
 800707c:	2e85a308 	.word	0x2e85a308
 8007080:	43490f80 	.word	0x43490f80
 8007084:	3f22f984 	.word	0x3f22f984
 8007088:	08007d14 	.word	0x08007d14
 800708c:	2e85a300 	.word	0x2e85a300
 8007090:	248d3132 	.word	0x248d3132
 8007094:	43800000 	.word	0x43800000
 8007098:	08007d94 	.word	0x08007d94

0800709c <__kernel_cosf>:
 800709c:	ee10 3a10 	vmov	r3, s0
 80070a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80070a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80070ac:	da05      	bge.n	80070ba <__kernel_cosf+0x1e>
 80070ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80070b2:	ee17 2a90 	vmov	r2, s15
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	d03d      	beq.n	8007136 <__kernel_cosf+0x9a>
 80070ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80070be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800713c <__kernel_cosf+0xa0>
 80070c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007140 <__kernel_cosf+0xa4>
 80070c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007144 <__kernel_cosf+0xa8>
 80070ca:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <__kernel_cosf+0xac>)
 80070cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80070d0:	4293      	cmp	r3, r2
 80070d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800714c <__kernel_cosf+0xb0>
 80070d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80070da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007150 <__kernel_cosf+0xb4>
 80070de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80070e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007154 <__kernel_cosf+0xb8>
 80070e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80070ea:	eeb0 7a66 	vmov.f32	s14, s13
 80070ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80070f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80070f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80070fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80070fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007102:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007106:	dc04      	bgt.n	8007112 <__kernel_cosf+0x76>
 8007108:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800710c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007110:	4770      	bx	lr
 8007112:	4a11      	ldr	r2, [pc, #68]	; (8007158 <__kernel_cosf+0xbc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	bfda      	itte	le
 8007118:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800711c:	ee06 3a90 	vmovle	s13, r3
 8007120:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007124:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007128:	ee36 0a66 	vsub.f32	s0, s12, s13
 800712c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007130:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007134:	4770      	bx	lr
 8007136:	eeb0 0a46 	vmov.f32	s0, s12
 800713a:	4770      	bx	lr
 800713c:	ad47d74e 	.word	0xad47d74e
 8007140:	310f74f6 	.word	0x310f74f6
 8007144:	3d2aaaab 	.word	0x3d2aaaab
 8007148:	3e999999 	.word	0x3e999999
 800714c:	b493f27c 	.word	0xb493f27c
 8007150:	37d00d01 	.word	0x37d00d01
 8007154:	bab60b61 	.word	0xbab60b61
 8007158:	3f480000 	.word	0x3f480000

0800715c <__kernel_rem_pio2f>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	ed2d 8b04 	vpush	{d8-d9}
 8007164:	b0d7      	sub	sp, #348	; 0x15c
 8007166:	4616      	mov	r6, r2
 8007168:	4698      	mov	r8, r3
 800716a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800716c:	4bbb      	ldr	r3, [pc, #748]	; (800745c <__kernel_rem_pio2f+0x300>)
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007174:	1d33      	adds	r3, r6, #4
 8007176:	460d      	mov	r5, r1
 8007178:	f108 39ff 	add.w	r9, r8, #4294967295
 800717c:	db29      	blt.n	80071d2 <__kernel_rem_pio2f+0x76>
 800717e:	1ef1      	subs	r1, r6, #3
 8007180:	bf48      	it	mi
 8007182:	1d31      	addmi	r1, r6, #4
 8007184:	10c9      	asrs	r1, r1, #3
 8007186:	1c4c      	adds	r4, r1, #1
 8007188:	00e3      	lsls	r3, r4, #3
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800718e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800746c <__kernel_rem_pio2f+0x310>
 8007192:	eba1 0009 	sub.w	r0, r1, r9
 8007196:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800719a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800719e:	eb07 0c09 	add.w	ip, r7, r9
 80071a2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80071a6:	2300      	movs	r3, #0
 80071a8:	4563      	cmp	r3, ip
 80071aa:	dd14      	ble.n	80071d6 <__kernel_rem_pio2f+0x7a>
 80071ac:	ab1a      	add	r3, sp, #104	; 0x68
 80071ae:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80071b2:	46cc      	mov	ip, r9
 80071b4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80071b8:	f1c8 0b01 	rsb	fp, r8, #1
 80071bc:	eb0b 020c 	add.w	r2, fp, ip
 80071c0:	4297      	cmp	r7, r2
 80071c2:	db27      	blt.n	8007214 <__kernel_rem_pio2f+0xb8>
 80071c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80071c8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800746c <__kernel_rem_pio2f+0x310>
 80071cc:	4618      	mov	r0, r3
 80071ce:	2200      	movs	r2, #0
 80071d0:	e016      	b.n	8007200 <__kernel_rem_pio2f+0xa4>
 80071d2:	2100      	movs	r1, #0
 80071d4:	e7d7      	b.n	8007186 <__kernel_rem_pio2f+0x2a>
 80071d6:	42d8      	cmn	r0, r3
 80071d8:	bf5d      	ittte	pl
 80071da:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80071de:	ee07 2a90 	vmovpl	s15, r2
 80071e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80071e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80071ea:	ecea 7a01 	vstmia	sl!, {s15}
 80071ee:	3301      	adds	r3, #1
 80071f0:	e7da      	b.n	80071a8 <__kernel_rem_pio2f+0x4c>
 80071f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80071f6:	ed90 7a00 	vldr	s14, [r0]
 80071fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80071fe:	3201      	adds	r2, #1
 8007200:	454a      	cmp	r2, r9
 8007202:	f1a0 0004 	sub.w	r0, r0, #4
 8007206:	ddf4      	ble.n	80071f2 <__kernel_rem_pio2f+0x96>
 8007208:	ecea 7a01 	vstmia	sl!, {s15}
 800720c:	3304      	adds	r3, #4
 800720e:	f10c 0c01 	add.w	ip, ip, #1
 8007212:	e7d3      	b.n	80071bc <__kernel_rem_pio2f+0x60>
 8007214:	ab06      	add	r3, sp, #24
 8007216:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800721e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007468 <__kernel_rem_pio2f+0x30c>
 8007222:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007464 <__kernel_rem_pio2f+0x308>
 8007226:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800722a:	9303      	str	r3, [sp, #12]
 800722c:	46ba      	mov	sl, r7
 800722e:	ab56      	add	r3, sp, #344	; 0x158
 8007230:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007234:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007238:	ab06      	add	r3, sp, #24
 800723a:	4618      	mov	r0, r3
 800723c:	4652      	mov	r2, sl
 800723e:	2a00      	cmp	r2, #0
 8007240:	dc51      	bgt.n	80072e6 <__kernel_rem_pio2f+0x18a>
 8007242:	4620      	mov	r0, r4
 8007244:	9305      	str	r3, [sp, #20]
 8007246:	f000 faa5 	bl	8007794 <scalbnf>
 800724a:	eeb0 8a40 	vmov.f32	s16, s0
 800724e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007252:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007256:	f000 fa5b 	bl	8007710 <floorf>
 800725a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800725e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007262:	2c00      	cmp	r4, #0
 8007264:	9b05      	ldr	r3, [sp, #20]
 8007266:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800726a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800726e:	edcd 7a00 	vstr	s15, [sp]
 8007272:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007276:	dd4b      	ble.n	8007310 <__kernel_rem_pio2f+0x1b4>
 8007278:	f10a 3cff 	add.w	ip, sl, #4294967295
 800727c:	aa06      	add	r2, sp, #24
 800727e:	f1c4 0e08 	rsb	lr, r4, #8
 8007282:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007286:	ee17 1a90 	vmov	r1, s15
 800728a:	fa42 f00e 	asr.w	r0, r2, lr
 800728e:	4401      	add	r1, r0
 8007290:	9100      	str	r1, [sp, #0]
 8007292:	fa00 f00e 	lsl.w	r0, r0, lr
 8007296:	a906      	add	r1, sp, #24
 8007298:	1a12      	subs	r2, r2, r0
 800729a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800729e:	f1c4 0007 	rsb	r0, r4, #7
 80072a2:	fa42 fb00 	asr.w	fp, r2, r0
 80072a6:	f1bb 0f00 	cmp.w	fp, #0
 80072aa:	dd43      	ble.n	8007334 <__kernel_rem_pio2f+0x1d8>
 80072ac:	9a00      	ldr	r2, [sp, #0]
 80072ae:	f04f 0e00 	mov.w	lr, #0
 80072b2:	3201      	adds	r2, #1
 80072b4:	9200      	str	r2, [sp, #0]
 80072b6:	4670      	mov	r0, lr
 80072b8:	45f2      	cmp	sl, lr
 80072ba:	dc6c      	bgt.n	8007396 <__kernel_rem_pio2f+0x23a>
 80072bc:	2c00      	cmp	r4, #0
 80072be:	dd04      	ble.n	80072ca <__kernel_rem_pio2f+0x16e>
 80072c0:	2c01      	cmp	r4, #1
 80072c2:	d079      	beq.n	80073b8 <__kernel_rem_pio2f+0x25c>
 80072c4:	2c02      	cmp	r4, #2
 80072c6:	f000 8082 	beq.w	80073ce <__kernel_rem_pio2f+0x272>
 80072ca:	f1bb 0f02 	cmp.w	fp, #2
 80072ce:	d131      	bne.n	8007334 <__kernel_rem_pio2f+0x1d8>
 80072d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80072d8:	b360      	cbz	r0, 8007334 <__kernel_rem_pio2f+0x1d8>
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fa5a 	bl	8007794 <scalbnf>
 80072e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80072e4:	e026      	b.n	8007334 <__kernel_rem_pio2f+0x1d8>
 80072e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80072ea:	3a01      	subs	r2, #1
 80072ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072f0:	a942      	add	r1, sp, #264	; 0x108
 80072f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072f6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80072fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80072fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007302:	eca0 0a01 	vstmia	r0!, {s0}
 8007306:	ed9c 0a00 	vldr	s0, [ip]
 800730a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800730e:	e796      	b.n	800723e <__kernel_rem_pio2f+0xe2>
 8007310:	d107      	bne.n	8007322 <__kernel_rem_pio2f+0x1c6>
 8007312:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007316:	a906      	add	r1, sp, #24
 8007318:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800731c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007320:	e7c1      	b.n	80072a6 <__kernel_rem_pio2f+0x14a>
 8007322:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007326:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	da2f      	bge.n	8007390 <__kernel_rem_pio2f+0x234>
 8007330:	f04f 0b00 	mov.w	fp, #0
 8007334:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	f040 8098 	bne.w	8007470 <__kernel_rem_pio2f+0x314>
 8007340:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007344:	469c      	mov	ip, r3
 8007346:	2200      	movs	r2, #0
 8007348:	45bc      	cmp	ip, r7
 800734a:	da48      	bge.n	80073de <__kernel_rem_pio2f+0x282>
 800734c:	2a00      	cmp	r2, #0
 800734e:	d05f      	beq.n	8007410 <__kernel_rem_pio2f+0x2b4>
 8007350:	aa06      	add	r2, sp, #24
 8007352:	3c08      	subs	r4, #8
 8007354:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007358:	2900      	cmp	r1, #0
 800735a:	d07d      	beq.n	8007458 <__kernel_rem_pio2f+0x2fc>
 800735c:	4620      	mov	r0, r4
 800735e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	f000 fa16 	bl	8007794 <scalbnf>
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007468 <__kernel_rem_pio2f+0x30c>
 800736e:	4619      	mov	r1, r3
 8007370:	2900      	cmp	r1, #0
 8007372:	f280 80af 	bge.w	80074d4 <__kernel_rem_pio2f+0x378>
 8007376:	4618      	mov	r0, r3
 8007378:	2400      	movs	r4, #0
 800737a:	2800      	cmp	r0, #0
 800737c:	f2c0 80d0 	blt.w	8007520 <__kernel_rem_pio2f+0x3c4>
 8007380:	a942      	add	r1, sp, #264	; 0x108
 8007382:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007386:	4a36      	ldr	r2, [pc, #216]	; (8007460 <__kernel_rem_pio2f+0x304>)
 8007388:	eddf 7a38 	vldr	s15, [pc, #224]	; 800746c <__kernel_rem_pio2f+0x310>
 800738c:	2100      	movs	r1, #0
 800738e:	e0bb      	b.n	8007508 <__kernel_rem_pio2f+0x3ac>
 8007390:	f04f 0b02 	mov.w	fp, #2
 8007394:	e78a      	b.n	80072ac <__kernel_rem_pio2f+0x150>
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	b948      	cbnz	r0, 80073ae <__kernel_rem_pio2f+0x252>
 800739a:	b11a      	cbz	r2, 80073a4 <__kernel_rem_pio2f+0x248>
 800739c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f10e 0e01 	add.w	lr, lr, #1
 80073a8:	3304      	adds	r3, #4
 80073aa:	4610      	mov	r0, r2
 80073ac:	e784      	b.n	80072b8 <__kernel_rem_pio2f+0x15c>
 80073ae:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	4602      	mov	r2, r0
 80073b6:	e7f5      	b.n	80073a4 <__kernel_rem_pio2f+0x248>
 80073b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80073bc:	ab06      	add	r3, sp, #24
 80073be:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80073c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c6:	aa06      	add	r2, sp, #24
 80073c8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80073cc:	e77d      	b.n	80072ca <__kernel_rem_pio2f+0x16e>
 80073ce:	f10a 3cff 	add.w	ip, sl, #4294967295
 80073d2:	ab06      	add	r3, sp, #24
 80073d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80073d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073dc:	e7f3      	b.n	80073c6 <__kernel_rem_pio2f+0x26a>
 80073de:	a906      	add	r1, sp, #24
 80073e0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80073e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073e8:	4302      	orrs	r2, r0
 80073ea:	e7ad      	b.n	8007348 <__kernel_rem_pio2f+0x1ec>
 80073ec:	3001      	adds	r0, #1
 80073ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d0fa      	beq.n	80073ec <__kernel_rem_pio2f+0x290>
 80073f6:	a91a      	add	r1, sp, #104	; 0x68
 80073f8:	eb0a 0208 	add.w	r2, sl, r8
 80073fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007400:	f10a 0301 	add.w	r3, sl, #1
 8007404:	eb0a 0100 	add.w	r1, sl, r0
 8007408:	4299      	cmp	r1, r3
 800740a:	da04      	bge.n	8007416 <__kernel_rem_pio2f+0x2ba>
 800740c:	468a      	mov	sl, r1
 800740e:	e70e      	b.n	800722e <__kernel_rem_pio2f+0xd2>
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	2001      	movs	r0, #1
 8007414:	e7eb      	b.n	80073ee <__kernel_rem_pio2f+0x292>
 8007416:	9803      	ldr	r0, [sp, #12]
 8007418:	f8dd c004 	ldr.w	ip, [sp, #4]
 800741c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007420:	9000      	str	r0, [sp, #0]
 8007422:	ee07 0a90 	vmov	s15, r0
 8007426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800742a:	2000      	movs	r0, #0
 800742c:	ece2 7a01 	vstmia	r2!, {s15}
 8007430:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800746c <__kernel_rem_pio2f+0x310>
 8007434:	4696      	mov	lr, r2
 8007436:	4548      	cmp	r0, r9
 8007438:	dd06      	ble.n	8007448 <__kernel_rem_pio2f+0x2ec>
 800743a:	a842      	add	r0, sp, #264	; 0x108
 800743c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007440:	edc0 7a00 	vstr	s15, [r0]
 8007444:	3301      	adds	r3, #1
 8007446:	e7df      	b.n	8007408 <__kernel_rem_pio2f+0x2ac>
 8007448:	ecfc 6a01 	vldmia	ip!, {s13}
 800744c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007450:	3001      	adds	r0, #1
 8007452:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007456:	e7ee      	b.n	8007436 <__kernel_rem_pio2f+0x2da>
 8007458:	3b01      	subs	r3, #1
 800745a:	e779      	b.n	8007350 <__kernel_rem_pio2f+0x1f4>
 800745c:	080080d8 	.word	0x080080d8
 8007460:	080080ac 	.word	0x080080ac
 8007464:	43800000 	.word	0x43800000
 8007468:	3b800000 	.word	0x3b800000
 800746c:	00000000 	.word	0x00000000
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	eeb0 0a48 	vmov.f32	s0, s16
 8007476:	1b98      	subs	r0, r3, r6
 8007478:	f000 f98c 	bl	8007794 <scalbnf>
 800747c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007464 <__kernel_rem_pio2f+0x308>
 8007480:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007488:	db1b      	blt.n	80074c2 <__kernel_rem_pio2f+0x366>
 800748a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007468 <__kernel_rem_pio2f+0x30c>
 800748e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007492:	aa06      	add	r2, sp, #24
 8007494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007498:	a906      	add	r1, sp, #24
 800749a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800749e:	3408      	adds	r4, #8
 80074a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80074a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80074ac:	ee10 3a10 	vmov	r3, s0
 80074b0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80074b4:	ee17 2a90 	vmov	r2, s15
 80074b8:	f10a 0301 	add.w	r3, sl, #1
 80074bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80074c0:	e74c      	b.n	800735c <__kernel_rem_pio2f+0x200>
 80074c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80074c6:	aa06      	add	r2, sp, #24
 80074c8:	ee10 3a10 	vmov	r3, s0
 80074cc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80074d0:	4653      	mov	r3, sl
 80074d2:	e743      	b.n	800735c <__kernel_rem_pio2f+0x200>
 80074d4:	aa42      	add	r2, sp, #264	; 0x108
 80074d6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80074da:	aa06      	add	r2, sp, #24
 80074dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	ee07 2a90 	vmov	s15, r2
 80074e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ea:	3901      	subs	r1, #1
 80074ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 80074f0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80074f4:	edc0 7a00 	vstr	s15, [r0]
 80074f8:	e73a      	b.n	8007370 <__kernel_rem_pio2f+0x214>
 80074fa:	ecf2 6a01 	vldmia	r2!, {s13}
 80074fe:	ecb6 7a01 	vldmia	r6!, {s14}
 8007502:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007506:	3101      	adds	r1, #1
 8007508:	42b9      	cmp	r1, r7
 800750a:	dc01      	bgt.n	8007510 <__kernel_rem_pio2f+0x3b4>
 800750c:	428c      	cmp	r4, r1
 800750e:	daf4      	bge.n	80074fa <__kernel_rem_pio2f+0x39e>
 8007510:	aa56      	add	r2, sp, #344	; 0x158
 8007512:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007516:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800751a:	3801      	subs	r0, #1
 800751c:	3401      	adds	r4, #1
 800751e:	e72c      	b.n	800737a <__kernel_rem_pio2f+0x21e>
 8007520:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007522:	2a02      	cmp	r2, #2
 8007524:	dc0a      	bgt.n	800753c <__kernel_rem_pio2f+0x3e0>
 8007526:	2a00      	cmp	r2, #0
 8007528:	dc61      	bgt.n	80075ee <__kernel_rem_pio2f+0x492>
 800752a:	d03c      	beq.n	80075a6 <__kernel_rem_pio2f+0x44a>
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	f003 0007 	and.w	r0, r3, #7
 8007532:	b057      	add	sp, #348	; 0x15c
 8007534:	ecbd 8b04 	vpop	{d8-d9}
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800753e:	2a03      	cmp	r2, #3
 8007540:	d1f4      	bne.n	800752c <__kernel_rem_pio2f+0x3d0>
 8007542:	aa2e      	add	r2, sp, #184	; 0xb8
 8007544:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007548:	4608      	mov	r0, r1
 800754a:	461c      	mov	r4, r3
 800754c:	2c00      	cmp	r4, #0
 800754e:	f1a0 0004 	sub.w	r0, r0, #4
 8007552:	dc59      	bgt.n	8007608 <__kernel_rem_pio2f+0x4ac>
 8007554:	4618      	mov	r0, r3
 8007556:	2801      	cmp	r0, #1
 8007558:	f1a1 0104 	sub.w	r1, r1, #4
 800755c:	dc64      	bgt.n	8007628 <__kernel_rem_pio2f+0x4cc>
 800755e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800746c <__kernel_rem_pio2f+0x310>
 8007562:	2b01      	cmp	r3, #1
 8007564:	dc70      	bgt.n	8007648 <__kernel_rem_pio2f+0x4ec>
 8007566:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800756a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800756e:	f1bb 0f00 	cmp.w	fp, #0
 8007572:	d172      	bne.n	800765a <__kernel_rem_pio2f+0x4fe>
 8007574:	edc5 6a00 	vstr	s13, [r5]
 8007578:	ed85 7a01 	vstr	s14, [r5, #4]
 800757c:	edc5 7a02 	vstr	s15, [r5, #8]
 8007580:	e7d4      	b.n	800752c <__kernel_rem_pio2f+0x3d0>
 8007582:	aa2e      	add	r2, sp, #184	; 0xb8
 8007584:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007588:	ed91 7a00 	vldr	s14, [r1]
 800758c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007590:	3b01      	subs	r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	daf5      	bge.n	8007582 <__kernel_rem_pio2f+0x426>
 8007596:	f1bb 0f00 	cmp.w	fp, #0
 800759a:	d001      	beq.n	80075a0 <__kernel_rem_pio2f+0x444>
 800759c:	eef1 7a67 	vneg.f32	s15, s15
 80075a0:	edc5 7a00 	vstr	s15, [r5]
 80075a4:	e7c2      	b.n	800752c <__kernel_rem_pio2f+0x3d0>
 80075a6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800746c <__kernel_rem_pio2f+0x310>
 80075aa:	e7f2      	b.n	8007592 <__kernel_rem_pio2f+0x436>
 80075ac:	aa2e      	add	r2, sp, #184	; 0xb8
 80075ae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80075b2:	edd0 7a00 	vldr	s15, [r0]
 80075b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075ba:	3901      	subs	r1, #1
 80075bc:	2900      	cmp	r1, #0
 80075be:	daf5      	bge.n	80075ac <__kernel_rem_pio2f+0x450>
 80075c0:	f1bb 0f00 	cmp.w	fp, #0
 80075c4:	d017      	beq.n	80075f6 <__kernel_rem_pio2f+0x49a>
 80075c6:	eef1 7a47 	vneg.f32	s15, s14
 80075ca:	edc5 7a00 	vstr	s15, [r5]
 80075ce:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80075d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075d6:	a82f      	add	r0, sp, #188	; 0xbc
 80075d8:	2101      	movs	r1, #1
 80075da:	428b      	cmp	r3, r1
 80075dc:	da0e      	bge.n	80075fc <__kernel_rem_pio2f+0x4a0>
 80075de:	f1bb 0f00 	cmp.w	fp, #0
 80075e2:	d001      	beq.n	80075e8 <__kernel_rem_pio2f+0x48c>
 80075e4:	eef1 7a67 	vneg.f32	s15, s15
 80075e8:	edc5 7a01 	vstr	s15, [r5, #4]
 80075ec:	e79e      	b.n	800752c <__kernel_rem_pio2f+0x3d0>
 80075ee:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800746c <__kernel_rem_pio2f+0x310>
 80075f2:	4619      	mov	r1, r3
 80075f4:	e7e2      	b.n	80075bc <__kernel_rem_pio2f+0x460>
 80075f6:	eef0 7a47 	vmov.f32	s15, s14
 80075fa:	e7e6      	b.n	80075ca <__kernel_rem_pio2f+0x46e>
 80075fc:	ecb0 7a01 	vldmia	r0!, {s14}
 8007600:	3101      	adds	r1, #1
 8007602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007606:	e7e8      	b.n	80075da <__kernel_rem_pio2f+0x47e>
 8007608:	edd0 7a00 	vldr	s15, [r0]
 800760c:	edd0 6a01 	vldr	s13, [r0, #4]
 8007610:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007614:	3c01      	subs	r4, #1
 8007616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800761a:	ed80 7a00 	vstr	s14, [r0]
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	edc0 7a01 	vstr	s15, [r0, #4]
 8007626:	e791      	b.n	800754c <__kernel_rem_pio2f+0x3f0>
 8007628:	edd1 7a00 	vldr	s15, [r1]
 800762c:	edd1 6a01 	vldr	s13, [r1, #4]
 8007630:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007634:	3801      	subs	r0, #1
 8007636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800763a:	ed81 7a00 	vstr	s14, [r1]
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	edc1 7a01 	vstr	s15, [r1, #4]
 8007646:	e786      	b.n	8007556 <__kernel_rem_pio2f+0x3fa>
 8007648:	aa2e      	add	r2, sp, #184	; 0xb8
 800764a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800764e:	ed91 7a00 	vldr	s14, [r1]
 8007652:	3b01      	subs	r3, #1
 8007654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007658:	e783      	b.n	8007562 <__kernel_rem_pio2f+0x406>
 800765a:	eef1 6a66 	vneg.f32	s13, s13
 800765e:	eeb1 7a47 	vneg.f32	s14, s14
 8007662:	edc5 6a00 	vstr	s13, [r5]
 8007666:	ed85 7a01 	vstr	s14, [r5, #4]
 800766a:	eef1 7a67 	vneg.f32	s15, s15
 800766e:	e785      	b.n	800757c <__kernel_rem_pio2f+0x420>

08007670 <__kernel_sinf>:
 8007670:	ee10 3a10 	vmov	r3, s0
 8007674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007678:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800767c:	da04      	bge.n	8007688 <__kernel_sinf+0x18>
 800767e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007682:	ee17 3a90 	vmov	r3, s15
 8007686:	b35b      	cbz	r3, 80076e0 <__kernel_sinf+0x70>
 8007688:	ee20 7a00 	vmul.f32	s14, s0, s0
 800768c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80076e4 <__kernel_sinf+0x74>
 8007690:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80076e8 <__kernel_sinf+0x78>
 8007694:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007698:	eddf 7a14 	vldr	s15, [pc, #80]	; 80076ec <__kernel_sinf+0x7c>
 800769c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80076a0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80076f0 <__kernel_sinf+0x80>
 80076a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80076a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 80076f4 <__kernel_sinf+0x84>
 80076ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80076b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80076b4:	b930      	cbnz	r0, 80076c4 <__kernel_sinf+0x54>
 80076b6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80076f8 <__kernel_sinf+0x88>
 80076ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80076be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80076c2:	4770      	bx	lr
 80076c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80076c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80076cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80076d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80076d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80076fc <__kernel_sinf+0x8c>
 80076d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80076dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80076e8:	b2d72f34 	.word	0xb2d72f34
 80076ec:	3638ef1b 	.word	0x3638ef1b
 80076f0:	b9500d01 	.word	0xb9500d01
 80076f4:	3c088889 	.word	0x3c088889
 80076f8:	be2aaaab 	.word	0xbe2aaaab
 80076fc:	3e2aaaab 	.word	0x3e2aaaab

08007700 <fabsf>:
 8007700:	ee10 3a10 	vmov	r3, s0
 8007704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007708:	ee00 3a10 	vmov	s0, r3
 800770c:	4770      	bx	lr
	...

08007710 <floorf>:
 8007710:	ee10 3a10 	vmov	r3, s0
 8007714:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007718:	3a7f      	subs	r2, #127	; 0x7f
 800771a:	2a16      	cmp	r2, #22
 800771c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007720:	dc2a      	bgt.n	8007778 <floorf+0x68>
 8007722:	2a00      	cmp	r2, #0
 8007724:	da11      	bge.n	800774a <floorf+0x3a>
 8007726:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007788 <floorf+0x78>
 800772a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800772e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	dd05      	ble.n	8007744 <floorf+0x34>
 8007738:	2b00      	cmp	r3, #0
 800773a:	da23      	bge.n	8007784 <floorf+0x74>
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <floorf+0x7c>)
 800773e:	2900      	cmp	r1, #0
 8007740:	bf18      	it	ne
 8007742:	4613      	movne	r3, r2
 8007744:	ee00 3a10 	vmov	s0, r3
 8007748:	4770      	bx	lr
 800774a:	4911      	ldr	r1, [pc, #68]	; (8007790 <floorf+0x80>)
 800774c:	4111      	asrs	r1, r2
 800774e:	420b      	tst	r3, r1
 8007750:	d0fa      	beq.n	8007748 <floorf+0x38>
 8007752:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007788 <floorf+0x78>
 8007756:	ee30 0a27 	vadd.f32	s0, s0, s15
 800775a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	ddef      	ble.n	8007744 <floorf+0x34>
 8007764:	2b00      	cmp	r3, #0
 8007766:	bfbe      	ittt	lt
 8007768:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800776c:	fa40 f202 	asrlt.w	r2, r0, r2
 8007770:	189b      	addlt	r3, r3, r2
 8007772:	ea23 0301 	bic.w	r3, r3, r1
 8007776:	e7e5      	b.n	8007744 <floorf+0x34>
 8007778:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800777c:	d3e4      	bcc.n	8007748 <floorf+0x38>
 800777e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007782:	4770      	bx	lr
 8007784:	2300      	movs	r3, #0
 8007786:	e7dd      	b.n	8007744 <floorf+0x34>
 8007788:	7149f2ca 	.word	0x7149f2ca
 800778c:	bf800000 	.word	0xbf800000
 8007790:	007fffff 	.word	0x007fffff

08007794 <scalbnf>:
 8007794:	ee10 3a10 	vmov	r3, s0
 8007798:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800779c:	d025      	beq.n	80077ea <scalbnf+0x56>
 800779e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80077a2:	d302      	bcc.n	80077aa <scalbnf+0x16>
 80077a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80077a8:	4770      	bx	lr
 80077aa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80077ae:	d122      	bne.n	80077f6 <scalbnf+0x62>
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <scalbnf+0xc8>)
 80077b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007860 <scalbnf+0xcc>
 80077b6:	4298      	cmp	r0, r3
 80077b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077bc:	db16      	blt.n	80077ec <scalbnf+0x58>
 80077be:	ee10 3a10 	vmov	r3, s0
 80077c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80077c6:	3a19      	subs	r2, #25
 80077c8:	4402      	add	r2, r0
 80077ca:	2afe      	cmp	r2, #254	; 0xfe
 80077cc:	dd15      	ble.n	80077fa <scalbnf+0x66>
 80077ce:	ee10 3a10 	vmov	r3, s0
 80077d2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007864 <scalbnf+0xd0>
 80077d6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007868 <scalbnf+0xd4>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	eeb0 7a67 	vmov.f32	s14, s15
 80077e0:	bfb8      	it	lt
 80077e2:	eef0 7a66 	vmovlt.f32	s15, s13
 80077e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80077ea:	4770      	bx	lr
 80077ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800786c <scalbnf+0xd8>
 80077f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077f4:	4770      	bx	lr
 80077f6:	0dd2      	lsrs	r2, r2, #23
 80077f8:	e7e6      	b.n	80077c8 <scalbnf+0x34>
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	dd06      	ble.n	800780c <scalbnf+0x78>
 80077fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007802:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007806:	ee00 3a10 	vmov	s0, r3
 800780a:	4770      	bx	lr
 800780c:	f112 0f16 	cmn.w	r2, #22
 8007810:	da1a      	bge.n	8007848 <scalbnf+0xb4>
 8007812:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007816:	4298      	cmp	r0, r3
 8007818:	ee10 3a10 	vmov	r3, s0
 800781c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007820:	dd0a      	ble.n	8007838 <scalbnf+0xa4>
 8007822:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007864 <scalbnf+0xd0>
 8007826:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007868 <scalbnf+0xd4>
 800782a:	eef0 7a40 	vmov.f32	s15, s0
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf18      	it	ne
 8007832:	eeb0 0a47 	vmovne.f32	s0, s14
 8007836:	e7db      	b.n	80077f0 <scalbnf+0x5c>
 8007838:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800786c <scalbnf+0xd8>
 800783c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007870 <scalbnf+0xdc>
 8007840:	eef0 7a40 	vmov.f32	s15, s0
 8007844:	2b00      	cmp	r3, #0
 8007846:	e7f3      	b.n	8007830 <scalbnf+0x9c>
 8007848:	3219      	adds	r2, #25
 800784a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800784e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007852:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007874 <scalbnf+0xe0>
 8007856:	ee07 3a10 	vmov	s14, r3
 800785a:	e7c4      	b.n	80077e6 <scalbnf+0x52>
 800785c:	ffff3cb0 	.word	0xffff3cb0
 8007860:	4c000000 	.word	0x4c000000
 8007864:	7149f2ca 	.word	0x7149f2ca
 8007868:	f149f2ca 	.word	0xf149f2ca
 800786c:	0da24260 	.word	0x0da24260
 8007870:	8da24260 	.word	0x8da24260
 8007874:	33000000 	.word	0x33000000

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
