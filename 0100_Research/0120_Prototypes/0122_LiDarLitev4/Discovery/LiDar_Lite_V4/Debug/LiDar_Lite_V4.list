
LiDar_Lite_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf8  08007cf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d00  08007d00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb4  20000074  08007d7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08007d7c  00020d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d25b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004db2  00000000  00000000  0004d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  000520b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  00053ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ffa7  00000000  00000000  00055d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258be  00000000  00000000  00085d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128ea2  00000000  00000000  000ab5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d4467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c8  00000000  00000000  001d44bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c58 	.word	0x08007c58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007c58 	.word	0x08007c58

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <LIDAR_init>:

#include "../Inc/LIDARLite_v4LED.h"

//Initialize the I2C port
bool LIDAR_init(LIDARLite_TypeDef* lidar, uint8_t addr, I2C_HandleTypeDef* i2cPort)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	460b      	mov	r3, r1
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	72fb      	strb	r3, [r7, #11]
	lidar->addr = addr;		//Save LIDAR address
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	7afa      	ldrb	r2, [r7, #11]
 80005ca:	701a      	strb	r2, [r3, #0]
	_i2cPort = i2cPort;		//Save I2C port
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <LIDAR_init+0x38>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]

	//Read status to check if lidar is connected
	lidar->isConnected = LIDAR_read(lidar, STATUS, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 f894 	bl	8000704 <LIDAR_read>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	735a      	strb	r2, [r3, #13]

	return lidar->isConnected;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	7b5b      	ldrb	r3, [r3, #13]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000018c 	.word	0x2000018c

080005f4 <LIDAR_takeRange>:
/*------------------------------------------------------------------------------
  Take Range
  Initiate a distance measurement by writing to register 0x00.
------------------------------------------------------------------------------*/
void LIDAR_takeRange(LIDARLite_TypeDef* lidar)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	lidar->buf[0] = 0x04;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2204      	movs	r2, #4
 8000600:	705a      	strb	r2, [r3, #1]
	LIDAR_write(lidar, ACQ_COMMANDS, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f852 	bl	80006b0 <LIDAR_write>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <LIDAR_waitForBusy>:
/*------------------------------------------------------------------------------
  Wait for Busy Flag
  Blocking function to wait until the Lidar Lite's internal busy flag goes low
------------------------------------------------------------------------------*/
void LIDAR_waitForBusy(LIDARLite_TypeDef* lidar)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag;

	do
	{
		busyFlag = LIDAR_getBusyFlag(lidar);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f80a 	bl	8000636 <LIDAR_getBusyFlag>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	} while (busyFlag);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f7      	bne.n	800061c <LIDAR_waitForBusy+0x8>
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <LIDAR_getBusyFlag>:
/*------------------------------------------------------------------------------
  Get Busy Flag
  Read BUSY flag from device registers. Function will return 0x00 if not busy.
------------------------------------------------------------------------------*/
uint8_t LIDAR_getBusyFlag(LIDARLite_TypeDef* lidar)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	uint8_t busyFlag; // busyFlag monitors when the device is done with a measurement

	// Read status register to check busy flag
	LIDAR_read(lidar, STATUS, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f85e 	bl	8000704 <LIDAR_read>

	// STATUS bit 0 is busyFlag
	busyFlag = lidar->buf[0] & 0x01;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]

	return busyFlag;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <LIDAR_readDistance>:
/*------------------------------------------------------------------------------
  Read Distance
  Read and return the result of the most recent distance measurement.
------------------------------------------------------------------------------*/
uint16_t LIDAR_readDistance(LIDARLite_TypeDef* lidar)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint16_t distance;

	// Read two bytes from registers 0x10 and 0x11
	LIDAR_read(lidar, FULL_DELAY_LOW, 2);
 8000664:	2202      	movs	r2, #2
 8000666:	2110      	movs	r1, #16
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f84b 	bl	8000704 <LIDAR_read>

	distance = lidar->buf[0] + (lidar->buf[1]<<8);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	b29b      	uxth	r3, r3
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	81fb      	strh	r3, [r7, #14]

	return distance; //This is the distance in centimeters
 8000682:	89fb      	ldrh	r3, [r7, #14]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <LIDAR_getDistance>:


//Get distance measurement function
uint16_t LIDAR_getDistance(LIDARLite_TypeDef* lidar)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	// 1. Trigger a range measurement.
	LIDAR_takeRange(lidar);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffad 	bl	80005f4 <LIDAR_takeRange>

	// 2. Wait for busyFlag to indicate the device is idle.
	LIDAR_waitForBusy(lidar);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffba 	bl	8000614 <LIDAR_waitForBusy>

	// 3. Read new distance data from device registers
	return LIDAR_readDistance(lidar);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffdb 	bl	800065c <LIDAR_readDistance>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LIDAR_write>:
  regAddr:   register address to write to
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to write
------------------------------------------------------------------------------*/
bool LIDAR_write(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
 80006bc:	4613      	mov	r3, r2
 80006be:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <LIDAR_write+0x50>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b299      	uxth	r1, r3
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	b29c      	uxth	r4, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	78ba      	ldrb	r2, [r7, #2]
 80006d4:	b292      	uxth	r2, r2
 80006d6:	f04f 35ff 	mov.w	r5, #4294967295
 80006da:	9502      	str	r5, [sp, #8]
 80006dc:	9201      	str	r2, [sp, #4]
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	4622      	mov	r2, r4
 80006e4:	f002 fb9a 	bl	8002e1c <HAL_I2C_Mem_Write>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in transmission
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <LIDAR_write+0x46>
		return false;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <LIDAR_write+0x48>
	else
		return true;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000700:	2000018c 	.word	0x2000018c

08000704 <LIDAR_read>:
  regAddr:   register address to read
  dataBytes: pointer to array of bytes to write
  numBytes:  number of bytes in 'dataBytes' array to read
------------------------------------------------------------------------------*/
bool LIDAR_read(LIDARLite_TypeDef* lidar, uint8_t cmd, uint8_t numBytes)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af04      	add	r7, sp, #16
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
 8000710:	4613      	mov	r3, r2
 8000712:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(_i2cPort, lidar->addr, cmd, I2C_MEMADD_SIZE_8BIT, lidar->buf, numBytes, HAL_MAX_DELAY);
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <LIDAR_read+0x50>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b299      	uxth	r1, r3
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	b29c      	uxth	r4, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	78ba      	ldrb	r2, [r7, #2]
 8000728:	b292      	uxth	r2, r2
 800072a:	f04f 35ff 	mov.w	r5, #4294967295
 800072e:	9502      	str	r5, [sp, #8]
 8000730:	9201      	str	r2, [sp, #4]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	4622      	mov	r2, r4
 8000738:	f002 fc84 	bl	8003044 <HAL_I2C_Mem_Read>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK)	//Error in reception
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <LIDAR_read+0x46>
		return false;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <LIDAR_read+0x48>
	else
		return true;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bdb0      	pop	{r4, r5, r7, pc}
 8000754:	2000018c 	.word	0x2000018c

08000758 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000776:	b672      	cpsid	i
}
 8000778:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fc4a 	bl	8001012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f857 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8000782:	f000 f915 	bl	80009b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f953 	bl	8000a30 <MX_USART1_UART_Init>

  //Connect to LIDAR
  bool connect = LIDAR_init(&lidar, LIDAR_DEFAULT_ADDR, &hi2c1);
 800078a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <main+0xac>)
 8000790:	21c4      	movs	r1, #196	; 0xc4
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff10 	bl	80005b8 <LIDAR_init>
 8000798:	4603      	mov	r3, r0
 800079a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if(connect)
 800079e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00a      	beq.n	80007bc <main+0x4c>
	  strcpy(str, "Successfully connected.\r\n");
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <main+0xb0>)
 80007aa:	461c      	mov	r4, r3
 80007ac:	4615      	mov	r5, r2
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	c403      	stmia	r4!, {r0, r1}
 80007b8:	8022      	strh	r2, [r4, #0]
 80007ba:	e004      	b.n	80007c6 <main+0x56>
  else
	  strcpy(str, "Error.\r\n");
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <main+0xb4>)
 80007c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c2:	c303      	stmia	r3!, {r0, r1}
 80007c4:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd21 	bl	8000210 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	1d39      	adds	r1, r7, #4
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <main+0xb8>)
 80007da:	f004 fce3 	bl	80051a4 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 80007de:	b662      	cpsie	i
}
 80007e0:	bf00      	nop
  __enable_irq();
  while (1)
  {
	  distance = LIDAR_getDistance(&lidar);
 80007e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff50 	bl	800068c <LIDAR_getDistance>
 80007ec:	4603      	mov	r3, r0
 80007ee:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  sprintf(str, "Distance: %icm\r\n", distance);
 80007f0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	490d      	ldr	r1, [pc, #52]	; (800082c <main+0xbc>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 fec8 	bl	800758c <siprintf>

	  HAL_UART_Transmit(&huart1, str, strlen(str), HAL_MAX_DELAY);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fd06 	bl	8000210 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	1d39      	adds	r1, r7, #4
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <main+0xb8>)
 8000810:	f004 fcc8 	bl	80051a4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 fc29 	bl	800106c <HAL_Delay>
  {
 800081a:	e7e2      	b.n	80007e2 <main+0x72>
 800081c:	200003e4 	.word	0x200003e4
 8000820:	08007c70 	.word	0x08007c70
 8000824:	08007c8c 	.word	0x08007c8c
 8000828:	200006b0 	.word	0x200006b0
 800082c:	08007c98 	.word	0x08007c98

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0b4      	sub	sp, #208	; 0xd0
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800083a:	2230      	movs	r2, #48	; 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 fde2 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2284      	movs	r2, #132	; 0x84
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f006 fdd3 	bl	8007408 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000862:	f003 f87f 	bl	8003964 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <SystemClock_Config+0x174>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a4e      	ldr	r2, [pc, #312]	; (80009a4 <SystemClock_Config+0x174>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <SystemClock_Config+0x174>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087e:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <SystemClock_Config+0x178>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <SystemClock_Config+0x178>)
 8000884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <SystemClock_Config+0x178>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000896:	2309      	movs	r3, #9
 8000898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008b8:	2319      	movs	r3, #25
 80008ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80008be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008cc:	2309      	movs	r3, #9
 80008ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 f8a4 	bl	8003a24 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008e2:	f000 f8e7 	bl	8000ab4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e6:	f003 f84d 	bl	8003984 <HAL_PWREx_EnableOverDrive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f0:	f000 f8e0 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000916:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800091a:	2106      	movs	r1, #6
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fb25 	bl	8003f6c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000928:	f000 f8c4 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <SystemClock_Config+0x17c>)
 800092e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000940:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000944:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000946:	2305      	movs	r3, #5
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800094e:	2303      	movs	r3, #3
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800095a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000966:	2300      	movs	r3, #0
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800096a:	2300      	movs	r3, #0
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800096e:	2300      	movs	r3, #0
 8000970:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000972:	2300      	movs	r3, #0
 8000974:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000976:	2300      	movs	r3, #0
 8000978:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800097a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800097e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fcf5 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000998:	f000 f88c 	bl	8000ab4 <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	37d0      	adds	r7, #208	; 0xd0
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000
 80009ac:	01b14868 	.word	0x01b14868

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	f002 f986 	bl	8002cfc <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f85d 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009fe:	f002 fe57 	bl	80036b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f854 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C1_Init+0x74>)
 8000a10:	f002 fe99 	bl	8003746 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f84b 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200003e4 	.word	0x200003e4
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	00401959 	.word	0x00401959

08000a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_USART1_UART_Init+0x5c>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0x58>)
 8000a74:	f004 fb48 	bl	8005108 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f819 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200006b0 	.word	0x200006b0
 8000a8c:	40011000 	.word	0x40011000

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f000 fac3 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	210f      	movs	r1, #15
 8000afa:	f06f 0001 	mvn.w	r0, #1
 8000afe:	f000 fb91 	bl	8001224 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <HAL_I2C_MspInit+0xdc>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d129      	bne.n	8000b86 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b50:	2312      	movs	r3, #18
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <HAL_I2C_MspInit+0xe4>)
 8000b68:	f000 fc96 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b84:	e02d      	b.n	8000be2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <HAL_I2C_MspInit+0xe8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d128      	bne.n	8000be2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ba8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <HAL_I2C_MspInit+0xec>)
 8000bc6:	f000 fc67 	bl	8001498 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_I2C_MspInit+0xe0>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	; 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40005c00 	.word	0x40005c00
 8000bfc:	40021c00 	.word	0x40021c00

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <HAL_TIM_Base_MspInit+0xc8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10c      	bne.n	8000c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000c2a:	e046      	b.n	8000cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c34:	d10c      	bne.n	8000c50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
}
 8000c4e:	e034      	b.n	8000cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10c      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
}
 8000c72:	e022      	b.n	8000cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_TIM_Base_MspInit+0xd4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10c      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
}
 8000c96:	e010      	b.n	8000cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_TIM_Base_MspInit+0xd8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10b      	bne.n	8000cba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_TIM_Base_MspInit+0xcc>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
}
 8000cba:	bf00      	nop
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40000c00 	.word	0x40000c00
 8000cd8:	40010400 	.word	0x40010400

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <HAL_UART_MspInit+0x110>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d145      	bne.n	8000d8a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a3b      	ldr	r2, [pc, #236]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a35      	ldr	r2, [pc, #212]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d56:	2307      	movs	r3, #7
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4824      	ldr	r0, [pc, #144]	; (8000df4 <HAL_UART_MspInit+0x118>)
 8000d62:	f000 fb99 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <HAL_UART_MspInit+0x11c>)
 8000d84:	f000 fb88 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d88:	e02c      	b.n	8000de4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_UART_MspInit+0x120>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d127      	bne.n	8000de4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_UART_MspInit+0x114>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <HAL_UART_MspInit+0x124>)
 8000de0:	f000 fb5a 	bl	8001498 <HAL_GPIO_Init>
}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40011400 	.word	0x40011400
 8000e00:	40020800 	.word	0x40020800

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	2036      	movs	r0, #54	; 0x36
 8000e1a:	f000 fa03 	bl	8001224 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e1e:	2036      	movs	r0, #54	; 0x36
 8000e20:	f000 fa1c 	bl	800125c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_InitTick+0xa0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3c:	f107 0210 	add.w	r2, r7, #16
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fa66 	bl	8004318 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e4c:	f003 fa3c 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8000e50:	4603      	mov	r3, r0
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <HAL_InitTick+0xa4>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9b      	lsrs	r3, r3, #18
 8000e60:	3b01      	subs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_InitTick+0xa8>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_InitTick+0xac>)
 8000e68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_InitTick+0xa8>)
 8000e6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_InitTick+0xa8>)
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_InitTick+0xa8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_InitTick+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_InitTick+0xa8>)
 8000e86:	f003 fe69 	bl	8004b5c <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d104      	bne.n	8000e9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e90:	4806      	ldr	r0, [pc, #24]	; (8000eac <HAL_InitTick+0xa8>)
 8000e92:	f003 febb 	bl	8004c0c <HAL_TIM_Base_Start_IT>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	200009c4 	.word	0x200009c4
 8000eb0:	40001000 	.word	0x40001000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM6_DAC_IRQHandler+0x10>)
 8000ee6:	f003 ff09 	bl	8004cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200009c4 	.word	0x200009c4

08000ef4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <OTG_FS_IRQHandler+0x10>)
 8000efa:	f000 fc79 	bl	80017f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000a14 	.word	0x20000a14

08000f08 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <LTDC_IRQHandler+0x10>)
 8000f0e:	f002 fc66 	bl	80037de <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000570 	.word	0x20000570

08000f1c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2D_IRQHandler+0x10>)
 8000f22:	f000 f9a9 	bl	8001278 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000824 	.word	0x20000824

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f006 fa1a 	bl	8007398 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20050000 	.word	0x20050000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	20000090 	.word	0x20000090
 8000f98:	20000d28 	.word	0x20000d28

08000f9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc6:	490e      	ldr	r1, [pc, #56]	; (8001000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fdc:	4c0b      	ldr	r4, [pc, #44]	; (800100c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fea:	f7ff ffd7 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f006 f9d9 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fbbd 	bl	8000770 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001004:	08007d08 	.word	0x08007d08
  ldr r2, =_sbss
 8001008:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800100c:	20000d28 	.word	0x20000d28

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>

08001012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f8f9 	bl	800120e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fef1 	bl	8000e04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001022:	f7ff fd4d 	bl	8000ac0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000a10 	.word	0x20000a10

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000a10 	.word	0x20000a10

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00
 80010f8:	05fa0000 	.word	0x05fa0000

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff4c 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001236:	f7ff ff61 	bl	80010fc <__NVIC_GetPriorityGrouping>
 800123a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff ffb1 	bl	80011a8 <NVIC_EncodePriority>
 8001246:	4602      	mov	r2, r0
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff80 	bl	8001154 <__NVIC_SetPriority>
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff54 	bl	8001118 <__NVIC_EnableIRQ>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d026      	beq.n	80012e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2204      	movs	r2, #4
 80012cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d026      	beq.n	8001340 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d021      	beq.n	8001340 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800130a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2220      	movs	r2, #32
 8001312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	f043 0202 	orr.w	r2, r3, #2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2204      	movs	r2, #4
 8001324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d026      	beq.n	8001398 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001350:	2b00      	cmp	r3, #0
 8001352:	d021      	beq.n	8001398 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001362:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001370:	f043 0204 	orr.w	r2, r3, #4
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d013      	beq.n	80013ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00e      	beq.n	80013ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2204      	movs	r2, #4
 80013c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f853 	bl	8001470 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d024      	beq.n	800141e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01f      	beq.n	800141e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2202      	movs	r2, #2
 80013f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	d01f      	beq.n	8001468 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01a      	beq.n	8001468 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001440:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2210      	movs	r2, #16
 8001448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f80e 	bl	8001484 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e175      	b.n	80017a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8164 	bne.w	800179e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d00b      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x100>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80be 	beq.w	800179e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_GPIO_Init+0x328>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_GPIO_Init+0x32c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d037      	beq.n	80016d6 <HAL_GPIO_Init+0x23e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_GPIO_Init+0x330>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d031      	beq.n	80016d2 <HAL_GPIO_Init+0x23a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a56      	ldr	r2, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x334>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x236>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <HAL_GPIO_Init+0x338>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x232>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_GPIO_Init+0x33c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x22e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x340>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x22a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_GPIO_Init+0x344>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x348>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <HAL_GPIO_Init+0x34c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x350>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x21a>
 80016ae:	2309      	movs	r3, #9
 80016b0:	e012      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b2:	230a      	movs	r3, #10
 80016b4:	e010      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b6:	2308      	movs	r3, #8
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x328>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_GPIO_Init+0x354>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_GPIO_Init+0x354>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x354>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_GPIO_Init+0x354>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae86 	bls.w	80014b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40022400 	.word	0x40022400
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 f9ba 	bl	8005b80 <USB_GetMode>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	f040 80ef 	bne.w	80019f2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f004 f99e 	bl	8005b5a <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80e5 	beq.w	80019f0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f004 f995 	bl	8005b5a <USB_ReadInterrupts>
 8001830:	4603      	mov	r3, r0
 8001832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800183a:	d104      	bne.n	8001846 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f985 	bl	8005b5a <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800185a:	d104      	bne.n	8001866 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f004 f975 	bl	8005b5a <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800187a:	d104      	bne.n	8001886 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001884:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f965 	bl	8005b5a <USB_ReadInterrupts>
 8001890:	4603      	mov	r3, r0
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d103      	bne.n	80018a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2202      	movs	r2, #2
 80018a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 f957 	bl	8005b5a <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018b6:	d115      	bne.n	80018e4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f005 fcdc 	bl	8007290 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f95c 	bl	8005b9c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f004 f936 	bl	8005b5a <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d102      	bne.n	8001900 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f001 f98a 	bl	8002c14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f004 f928 	bl	8005b5a <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b08      	cmp	r3, #8
 8001912:	d106      	bne.n	8001922 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f005 fc9f 	bl	8007258 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2208      	movs	r2, #8
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f004 f917 	bl	8005b5a <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b10      	cmp	r3, #16
 8001934:	d101      	bne.n	800193a <HAL_HCD_IRQHandler+0x14a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_HCD_IRQHandler+0x14c>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0210 	bic.w	r2, r2, #16
 800194e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 f88d 	bl	8002a70 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0210 	orr.w	r2, r2, #16
 8001964:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f8f5 	bl	8005b5a <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800197a:	d13a      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f004 f945 	bl	8005c10 <USB_HC_ReadInterrupt>
 8001986:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e025      	b.n	80019da <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d018      	beq.n	80019d4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b8:	d106      	bne.n	80019c8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f836 	bl	8001a32 <HCD_HC_IN_IRQHandler>
 80019c6:	e005      	b.n	80019d4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fc51 	bl	8002276 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3d4      	bcc.n	800198e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	e000      	b.n	80019f2 <HAL_HCD_IRQHandler+0x202>
      return;
 80019f0:	bf00      	nop
    }
  }
}
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_HCD_Stop+0x16>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e00d      	b.n	8001a2a <HAL_HCD_Stop+0x32>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 fa25 	bl	8005e6a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d119      	bne.n	8001a96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2304      	movs	r3, #4
 8001a72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	0151      	lsls	r1, r2, #5
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	440a      	add	r2, r1
 8001a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	60d3      	str	r3, [r2, #12]
 8001a94:	e101      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aac:	d12b      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	461a      	mov	r2, r3
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3361      	adds	r3, #97	; 0x61
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	0151      	lsls	r1, r2, #5
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	440a      	add	r2, r1
 8001aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f897 	bl	8005c32 <USB_HC_Halt>
 8001b04:	e0c9      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d109      	bne.n	8001b30 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	6093      	str	r3, [r2, #8]
 8001b2e:	e0b4      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d133      	bne.n	8001bae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	0151      	lsls	r1, r2, #5
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	440a      	add	r2, r1
 8001b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3361      	adds	r3, #97	; 0x61
 8001b74:	2205      	movs	r2, #5
 8001b76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	461a      	mov	r2, r3
 8001b86:	2310      	movs	r3, #16
 8001b88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	461a      	mov	r2, r3
 8001b98:	2308      	movs	r3, #8
 8001b9a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 f843 	bl	8005c32 <USB_HC_Halt>
 8001bac:	e075      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d134      	bne.n	8001c30 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	0151      	lsls	r1, r2, #5
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	440a      	add	r2, r1
 8001bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3361      	adds	r3, #97	; 0x61
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c04:	461a      	mov	r2, r3
 8001c06:	2310      	movs	r3, #16
 8001c08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	461a      	mov	r2, r3
 8001c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 f802 	bl	8005c32 <USB_HC_Halt>
 8001c2e:	e034      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	2b80      	cmp	r3, #128	; 0x80
 8001c44:	d129      	bne.n	8001c9a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	0151      	lsls	r1, r2, #5
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	440a      	add	r2, r1
 8001c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3361      	adds	r3, #97	; 0x61
 8001c74:	2206      	movs	r2, #6
 8001c76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 ffd5 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	461a      	mov	r2, r3
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb0:	d122      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	0151      	lsls	r1, r2, #5
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	440a      	add	r2, r1
 8001cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 ffa8 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001cf6:	e2ba      	b.n	800226e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	f040 811b 	bne.w	8001f46 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d019      	beq.n	8001d4c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3348      	adds	r3, #72	; 0x48
 8001d26:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	440b      	add	r3, r1
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	202c      	movs	r0, #44	; 0x2c
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	440b      	add	r3, r1
 8001d48:	3350      	adds	r3, #80	; 0x50
 8001d4a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3361      	adds	r3, #97	; 0x61
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	335c      	adds	r3, #92	; 0x5c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	333f      	adds	r3, #63	; 0x3f
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	333f      	adds	r3, #63	; 0x3f
 8001da4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d121      	bne.n	8001dee <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 ff2c 	bl	8005c32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	461a      	mov	r2, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	6093      	str	r3, [r2, #8]
 8001dec:	e066      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	333f      	adds	r3, #63	; 0x3f
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d127      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e20:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3360      	adds	r3, #96	; 0x60
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	202c      	movs	r0, #44	; 0x2c
 8001e3e:	fb00 f303 	mul.w	r3, r0, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3360      	adds	r3, #96	; 0x60
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f005 fa2e 	bl	80072ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e50:	e034      	b.n	8001ebc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	333f      	adds	r3, #63	; 0x3f
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d12a      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	3360      	adds	r3, #96	; 0x60
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3354      	adds	r3, #84	; 0x54
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2d8      	uxtb	r0, r3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3354      	adds	r3, #84	; 0x54
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	b2d9      	uxtb	r1, r3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	202c      	movs	r0, #44	; 0x2c
 8001eaa:	fb00 f303 	mul.w	r3, r0, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3360      	adds	r3, #96	; 0x60
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f005 f9f8 	bl	80072ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d12b      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3348      	adds	r3, #72	; 0x48
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	202c      	movs	r0, #44	; 0x2c
 8001eda:	fb00 f202 	mul.w	r2, r0, r2
 8001ede:	440a      	add	r2, r1
 8001ee0:	3240      	adds	r2, #64	; 0x40
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 81be 	beq.w	800226e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3354      	adds	r3, #84	; 0x54
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2d8      	uxtb	r0, r3
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3354      	adds	r3, #84	; 0x54
 8001f16:	4602      	mov	r2, r0
 8001f18:	701a      	strb	r2, [r3, #0]
}
 8001f1a:	e1a8      	b.n	800226e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	3354      	adds	r3, #84	; 0x54
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2d8      	uxtb	r0, r3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3354      	adds	r3, #84	; 0x54
 8001f40:	4602      	mov	r2, r0
 8001f42:	701a      	strb	r2, [r3, #0]
}
 8001f44:	e193      	b.n	800226e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	f040 8106 	bne.w	800216a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	440a      	add	r2, r1
 8001f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3361      	adds	r3, #97	; 0x61
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d109      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3360      	adds	r3, #96	; 0x60
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e0c9      	b.n	800213a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d109      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	2205      	movs	r2, #5
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e0b5      	b.n	800213a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3361      	adds	r3, #97	; 0x61
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d009      	beq.n	8001ff6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3361      	adds	r3, #97	; 0x61
 8001ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d150      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	335c      	adds	r3, #92	; 0x5c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	202c      	movs	r0, #44	; 0x2c
 800200e:	fb00 f303 	mul.w	r3, r0, r3
 8002012:	440b      	add	r3, r1
 8002014:	335c      	adds	r3, #92	; 0x5c
 8002016:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	335c      	adds	r3, #92	; 0x5c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d912      	bls.n	8002052 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	335c      	adds	r3, #92	; 0x5c
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	2204      	movs	r2, #4
 800204e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002050:	e073      	b.n	800213a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3360      	adds	r3, #96	; 0x60
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800207a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002082:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002096:	e050      	b.n	800213a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3361      	adds	r3, #97	; 0x61
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d122      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	2202      	movs	r2, #2
 80020bc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020d4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020dc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e023      	b.n	800213a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3361      	adds	r3, #97	; 0x61
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d119      	bne.n	800213a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	335c      	adds	r3, #92	; 0x5c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	202c      	movs	r0, #44	; 0x2c
 800211e:	fb00 f303 	mul.w	r3, r0, r3
 8002122:	440b      	add	r3, r1
 8002124:	335c      	adds	r3, #92	; 0x5c
 8002126:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	2204      	movs	r2, #4
 8002138:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	461a      	mov	r2, r3
 8002148:	2302      	movs	r3, #2
 800214a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	b2d9      	uxtb	r1, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	202c      	movs	r0, #44	; 0x2c
 8002156:	fb00 f303 	mul.w	r3, r0, r3
 800215a:	4413      	add	r3, r2
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f005 f8a2 	bl	80072ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002168:	e081      	b.n	800226e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b10      	cmp	r3, #16
 800217e:	d176      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	333f      	adds	r3, #63	; 0x3f
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d121      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	335c      	adds	r3, #92	; 0x5c
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	0151      	lsls	r1, r2, #5
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	440a      	add	r2, r1
 80021bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fd2e 	bl	8005c32 <USB_HC_Halt>
 80021d6:	e041      	b.n	800225c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	333f      	adds	r3, #63	; 0x3f
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d12d      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	335c      	adds	r3, #92	; 0x5c
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d120      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3361      	adds	r3, #97	; 0x61
 8002228:	2203      	movs	r2, #3
 800222a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	0151      	lsls	r1, r2, #5
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	440a      	add	r2, r1
 8002242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fceb 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2310      	movs	r3, #16
 800226c:	6093      	str	r3, [r2, #8]
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b088      	sub	sp, #32
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d119      	bne.n	80022da <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2304      	movs	r3, #4
 80022b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	0151      	lsls	r1, r2, #5
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	440a      	add	r2, r1
 80022ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80022d8:	e3c6      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d13e      	bne.n	800236e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	2320      	movs	r3, #32
 8002300:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	333d      	adds	r3, #61	; 0x3d
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	f040 83a8 	bne.w	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	333d      	adds	r3, #61	; 0x3d
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	440a      	add	r2, r1
 8002352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fc63 	bl	8005c32 <USB_HC_Halt>
}
 800236c:	e37c      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002384:	d122      	bne.n	80023cc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	0151      	lsls	r1, r2, #5
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	440a      	add	r2, r1
 800239c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fc3e 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	6093      	str	r3, [r2, #8]
}
 80023ca:	e34d      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d150      	bne.n	8002484 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d111      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	333d      	adds	r3, #61	; 0x3d
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	461a      	mov	r2, r3
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	440a      	add	r2, r1
 8002444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fbea 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	e2f1      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d13c      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3361      	adds	r3, #97	; 0x61
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	333d      	adds	r3, #61	; 0x3d
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	0151      	lsls	r1, r2, #5
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	440a      	add	r2, r1
 80024e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fb99 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	461a      	mov	r2, r3
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	6093      	str	r3, [r2, #8]
}
 8002512:	e2a9      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d12a      	bne.n	8002580 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2308      	movs	r3, #8
 800253a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	0151      	lsls	r1, r2, #5
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	440a      	add	r2, r1
 8002552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fb63 	bl	8005c32 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	2205      	movs	r2, #5
 800257c:	701a      	strb	r2, [r3, #0]
}
 800257e:	e273      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b10      	cmp	r3, #16
 8002594:	d150      	bne.n	8002638 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333d      	adds	r3, #61	; 0x3d
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d112      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	333c      	adds	r3, #60	; 0x3c
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	333d      	adds	r3, #61	; 0x3d
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	0151      	lsls	r1, r2, #5
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	440a      	add	r2, r1
 800260a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fb07 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	2310      	movs	r3, #16
 8002634:	6093      	str	r3, [r2, #8]
}
 8002636:	e217      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d174      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d121      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	2206      	movs	r2, #6
 8002666:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 facd 	bl	8005c32 <USB_HC_Halt>
 8002698:	e044      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	202c      	movs	r0, #44	; 0x2c
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	440b      	add	r3, r1
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	335c      	adds	r3, #92	; 0x5c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d920      	bls.n	8002712 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	335c      	adds	r3, #92	; 0x5c
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	2204      	movs	r2, #4
 80026f2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	b2d9      	uxtb	r1, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	202c      	movs	r0, #44	; 0x2c
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	4413      	add	r3, r2
 8002704:	3360      	adds	r3, #96	; 0x60
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f004 fdce 	bl	80072ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002710:	e008      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	e197      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d134      	bne.n	80027ba <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	0151      	lsls	r1, r2, #5
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	440a      	add	r2, r1
 8002766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fa59 	bl	8005c32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2310      	movs	r3, #16
 8002790:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	2208      	movs	r2, #8
 80027b6:	701a      	strb	r2, [r3, #0]
}
 80027b8:	e156      	b.n	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 814b 	bne.w	8002a68 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ec:	f023 0302 	bic.w	r3, r3, #2
 80027f0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d179      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3360      	adds	r3, #96	; 0x60
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333f      	adds	r3, #63	; 0x3f
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d00a      	beq.n	8002842 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800283c:	2b03      	cmp	r3, #3
 800283e:	f040 80fc 	bne.w	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d142      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80ed 	beq.w	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	334c      	adds	r3, #76	; 0x4c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	202c      	movs	r0, #44	; 0x2c
 8002876:	fb00 f202 	mul.w	r2, r0, r2
 800287a:	440a      	add	r2, r1
 800287c:	3240      	adds	r2, #64	; 0x40
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	4413      	add	r3, r2
 8002882:	3b01      	subs	r3, #1
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	202c      	movs	r0, #44	; 0x2c
 800288a:	fb00 f202 	mul.w	r2, r0, r2
 800288e:	440a      	add	r2, r1
 8002890:	3240      	adds	r2, #64	; 0x40
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	fbb3 f3f2 	udiv	r3, r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80ca 	beq.w	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3355      	adds	r3, #85	; 0x55
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2d8      	uxtb	r0, r3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3355      	adds	r3, #85	; 0x55
 80028ca:	4602      	mov	r2, r0
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e0b4      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3355      	adds	r3, #85	; 0x55
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2d8      	uxtb	r0, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3355      	adds	r3, #85	; 0x55
 80028f4:	4602      	mov	r2, r0
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e09f      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3361      	adds	r3, #97	; 0x61
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d109      	bne.n	8002922 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3360      	adds	r3, #96	; 0x60
 800291c:	2202      	movs	r2, #2
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e08b      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3361      	adds	r3, #97	; 0x61
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d109      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e077      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3361      	adds	r3, #97	; 0x61
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d109      	bne.n	8002972 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e063      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3361      	adds	r3, #97	; 0x61
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d009      	beq.n	800299a <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3361      	adds	r3, #97	; 0x61
 8002994:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002996:	2b08      	cmp	r3, #8
 8002998:	d14f      	bne.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	202c      	movs	r0, #44	; 0x2c
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	440b      	add	r3, r1
 80029b8:	335c      	adds	r3, #92	; 0x5c
 80029ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	335c      	adds	r3, #92	; 0x5c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d912      	bls.n	80029f6 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	335c      	adds	r3, #92	; 0x5c
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	2204      	movs	r2, #4
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e021      	b.n	8002a3a <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3360      	adds	r3, #96	; 0x60
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a1e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a26:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2302      	movs	r3, #2
 8002a4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	b2d9      	uxtb	r1, r3
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	202c      	movs	r0, #44	; 0x2c
 8002a56:	fb00 f303 	mul.w	r3, r0, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3360      	adds	r3, #96	; 0x60
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f004 fc22 	bl	80072ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a68:	bf00      	nop
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	0c5b      	lsrs	r3, r3, #17
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d004      	beq.n	8002ab6 <HCD_RXQLVL_IRQHandler+0x46>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	f000 80a9 	beq.w	8002c06 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ab4:	e0aa      	b.n	8002c0c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a6 	beq.w	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3344      	adds	r3, #68	; 0x44
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 809b 	beq.w	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3350      	adds	r3, #80	; 0x50
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	441a      	add	r2, r3
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	202c      	movs	r0, #44	; 0x2c
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	440b      	add	r3, r1
 8002af4:	334c      	adds	r3, #76	; 0x4c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d87a      	bhi.n	8002bf2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	b292      	uxth	r2, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f002 fff7 	bl	8005b08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3344      	adds	r3, #68	; 0x44
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3350      	adds	r3, #80	; 0x50
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	441a      	add	r2, r3
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3350      	adds	r3, #80	; 0x50
 8002b60:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	0cdb      	lsrs	r3, r3, #19
 8002b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b76:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d13c      	bne.n	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d039      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3354      	adds	r3, #84	; 0x54
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2d8      	uxtb	r0, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3354      	adds	r3, #84	; 0x54
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
      break;
 8002bf0:	e00b      	b.n	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
      break;
 8002c04:	e001      	b.n	8002c0a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c0a:	bf00      	nop
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d10b      	bne.n	8002c64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f004 fb0c 	bl	8007274 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d132      	bne.n	8002cd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d126      	bne.n	8002cce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d113      	bne.n	8002cb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c92:	d106      	bne.n	8002ca2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 ff7e 	bl	8005b9c <USB_InitFSLSPClkSel>
 8002ca0:	e011      	b.n	8002cc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 ff77 	bl	8005b9c <USB_InitFSLSPClkSel>
 8002cae:	e00a      	b.n	8002cc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f004 fb02 	bl	80072d0 <HAL_HCD_PortEnabled_Callback>
 8002ccc:	e002      	b.n	8002cd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f004 fb0c 	bl	80072ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d103      	bne.n	8002ce6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fef4 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e006      	b.n	8002d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d104      	bne.n	8002d96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_I2C_Init+0x11c>)
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	ea42 0103 	orr.w	r1, r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	02008000 	.word	0x02008000

08002e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80f9 	bne.w	8003036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x34>
 8002e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0ed      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x4e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0e6      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e72:	f7fe f8ef 	bl	8001054 <HAL_GetTick>
 8002e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2319      	movs	r3, #25
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fac3 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d1      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2221      	movs	r2, #33	; 0x21
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	; 0x40
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ebc:	88f8      	ldrh	r0, [r7, #6]
 8002ebe:	893a      	ldrh	r2, [r7, #8]
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9d3 	bl	8003278 <I2C_RequestMemoryWrite>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0a9      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2bff      	cmp	r3, #255	; 0xff
 8002eec:	d90e      	bls.n	8002f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	2300      	movs	r3, #0
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fba5 	bl	8003654 <I2C_TransferConfig>
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb94 	bl	8003654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 faad 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e07b      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa3f 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d90e      	bls.n	8002fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb49 	bl	8003654 <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb38 	bl	8003654 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d19e      	bne.n	8002f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa8c 	bl	8003510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01a      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_I2C_Mem_Write+0x224>)
 8003016:	400b      	ands	r3, r1
 8003018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	fe00e800 	.word	0xfe00e800

08003044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	f040 80fd 	bne.w	8003266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_I2C_Mem_Read+0x34>
 8003072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0f1      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Mem_Read+0x4e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ea      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309a:	f7fd ffdb 	bl	8001054 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2319      	movs	r3, #25
 80030a6:	2201      	movs	r2, #1
 80030a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9af 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d5      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	; 0x22
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e4:	88f8      	ldrh	r0, [r7, #6]
 80030e6:	893a      	ldrh	r2, [r7, #8]
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	4603      	mov	r3, r0
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f913 	bl	8003320 <I2C_RequestMemoryRead>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ad      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d90e      	bls.n	8003134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	4b52      	ldr	r3, [pc, #328]	; (8003270 <HAL_I2C_Mem_Read+0x22c>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fa91 	bl	8003654 <I2C_TransferConfig>
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_I2C_Mem_Read+0x22c>)
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa80 	bl	8003654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2200      	movs	r2, #0
 800315c:	2104      	movs	r1, #4
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f956 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07c      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d034      	beq.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d130      	bne.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f927 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e04d      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d90e      	bls.n	80031f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fa31 	bl	8003654 <I2C_TransferConfig>
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003202:	b2da      	uxtb	r2, r3
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa20 	bl	8003654 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d19a      	bne.n	8003154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f974 	bl	8003510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01a      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2220      	movs	r2, #32
 8003238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_I2C_Mem_Read+0x230>)
 8003246:	400b      	ands	r3, r1
 8003248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	80002400 	.word	0x80002400
 8003274:	fe00e800 	.word	0xfe00e800

08003278 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <I2C_RequestMemoryWrite+0xa4>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f9d7 	bl	8003654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8f0 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02c      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
 80032ca:	e015      	b.n	80032f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8d6 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e012      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2200      	movs	r2, #0
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f884 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	80002000 	.word	0x80002000

08003320 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	8979      	ldrh	r1, [r7, #10]
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <I2C_RequestMemoryRead+0xa4>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f984 	bl	8003654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f89d 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e02c      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e015      	b.n	800339e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b29b      	uxth	r3, r3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f883 	bl	8003490 <I2C_WaitOnTXISFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e012      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	; 0x40
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f831 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	80002000 	.word	0x80002000

080033c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	619a      	str	r2, [r3, #24]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003420:	e022      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d01e      	beq.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fd fe13 	bl	8001054 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e00f      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	d0cd      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800349c:	e02c      	b.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f870 	bl	8003588 <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02a      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d01e      	beq.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fd fdcb 	bl	8001054 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e007      	b.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d1cb      	bne.n	800349e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	e028      	b.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f830 	bl	8003588 <I2C_IsAcknowledgeFailed>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e026      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fd fd8f 	bl	8001054 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d1cf      	bne.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d151      	bne.n	8003646 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	e022      	b.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d01e      	beq.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7fd fd52 	bl	8001054 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <I2C_IsAcknowledgeFailed+0x3a>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02e      	b.n	8003648 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d1d5      	bne.n	80035a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2220      	movs	r2, #32
 8003606:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fedd 	bl	80033c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <I2C_IsAcknowledgeFailed+0xc8>)
 800361a:	400b      	ands	r3, r1
 800361c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	fe00e800 	.word	0xfe00e800

08003654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	4613      	mov	r3, r2
 8003664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	0d5b      	lsrs	r3, r3, #21
 8003670:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <I2C_TransferConfig+0x58>)
 8003676:	430b      	orrs	r3, r1
 8003678:	43db      	mvns	r3, r3
 800367a:	ea02 0103 	and.w	r1, r2, r3
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003684:	7a7b      	ldrb	r3, [r7, #9]
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	431a      	orrs	r2, r3
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	03ff63ff 	.word	0x03ff63ff

080036b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d138      	bne.n	8003738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e032      	b.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	d139      	bne.n	80037d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003766:	2302      	movs	r3, #2
 8003768:	e033      	b.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2224      	movs	r2, #36	; 0x24
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003798:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_LTDC_IRQHandler+0x6a>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01e      	beq.n	8003848 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0204 	bic.w	r2, r2, #4
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2204      	movs	r2, #4
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2204      	movs	r2, #4
 8003836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f86f 	bl	8003926 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d023      	beq.n	800389a <HAL_LTDC_IRQHandler+0xbc>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01e      	beq.n	800389a <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0202 	bic.w	r2, r2, #2
 800386a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2202      	movs	r2, #2
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f846 	bl	8003926 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_LTDC_IRQHandler+0xfe>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2201      	movs	r2, #1
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f82f 	bl	800393a <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01b      	beq.n	800391e <HAL_LTDC_IRQHandler+0x140>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0208 	bic.w	r2, r2, #8
 80038fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f818 	bl	800394e <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40007000 	.word	0x40007000

08003984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b2:	f7fd fb4f 	bl	8001054 <HAL_GetTick>
 80039b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b8:	e009      	b.n	80039ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ba:	f7fd fb4b 	bl	8001054 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c8:	d901      	bls.n	80039ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e022      	b.n	8003a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d1ee      	bne.n	80039ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0f      	ldr	r2, [pc, #60]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e8:	f7fd fb34 	bl	8001054 <HAL_GetTick>
 80039ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ee:	e009      	b.n	8003a04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039f0:	f7fd fb30 	bl	8001054 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fe:	d901      	bls.n	8003a04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e007      	b.n	8003a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a10:	d1ee      	bne.n	80039f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40007000 	.word	0x40007000

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e291      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8087 	beq.w	8003b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a48:	4b96      	ldr	r3, [pc, #600]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d00c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a54:	4b93      	ldr	r3, [pc, #588]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d112      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
 8003a60:	4b90      	ldr	r3, [pc, #576]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6c:	d10b      	bne.n	8003a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x130>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d168      	bne.n	8003b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e26b      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x7a>
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e02e      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x9c>
 8003aa6:	4b7f      	ldr	r3, [pc, #508]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xc0>
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a72      	ldr	r2, [pc, #456]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xd8>
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a6e      	ldr	r2, [pc, #440]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6b      	ldr	r2, [pc, #428]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd faa6 	bl	8001054 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd faa2 	bl	8001054 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e21f      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe8>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fa92 	bl	8001054 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd fa8e 	bl	8001054 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e20b      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b46:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x110>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d069      	beq.n	8003c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b62:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x190>
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1df      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9e:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	493d      	ldr	r1, [pc, #244]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	e040      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fa44 	bl	8001054 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fa40 	bl	8001054 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1bd      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4929      	ldr	r1, [pc, #164]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	e018      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fa20 	bl	8001054 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fa1c 	bl	8001054 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e199      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d038      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d019      	beq.n	8003c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd f9fd 	bl	8001054 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5e:	f7fd f9f9 	bl	8001054 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e176      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x23a>
 8003c7c:	e01a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_RCC_OscConfig+0x280>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fd f9e3 	bl	8001054 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fd f9df 	bl	8001054 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d903      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e15c      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
 8003ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a4 	beq.w	8003e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fd f9a7 	bl	8001054 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fd f9a3 	bl	8001054 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e120      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x31a>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	e02d      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x33c>
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a66      	ldr	r2, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x35e>
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a5a      	ldr	r2, [pc, #360]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fd f957 	bl	8001054 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd f953 	bl	8001054 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0ce      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCC_OscConfig+0x386>
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd f941 	bl	8001054 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd f93d 	bl	8001054 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a4 	beq.w	8003f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d06b      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d149      	bne.n	8003ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a30      	ldr	r2, [pc, #192]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd f90e 	bl	8001054 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd f90a 	bl	8001054 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e087      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	019b      	lsls	r3, r3, #6
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	3b01      	subs	r3, #1
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd f8de 	bl	8001054 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd f8da 	bl	8001054 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e057      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x478>
 8003eba:	e04f      	b.n	8003f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f8c4 	bl	8001054 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd f8c0 	bl	8001054 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e03d      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4ac>
 8003eee:	e035      	b.n	8003f5c <HAL_RCC_OscConfig+0x538>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x544>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d028      	beq.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d121      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11a      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0d0      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d910      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 020f 	bic.w	r2, r3, #15
 8003f9a:	4965      	ldr	r1, [pc, #404]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa2:	4b63      	ldr	r3, [pc, #396]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0b8      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d040      	beq.n	8004090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d115      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07f      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e073      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e06b      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4936      	ldr	r1, [pc, #216]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fc fff8 	bl	8001054 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fc fff4 	bl	8001054 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e053      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d210      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 020f 	bic.w	r2, r3, #15
 80040a6:	4922      	ldr	r1, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e032      	b.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fe:	f000 f821 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490a      	ldr	r1, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x1cc>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1d0>)
 8004118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1d4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fe70 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023c00 	.word	0x40023c00
 8004134:	40023800 	.word	0x40023800
 8004138:	08007cac 	.word	0x08007cac
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b5b0      	push	{r4, r5, r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800414a:	2100      	movs	r1, #0
 800414c:	6079      	str	r1, [r7, #4]
 800414e:	2100      	movs	r1, #0
 8004150:	60f9      	str	r1, [r7, #12]
 8004152:	2100      	movs	r1, #0
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004156:	2100      	movs	r1, #0
 8004158:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415a:	4952      	ldr	r1, [pc, #328]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800415c:	6889      	ldr	r1, [r1, #8]
 800415e:	f001 010c 	and.w	r1, r1, #12
 8004162:	2908      	cmp	r1, #8
 8004164:	d00d      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3e>
 8004166:	2908      	cmp	r1, #8
 8004168:	f200 8094 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x150>
 800416c:	2900      	cmp	r1, #0
 800416e:	d002      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x32>
 8004170:	2904      	cmp	r1, #4
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x38>
 8004174:	e08e      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004176:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004178:	60bb      	str	r3, [r7, #8]
      break;
 800417a:	e08e      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417c:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <HAL_RCC_GetSysClockFreq+0x168>)
 800417e:	60bb      	str	r3, [r7, #8]
      break;
 8004180:	e08b      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004182:	4948      	ldr	r1, [pc, #288]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004184:	6849      	ldr	r1, [r1, #4]
 8004186:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800418a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800418c:	4945      	ldr	r1, [pc, #276]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800418e:	6849      	ldr	r1, [r1, #4]
 8004190:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004194:	2900      	cmp	r1, #0
 8004196:	d024      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004198:	4942      	ldr	r1, [pc, #264]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800419a:	6849      	ldr	r1, [r1, #4]
 800419c:	0989      	lsrs	r1, r1, #6
 800419e:	4608      	mov	r0, r1
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041a8:	f04f 0500 	mov.w	r5, #0
 80041ac:	ea00 0204 	and.w	r2, r0, r4
 80041b0:	ea01 0305 	and.w	r3, r1, r5
 80041b4:	493d      	ldr	r1, [pc, #244]	; (80042ac <HAL_RCC_GetSysClockFreq+0x168>)
 80041b6:	fb01 f003 	mul.w	r0, r1, r3
 80041ba:	2100      	movs	r1, #0
 80041bc:	fb01 f102 	mul.w	r1, r1, r2
 80041c0:	1844      	adds	r4, r0, r1
 80041c2:	493a      	ldr	r1, [pc, #232]	; (80042ac <HAL_RCC_GetSysClockFreq+0x168>)
 80041c4:	fba2 0101 	umull	r0, r1, r2, r1
 80041c8:	1863      	adds	r3, r4, r1
 80041ca:	4619      	mov	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f7fc f874 	bl	80002c0 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e04a      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	ea02 0400 	and.w	r4, r2, r0
 80041fa:	ea03 0501 	and.w	r5, r3, r1
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	014b      	lsls	r3, r1, #5
 800420c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004210:	0142      	lsls	r2, r0, #5
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	1b00      	subs	r0, r0, r4
 8004218:	eb61 0105 	sbc.w	r1, r1, r5
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	018b      	lsls	r3, r1, #6
 8004226:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800422a:	0182      	lsls	r2, r0, #6
 800422c:	1a12      	subs	r2, r2, r0
 800422e:	eb63 0301 	sbc.w	r3, r3, r1
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	00d9      	lsls	r1, r3, #3
 800423c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004240:	00d0      	lsls	r0, r2, #3
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	1912      	adds	r2, r2, r4
 8004248:	eb45 0303 	adc.w	r3, r5, r3
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	0299      	lsls	r1, r3, #10
 8004256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800425a:	0290      	lsls	r0, r2, #10
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f7fc f828 	bl	80002c0 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004296:	60bb      	str	r3, [r7, #8]
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	68bb      	ldr	r3, [r7, #8]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bdb0      	pop	{r4, r5, r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	017d7840 	.word	0x017d7840

080042b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	08007cbc 	.word	0x08007cbc

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f4:	f7ff ffdc 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0b5b      	lsrs	r3, r3, #13
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	08007cbc 	.word	0x08007cbc

08004318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	220f      	movs	r2, #15
 8004326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0203 	and.w	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_RCC_GetClockConfig+0x60>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	40023c00 	.word	0x40023c00

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a4:	4b69      	ldr	r3, [pc, #420]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	4964      	ldr	r1, [pc, #400]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	4959      	ldr	r1, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	494a      	ldr	r1, [pc, #296]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808b 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4a39      	ldr	r2, [pc, #228]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6413      	str	r3, [r2, #64]	; 0x40
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fc fde6 	bl	8001054 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fc fde2 	bl	8001054 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e357      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d114      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fc fdaa 	bl	8001054 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fc fda6 	bl	8001054 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e319      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004532:	d111      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004542:	400b      	ands	r3, r1
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
 8004554:	0ffffcff 	.word	0x0ffffcff
 8004558:	4bb1      	ldr	r3, [pc, #708]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4ab0      	ldr	r2, [pc, #704]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	4bae      	ldr	r3, [pc, #696]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	49ab      	ldr	r1, [pc, #684]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004582:	4ba7      	ldr	r3, [pc, #668]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	4aa5      	ldr	r2, [pc, #660]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004592:	4ba3      	ldr	r3, [pc, #652]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004594:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	49a0      	ldr	r1, [pc, #640]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b0:	4b9b      	ldr	r3, [pc, #620]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045be:	4998      	ldr	r1, [pc, #608]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d2:	4b93      	ldr	r3, [pc, #588]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	498f      	ldr	r1, [pc, #572]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f4:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	4987      	ldr	r1, [pc, #540]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004616:	4b82      	ldr	r3, [pc, #520]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	497e      	ldr	r1, [pc, #504]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004638:	4b79      	ldr	r3, [pc, #484]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4976      	ldr	r1, [pc, #472]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465a:	4b71      	ldr	r3, [pc, #452]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 020c 	bic.w	r2, r3, #12
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	496d      	ldr	r1, [pc, #436]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	4965      	ldr	r1, [pc, #404]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800469e:	4b60      	ldr	r3, [pc, #384]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	495c      	ldr	r1, [pc, #368]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c0:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	4954      	ldr	r1, [pc, #336]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046e2:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	494b      	ldr	r1, [pc, #300]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004704:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	4943      	ldr	r1, [pc, #268]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	493a      	ldr	r1, [pc, #232]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004756:	4932      	ldr	r1, [pc, #200]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004778:	4929      	ldr	r1, [pc, #164]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4919      	ldr	r1, [pc, #100]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047dc:	4910      	ldr	r1, [pc, #64]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d006      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80d9 	beq.w	80049aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fc fc26 	bl	8001054 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800480a:	e00b      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800480c:	f7fc fc22 	bl	8001054 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d904      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e197      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004824:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ed      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d021      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11d      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004844:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	019a      	lsls	r2, r3, #6
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	071b      	lsls	r3, r3, #28
 8004878:	4957      	ldr	r1, [pc, #348]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d129      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ac:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c0:	0f1b      	lsrs	r3, r3, #28
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	019a      	lsls	r2, r3, #6
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	493d      	ldr	r1, [pc, #244]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	f023 021f 	bic.w	r2, r3, #31
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4937      	ldr	r1, [pc, #220]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01d      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	0e1b      	lsrs	r3, r3, #24
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491a:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	0f1b      	lsrs	r3, r3, #28
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	019a      	lsls	r2, r3, #6
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	431a      	orrs	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	071b      	lsls	r3, r3, #28
 8004940:	4925      	ldr	r1, [pc, #148]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	019a      	lsls	r2, r3, #6
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	071b      	lsls	r3, r3, #28
 8004970:	4919      	ldr	r1, [pc, #100]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004984:	f7fc fb66 	bl	8001054 <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800498c:	f7fc fb62 	bl	8001054 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0d7      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f040 80cd 	bne.w	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049be:	f7fc fb49 	bl	8001054 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049c4:	e00a      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c6:	f7fc fb45 	bl	8001054 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b64      	cmp	r3, #100	; 0x64
 80049d2:	d903      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0ba      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049dc:	4b5e      	ldr	r3, [pc, #376]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e8:	d0ed      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02e      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d12a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a12:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	0f1b      	lsrs	r3, r3, #28
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	019a      	lsls	r2, r3, #6
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	071b      	lsls	r3, r3, #28
 8004a46:	4944      	ldr	r1, [pc, #272]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	493d      	ldr	r1, [pc, #244]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d022      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7c:	d11d      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	4929      	ldr	r1, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	019a      	lsls	r2, r3, #6
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	431a      	orrs	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	4917      	ldr	r1, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4911      	ldr	r1, [pc, #68]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fc fa96 	bl	8001054 <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b2c:	f7fc fa92 	bl	8001054 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e007      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4a:	d1ef      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e049      	b.n	8004c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc f83c 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 f9f6 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e054      	b.n	8004cce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d01d      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <HAL_TIM_Base_Start_IT+0xe0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d115      	bne.n	8004cb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xec>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d015      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d011      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e008      	b.n	8004cca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0202 	mvn.w	r2, #2
 8004d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f905 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8f7 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f908 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0204 	mvn.w	r2, #4
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8db 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8cd 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8de 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d122      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0208 	mvn.w	r2, #8
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8b1 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8a3 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8b4 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0210 	mvn.w	r2, #16
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f887 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f879 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f88a 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0201 	mvn.w	r2, #1
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fb fe08 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f91a 	bl	80050e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d10e      	bne.n	8004eda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f90d 	bl	80050f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d10e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f838 	bl	8004f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0220 	mvn.w	r2, #32
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8cd 	bl	80050cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a40      	ldr	r2, [pc, #256]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3d      	ldr	r2, [pc, #244]	; (80050a4 <TIM_Base_SetConfig+0x118>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	; (80050a8 <TIM_Base_SetConfig+0x11c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3b      	ldr	r2, [pc, #236]	; (80050ac <TIM_Base_SetConfig+0x120>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3a      	ldr	r2, [pc, #232]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d027      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <TIM_Base_SetConfig+0x118>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d023      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <TIM_Base_SetConfig+0x11c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <TIM_Base_SetConfig+0x120>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d017      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <TIM_Base_SetConfig+0x128>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a26      	ldr	r2, [pc, #152]	; (80050bc <TIM_Base_SetConfig+0x130>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <TIM_Base_SetConfig+0x134>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a24      	ldr	r2, [pc, #144]	; (80050c4 <TIM_Base_SetConfig+0x138>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a23      	ldr	r2, [pc, #140]	; (80050c8 <TIM_Base_SetConfig+0x13c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <TIM_Base_SetConfig+0x114>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <TIM_Base_SetConfig+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d103      	bne.n	800508c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	615a      	str	r2, [r3, #20]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800
 80050c0:	40001800 	.word	0x40001800
 80050c4:	40001c00 	.word	0x40001c00
 80050c8:	40002000 	.word	0x40002000

080050cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e040      	b.n	800519c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb fdd6 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8c0 	bl	80052cc <UART_SetConfig>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e022      	b.n	800519c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb16 	bl	8005790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fb9d 	bl	80058d4 <UART_CheckIdleState>
 800519a:	4603      	mov	r3, r0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	f040 8081 	bne.w	80052c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_UART_Transmit+0x26>
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e079      	b.n	80052c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_UART_Transmit+0x38>
 80051d8:	2302      	movs	r3, #2
 80051da:	e072      	b.n	80052c2 <HAL_UART_Transmit+0x11e>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2221      	movs	r2, #33	; 0x21
 80051f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f2:	f7fb ff2f 	bl	8001054 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d108      	bne.n	8005224 <HAL_UART_Transmit+0x80>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e003      	b.n	800522c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005234:	e02c      	b.n	8005290 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fb7a 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e038      	b.n	80052c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e007      	b.n	800527e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1cc      	bne.n	8005236 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2140      	movs	r1, #64	; 0x40
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb47 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e005      	b.n	80052c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4ba7      	ldr	r3, [pc, #668]	; (8005594 <UART_SetConfig+0x2c8>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	6979      	ldr	r1, [r7, #20]
 8005300:	430b      	orrs	r3, r1
 8005302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a95      	ldr	r2, [pc, #596]	; (8005598 <UART_SetConfig+0x2cc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d120      	bne.n	800538a <UART_SetConfig+0xbe>
 8005348:	4b94      	ldr	r3, [pc, #592]	; (800559c <UART_SetConfig+0x2d0>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b03      	cmp	r3, #3
 8005354:	d816      	bhi.n	8005384 <UART_SetConfig+0xb8>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0x90>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800536d 	.word	0x0800536d
 8005360:	08005379 	.word	0x08005379
 8005364:	08005373 	.word	0x08005373
 8005368:	0800537f 	.word	0x0800537f
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e14f      	b.n	8005612 <UART_SetConfig+0x346>
 8005372:	2302      	movs	r3, #2
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e14c      	b.n	8005612 <UART_SetConfig+0x346>
 8005378:	2304      	movs	r3, #4
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e149      	b.n	8005612 <UART_SetConfig+0x346>
 800537e:	2308      	movs	r3, #8
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e146      	b.n	8005612 <UART_SetConfig+0x346>
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e143      	b.n	8005612 <UART_SetConfig+0x346>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a84      	ldr	r2, [pc, #528]	; (80055a0 <UART_SetConfig+0x2d4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d132      	bne.n	80053fa <UART_SetConfig+0x12e>
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <UART_SetConfig+0x2d0>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	d828      	bhi.n	80053f4 <UART_SetConfig+0x128>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0xdc>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	080053e3 	.word	0x080053e3
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053f5 	.word	0x080053f5
 80053d8:	080053ef 	.word	0x080053ef
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e117      	b.n	8005612 <UART_SetConfig+0x346>
 80053e2:	2302      	movs	r3, #2
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e114      	b.n	8005612 <UART_SetConfig+0x346>
 80053e8:	2304      	movs	r3, #4
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e111      	b.n	8005612 <UART_SetConfig+0x346>
 80053ee:	2308      	movs	r3, #8
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e10e      	b.n	8005612 <UART_SetConfig+0x346>
 80053f4:	2310      	movs	r3, #16
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e10b      	b.n	8005612 <UART_SetConfig+0x346>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a69      	ldr	r2, [pc, #420]	; (80055a4 <UART_SetConfig+0x2d8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d120      	bne.n	8005446 <UART_SetConfig+0x17a>
 8005404:	4b65      	ldr	r3, [pc, #404]	; (800559c <UART_SetConfig+0x2d0>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d013      	beq.n	800543a <UART_SetConfig+0x16e>
 8005412:	2b30      	cmp	r3, #48	; 0x30
 8005414:	d814      	bhi.n	8005440 <UART_SetConfig+0x174>
 8005416:	2b20      	cmp	r3, #32
 8005418:	d009      	beq.n	800542e <UART_SetConfig+0x162>
 800541a:	2b20      	cmp	r3, #32
 800541c:	d810      	bhi.n	8005440 <UART_SetConfig+0x174>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <UART_SetConfig+0x15c>
 8005422:	2b10      	cmp	r3, #16
 8005424:	d006      	beq.n	8005434 <UART_SetConfig+0x168>
 8005426:	e00b      	b.n	8005440 <UART_SetConfig+0x174>
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0f1      	b.n	8005612 <UART_SetConfig+0x346>
 800542e:	2302      	movs	r3, #2
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e0ee      	b.n	8005612 <UART_SetConfig+0x346>
 8005434:	2304      	movs	r3, #4
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0eb      	b.n	8005612 <UART_SetConfig+0x346>
 800543a:	2308      	movs	r3, #8
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e0e8      	b.n	8005612 <UART_SetConfig+0x346>
 8005440:	2310      	movs	r3, #16
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e0e5      	b.n	8005612 <UART_SetConfig+0x346>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a57      	ldr	r2, [pc, #348]	; (80055a8 <UART_SetConfig+0x2dc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d120      	bne.n	8005492 <UART_SetConfig+0x1c6>
 8005450:	4b52      	ldr	r3, [pc, #328]	; (800559c <UART_SetConfig+0x2d0>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800545a:	2bc0      	cmp	r3, #192	; 0xc0
 800545c:	d013      	beq.n	8005486 <UART_SetConfig+0x1ba>
 800545e:	2bc0      	cmp	r3, #192	; 0xc0
 8005460:	d814      	bhi.n	800548c <UART_SetConfig+0x1c0>
 8005462:	2b80      	cmp	r3, #128	; 0x80
 8005464:	d009      	beq.n	800547a <UART_SetConfig+0x1ae>
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	d810      	bhi.n	800548c <UART_SetConfig+0x1c0>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <UART_SetConfig+0x1a8>
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d006      	beq.n	8005480 <UART_SetConfig+0x1b4>
 8005472:	e00b      	b.n	800548c <UART_SetConfig+0x1c0>
 8005474:	2300      	movs	r3, #0
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e0cb      	b.n	8005612 <UART_SetConfig+0x346>
 800547a:	2302      	movs	r3, #2
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e0c8      	b.n	8005612 <UART_SetConfig+0x346>
 8005480:	2304      	movs	r3, #4
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e0c5      	b.n	8005612 <UART_SetConfig+0x346>
 8005486:	2308      	movs	r3, #8
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e0c2      	b.n	8005612 <UART_SetConfig+0x346>
 800548c:	2310      	movs	r3, #16
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e0bf      	b.n	8005612 <UART_SetConfig+0x346>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a45      	ldr	r2, [pc, #276]	; (80055ac <UART_SetConfig+0x2e0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d125      	bne.n	80054e8 <UART_SetConfig+0x21c>
 800549c:	4b3f      	ldr	r3, [pc, #252]	; (800559c <UART_SetConfig+0x2d0>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054aa:	d017      	beq.n	80054dc <UART_SetConfig+0x210>
 80054ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b0:	d817      	bhi.n	80054e2 <UART_SetConfig+0x216>
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d00b      	beq.n	80054d0 <UART_SetConfig+0x204>
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d811      	bhi.n	80054e2 <UART_SetConfig+0x216>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <UART_SetConfig+0x1fe>
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d006      	beq.n	80054d6 <UART_SetConfig+0x20a>
 80054c8:	e00b      	b.n	80054e2 <UART_SetConfig+0x216>
 80054ca:	2300      	movs	r3, #0
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e0a0      	b.n	8005612 <UART_SetConfig+0x346>
 80054d0:	2302      	movs	r3, #2
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e09d      	b.n	8005612 <UART_SetConfig+0x346>
 80054d6:	2304      	movs	r3, #4
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e09a      	b.n	8005612 <UART_SetConfig+0x346>
 80054dc:	2308      	movs	r3, #8
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e097      	b.n	8005612 <UART_SetConfig+0x346>
 80054e2:	2310      	movs	r3, #16
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e094      	b.n	8005612 <UART_SetConfig+0x346>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a30      	ldr	r2, [pc, #192]	; (80055b0 <UART_SetConfig+0x2e4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d125      	bne.n	800553e <UART_SetConfig+0x272>
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <UART_SetConfig+0x2d0>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005500:	d017      	beq.n	8005532 <UART_SetConfig+0x266>
 8005502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005506:	d817      	bhi.n	8005538 <UART_SetConfig+0x26c>
 8005508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550c:	d00b      	beq.n	8005526 <UART_SetConfig+0x25a>
 800550e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005512:	d811      	bhi.n	8005538 <UART_SetConfig+0x26c>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <UART_SetConfig+0x254>
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d006      	beq.n	800552c <UART_SetConfig+0x260>
 800551e:	e00b      	b.n	8005538 <UART_SetConfig+0x26c>
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e075      	b.n	8005612 <UART_SetConfig+0x346>
 8005526:	2302      	movs	r3, #2
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e072      	b.n	8005612 <UART_SetConfig+0x346>
 800552c:	2304      	movs	r3, #4
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e06f      	b.n	8005612 <UART_SetConfig+0x346>
 8005532:	2308      	movs	r3, #8
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e06c      	b.n	8005612 <UART_SetConfig+0x346>
 8005538:	2310      	movs	r3, #16
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e069      	b.n	8005612 <UART_SetConfig+0x346>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <UART_SetConfig+0x2e8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d137      	bne.n	80055b8 <UART_SetConfig+0x2ec>
 8005548:	4b14      	ldr	r3, [pc, #80]	; (800559c <UART_SetConfig+0x2d0>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005556:	d017      	beq.n	8005588 <UART_SetConfig+0x2bc>
 8005558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800555c:	d817      	bhi.n	800558e <UART_SetConfig+0x2c2>
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	d00b      	beq.n	800557c <UART_SetConfig+0x2b0>
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005568:	d811      	bhi.n	800558e <UART_SetConfig+0x2c2>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <UART_SetConfig+0x2aa>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d006      	beq.n	8005582 <UART_SetConfig+0x2b6>
 8005574:	e00b      	b.n	800558e <UART_SetConfig+0x2c2>
 8005576:	2300      	movs	r3, #0
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e04a      	b.n	8005612 <UART_SetConfig+0x346>
 800557c:	2302      	movs	r3, #2
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e047      	b.n	8005612 <UART_SetConfig+0x346>
 8005582:	2304      	movs	r3, #4
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e044      	b.n	8005612 <UART_SetConfig+0x346>
 8005588:	2308      	movs	r3, #8
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e041      	b.n	8005612 <UART_SetConfig+0x346>
 800558e:	2310      	movs	r3, #16
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e03e      	b.n	8005612 <UART_SetConfig+0x346>
 8005594:	efff69f3 	.word	0xefff69f3
 8005598:	40011000 	.word	0x40011000
 800559c:	40023800 	.word	0x40023800
 80055a0:	40004400 	.word	0x40004400
 80055a4:	40004800 	.word	0x40004800
 80055a8:	40004c00 	.word	0x40004c00
 80055ac:	40005000 	.word	0x40005000
 80055b0:	40011400 	.word	0x40011400
 80055b4:	40007800 	.word	0x40007800
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a71      	ldr	r2, [pc, #452]	; (8005784 <UART_SetConfig+0x4b8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d125      	bne.n	800560e <UART_SetConfig+0x342>
 80055c2:	4b71      	ldr	r3, [pc, #452]	; (8005788 <UART_SetConfig+0x4bc>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055d0:	d017      	beq.n	8005602 <UART_SetConfig+0x336>
 80055d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055d6:	d817      	bhi.n	8005608 <UART_SetConfig+0x33c>
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d00b      	beq.n	80055f6 <UART_SetConfig+0x32a>
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d811      	bhi.n	8005608 <UART_SetConfig+0x33c>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <UART_SetConfig+0x324>
 80055e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ec:	d006      	beq.n	80055fc <UART_SetConfig+0x330>
 80055ee:	e00b      	b.n	8005608 <UART_SetConfig+0x33c>
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e00d      	b.n	8005612 <UART_SetConfig+0x346>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e00a      	b.n	8005612 <UART_SetConfig+0x346>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e007      	b.n	8005612 <UART_SetConfig+0x346>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e004      	b.n	8005612 <UART_SetConfig+0x346>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e001      	b.n	8005612 <UART_SetConfig+0x346>
 800560e:	2310      	movs	r3, #16
 8005610:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561a:	d15b      	bne.n	80056d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800561c:	7ffb      	ldrb	r3, [r7, #31]
 800561e:	2b08      	cmp	r3, #8
 8005620:	d827      	bhi.n	8005672 <UART_SetConfig+0x3a6>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x35c>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	08005673 	.word	0x08005673
 8005638:	08005663 	.word	0x08005663
 800563c:	08005673 	.word	0x08005673
 8005640:	08005673 	.word	0x08005673
 8005644:	08005673 	.word	0x08005673
 8005648:	0800566b 	.word	0x0800566b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fe fe3c 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8005650:	61b8      	str	r0, [r7, #24]
        break;
 8005652:	e013      	b.n	800567c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fe fe4c 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005658:	61b8      	str	r0, [r7, #24]
        break;
 800565a:	e00f      	b.n	800567c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800565c:	4b4b      	ldr	r3, [pc, #300]	; (800578c <UART_SetConfig+0x4c0>)
 800565e:	61bb      	str	r3, [r7, #24]
        break;
 8005660:	e00c      	b.n	800567c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005662:	f7fe fd6f 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005666:	61b8      	str	r0, [r7, #24]
        break;
 8005668:	e008      	b.n	800567c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566e:	61bb      	str	r3, [r7, #24]
        break;
 8005670:	e004      	b.n	800567c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	77bb      	strb	r3, [r7, #30]
        break;
 800567a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d074      	beq.n	800576c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	005a      	lsls	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	b29b      	uxth	r3, r3
 8005698:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b0f      	cmp	r3, #15
 800569e:	d916      	bls.n	80056ce <UART_SetConfig+0x402>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a6:	d212      	bcs.n	80056ce <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f023 030f 	bic.w	r3, r3, #15
 80056b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	b29a      	uxth	r2, r3
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	89fa      	ldrh	r2, [r7, #14]
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	e04e      	b.n	800576c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	77bb      	strb	r3, [r7, #30]
 80056d2:	e04b      	b.n	800576c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d827      	bhi.n	800572a <UART_SetConfig+0x45e>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x414>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe fde0 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e013      	b.n	8005734 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fe fdf0 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005710:	61b8      	str	r0, [r7, #24]
        break;
 8005712:	e00f      	b.n	8005734 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <UART_SetConfig+0x4c0>)
 8005716:	61bb      	str	r3, [r7, #24]
        break;
 8005718:	e00c      	b.n	8005734 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fd13 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 800571e:	61b8      	str	r0, [r7, #24]
        break;
 8005720:	e008      	b.n	8005734 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e004      	b.n	8005734 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	77bb      	strb	r3, [r7, #30]
        break;
 8005732:	bf00      	nop
    }

    if (pclk != 0U)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	085a      	lsrs	r2, r3, #1
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	441a      	add	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d908      	bls.n	8005768 <UART_SetConfig+0x49c>
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d204      	bcs.n	8005768 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	e001      	b.n	800576c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005778:	7fbb      	ldrb	r3, [r7, #30]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40007c00 	.word	0x40007c00
 8005788:	40023800 	.word	0x40023800
 800578c:	00f42400 	.word	0x00f42400

08005790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800588e:	d10a      	bne.n	80058a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058e4:	f7fb fbb6 	bl	8001054 <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d10e      	bne.n	8005916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f817 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00d      	b.n	8005932 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e05e      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d05a      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005954:	f7fb fb7e 	bl	8001054 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11b      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005978:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e043      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02c      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d124      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e00f      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4013      	ands	r3, r2
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	bf0c      	ite	eq
 8005a1a:	2301      	moveq	r3, #1
 8005a1c:	2300      	movne	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d091      	beq.n	800594c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f043 0201 	orr.w	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 0201 	bic.w	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <USB_FlushTxFifo+0x48>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d901      	bls.n	8005aa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e006      	b.n	8005ab2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d0f0      	beq.n	8005a92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	00030d40 	.word	0x00030d40

08005ac4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <USB_FlushRxFifo+0x40>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e006      	b.n	8005af6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d0f0      	beq.n	8005ad6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	00030d40 	.word	0x00030d40

08005b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	3303      	adds	r3, #3
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e00b      	b.n	8005b44 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3ef      	bcc.n	8005b2c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3724      	adds	r7, #36	; 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be4:	461a      	mov	r2, r3
 8005be6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bea:	6053      	str	r3, [r2, #4]
 8005bec:	e009      	b.n	8005c02 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d106      	bne.n	8005c02 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c00:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	b29b      	uxth	r3, r3
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b089      	sub	sp, #36	; 0x24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0c9b      	lsrs	r3, r3, #18
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0fdb      	lsrs	r3, r3, #31
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d104      	bne.n	8005c8c <USB_HC_Halt+0x5a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e0e8      	b.n	8005e5e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <USB_HC_Halt+0x66>
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d173      	bne.n	8005d80 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cb6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 80cb 	bne.w	8005e5c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d143      	bne.n	8005d5a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d30:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3301      	adds	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d3e:	d81d      	bhi.n	8005d7c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d56:	d0ec      	beq.n	8005d32 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d58:	e080      	b.n	8005e5c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d7a:	e06f      	b.n	8005e5c <USB_HC_Halt+0x22a>
            break;
 8005d7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d7e:	e06d      	b.n	8005e5c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d143      	bne.n	8005e38 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e0e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e1c:	d81d      	bhi.n	8005e5a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e34:	d0ec      	beq.n	8005e10 <USB_HC_Halt+0x1de>
 8005e36:	e011      	b.n	8005e5c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e000      	b.n	8005e5c <USB_HC_Halt+0x22a>
          break;
 8005e5a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fdea 	bl	8005a54 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e80:	2110      	movs	r1, #16
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fdf8 	bl	8005a78 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fe1b 	bl	8005ac4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e01f      	b.n	8005ed4 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eba:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	d9dc      	bls.n	8005e94 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e034      	b.n	8005f4a <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f06:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f26:	d80c      	bhi.n	8005f42 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3e:	d0ec      	beq.n	8005f1a <USB_StopHost+0xb0>
 8005f40:	e000      	b.n	8005f44 <USB_StopHost+0xda>
        break;
 8005f42:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3301      	adds	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b0f      	cmp	r3, #15
 8005f4e:	d9c7      	bls.n	8005ee0 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f56:	461a      	mov	r2, r3
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fd63 	bl	8005a32 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f804 	bl	8005f9a <USBH_HandleSof>
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b0b      	cmp	r3, #11
 8005faa:	d10a      	bne.n	8005fc2 <USBH_HandleSof+0x28>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f000 f8af 	bl	8006154 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005ff6:	bf00      	nop
}
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800600e:	bf00      	nop
}
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800604e:	2200      	movs	r2, #0
 8006050:	4619      	mov	r1, r3
 8006052:	f000 f87f 	bl	8006154 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f941 	bl	8007308 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f830 	bl	80060f2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	795b      	ldrb	r3, [r3, #5]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f82a 	bl	80060f2 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060b2:	2200      	movs	r2, #0
 80060b4:	4619      	mov	r1, r3
 80060b6:	f000 f84d 	bl	8006154 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060e0:	2200      	movs	r2, #0
 80060e2:	4619      	mov	r1, r3
 80060e4:	f000 f836 	bl	8006154 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	2b0a      	cmp	r3, #10
 8006102:	d80d      	bhi.n	8006120 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	33e0      	adds	r3, #224	; 0xe0
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	33e0      	adds	r3, #224	; 0xe0
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006134:	f3ef 8305 	mrs	r3, IPSR
 8006138:	607b      	str	r3, [r7, #4]
  return(result);
 800613a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <osMessagePut+0x1e>
    ticks = 1;
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006172:	f7ff ffdc 	bl	800612e <inHandlerMode>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d018      	beq.n	80061ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800617c:	f107 0210 	add.w	r2, r7, #16
 8006180:	f107 0108 	add.w	r1, r7, #8
 8006184:	2300      	movs	r3, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f9b2 	bl	80064f0 <xQueueGenericSendFromISR>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d001      	beq.n	8006196 <osMessagePut+0x42>
      return osErrorOS;
 8006192:	23ff      	movs	r3, #255	; 0xff
 8006194:	e018      	b.n	80061c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d014      	beq.n	80061c6 <osMessagePut+0x72>
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <osMessagePut+0x7c>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	e00b      	b.n	80061c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80061ae:	f107 0108 	add.w	r1, r7, #8
 80061b2:	2300      	movs	r3, #0
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f894 	bl	80062e4 <xQueueGenericSend>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d001      	beq.n	80061c6 <osMessagePut+0x72>
      return osErrorOS;
 80061c2:	23ff      	movs	r3, #255	; 0xff
 80061c4:	e000      	b.n	80061c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d103      	bne.n	800623c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e00c      	b.n	8006256 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3308      	adds	r3, #8
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e002      	b.n	800624a <vListInsert+0x2e>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d2f6      	bcs.n	8006244 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6892      	ldr	r2, [r2, #8]
 80062a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6852      	ldr	r2, [r2, #4]
 80062ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d103      	bne.n	80062c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062f2:	2300      	movs	r3, #0
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <xQueueGenericSend+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	b672      	cpsid	i
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	b662      	cpsie	i
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <xQueueGenericSend+0x44>
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <xQueueGenericSend+0x48>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <xQueueGenericSend+0x4a>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10c      	bne.n	800634c <xQueueGenericSend+0x68>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	b672      	cpsid	i
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	b662      	cpsie	i
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d103      	bne.n	800635a <xQueueGenericSend+0x76>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <xQueueGenericSend+0x7a>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <xQueueGenericSend+0x7c>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10c      	bne.n	800637e <xQueueGenericSend+0x9a>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	b672      	cpsid	i
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	b662      	cpsie	i
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800637e:	f000 fd45 	bl	8006e0c <xTaskGetSchedulerState>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <xQueueGenericSend+0xaa>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <xQueueGenericSend+0xae>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <xQueueGenericSend+0xb0>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <xQueueGenericSend+0xce>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	b672      	cpsid	i
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	b662      	cpsie	i
 80063ac:	61fb      	str	r3, [r7, #28]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b2:	f000 fe51 	bl	8007058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <xQueueGenericSend+0xe4>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d129      	bne.n	800641c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ce:	f000 f92f 	bl	8006630 <prvCopyDataToQueue>
 80063d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d010      	beq.n	80063fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fc07 	bl	8006bf4 <xTaskRemoveFromEventList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <xQueueGenericSend+0x208>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e00a      	b.n	8006414 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006404:	4b39      	ldr	r3, [pc, #228]	; (80064ec <xQueueGenericSend+0x208>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006414:	f000 fe54 	bl	80070c0 <vPortExitCritical>
				return pdPASS;
 8006418:	2301      	movs	r3, #1
 800641a:	e063      	b.n	80064e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006422:	f000 fe4d 	bl	80070c0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006426:	2300      	movs	r3, #0
 8006428:	e05c      	b.n	80064e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006430:	f107 0314 	add.w	r3, r7, #20
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fc41 	bl	8006cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643a:	2301      	movs	r3, #1
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800643e:	f000 fe3f 	bl	80070c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006442:	f000 f9c9 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006446:	f000 fe07 	bl	8007058 <vPortEnterCritical>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <xQueueGenericSend+0x17c>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d103      	bne.n	8006476 <xQueueGenericSend+0x192>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006476:	f000 fe23 	bl	80070c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647a:	1d3a      	adds	r2, r7, #4
 800647c:	f107 0314 	add.w	r3, r7, #20
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fc30 	bl	8006ce8 <xTaskCheckForTimeOut>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d124      	bne.n	80064d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800648e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006490:	f000 f98a 	bl	80067a8 <prvIsQueueFull>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d018      	beq.n	80064cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	3310      	adds	r3, #16
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fb80 	bl	8006ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064aa:	f000 f92b 	bl	8006704 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ae:	f000 f9a1 	bl	80067f4 <xTaskResumeAll>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f af7c 	bne.w	80063b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <xQueueGenericSend+0x208>)
 80064bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	e772      	b.n	80063b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 f919 	bl	8006704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d2:	f000 f98f 	bl	80067f4 <xTaskResumeAll>
 80064d6:	e76c      	b.n	80063b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064da:	f000 f913 	bl	8006704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064de:	f000 f989 	bl	80067f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	; 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08e      	sub	sp, #56	; 0x38
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10c      	bne.n	8006522 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	b672      	cpsid	i
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	b662      	cpsie	i
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <xQueueGenericSendFromISR+0x40>
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <xQueueGenericSendFromISR+0x44>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <xQueueGenericSendFromISR+0x46>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	b672      	cpsid	i
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	b662      	cpsie	i
 800654e:	623b      	str	r3, [r7, #32]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d103      	bne.n	8006562 <xQueueGenericSendFromISR+0x72>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <xQueueGenericSendFromISR+0x76>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <xQueueGenericSendFromISR+0x78>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	61fb      	str	r3, [r7, #28]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006586:	f000 fe23 	bl	80071d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800658a:	f3ef 8211 	mrs	r2, BASEPRI
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	61ba      	str	r2, [r7, #24]
 80065a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <xQueueGenericSendFromISR+0xcc>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d12c      	bne.n	8006616 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065cc:	f000 f830 	bl	8006630 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d112      	bne.n	8006600 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	3324      	adds	r3, #36	; 0x24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb04 	bl	8006bf4 <xTaskRemoveFromEventList>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00e      	beq.n	8006610 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e007      	b.n	8006610 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006604:	3301      	adds	r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	b25a      	sxtb	r2, r3
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006610:	2301      	movs	r3, #1
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006614:	e001      	b.n	800661a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006616:	2300      	movs	r3, #0
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006628:	4618      	mov	r0, r3
 800662a:	3738      	adds	r7, #56	; 0x38
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10d      	bne.n	800666a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d14d      	bne.n	80066f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fbf4 	bl	8006e48 <xTaskPriorityDisinherit>
 8006660:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	e043      	b.n	80066f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d119      	bne.n	80066a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6858      	ldr	r0, [r3, #4]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	461a      	mov	r2, r3
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	f000 feb6 	bl	80073ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d32b      	bcc.n	80066f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	e026      	b.n	80066f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68d8      	ldr	r0, [r3, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	461a      	mov	r2, r3
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	f000 fe9c 	bl	80073ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	425b      	negs	r3, r3
 80066be:	441a      	add	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d207      	bcs.n	80066e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	425b      	negs	r3, r3
 80066da:	441a      	add	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d105      	bne.n	80066f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fa:	697b      	ldr	r3, [r7, #20]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800670c:	f000 fca4 	bl	8007058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006716:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006718:	e011      	b.n	800673e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d012      	beq.n	8006748 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3324      	adds	r3, #36	; 0x24
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa64 	bl	8006bf4 <xTaskRemoveFromEventList>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006732:	f000 fb3f 	bl	8006db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	3b01      	subs	r3, #1
 800673a:	b2db      	uxtb	r3, r3
 800673c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800673e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006742:	2b00      	cmp	r3, #0
 8006744:	dce9      	bgt.n	800671a <prvUnlockQueue+0x16>
 8006746:	e000      	b.n	800674a <prvUnlockQueue+0x46>
					break;
 8006748:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	22ff      	movs	r2, #255	; 0xff
 800674e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006752:	f000 fcb5 	bl	80070c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006756:	f000 fc7f 	bl	8007058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006760:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006762:	e011      	b.n	8006788 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d012      	beq.n	8006792 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3310      	adds	r3, #16
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fa3f 	bl	8006bf4 <xTaskRemoveFromEventList>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800677c:	f000 fb1a 	bl	8006db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	3b01      	subs	r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dce9      	bgt.n	8006764 <prvUnlockQueue+0x60>
 8006790:	e000      	b.n	8006794 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006792:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	22ff      	movs	r2, #255	; 0xff
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800679c:	f000 fc90 	bl	80070c0 <vPortExitCritical>
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067b0:	f000 fc52 	bl	8007058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	429a      	cmp	r2, r3
 80067be:	d102      	bne.n	80067c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e001      	b.n	80067ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ca:	f000 fc79 	bl	80070c0 <vPortExitCritical>

	return xReturn;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	4a03      	ldr	r2, [pc, #12]	; (80067f0 <vTaskSuspendAll+0x18>)
 80067e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	20000174 	.word	0x20000174

080067f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006802:	4b42      	ldr	r3, [pc, #264]	; (800690c <xTaskResumeAll+0x118>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <xTaskResumeAll+0x30>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	b672      	cpsid	i
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	b662      	cpsie	i
 800681e:	603b      	str	r3, [r7, #0]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006824:	f000 fc18 	bl	8007058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006828:	4b38      	ldr	r3, [pc, #224]	; (800690c <xTaskResumeAll+0x118>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3b01      	subs	r3, #1
 800682e:	4a37      	ldr	r2, [pc, #220]	; (800690c <xTaskResumeAll+0x118>)
 8006830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006832:	4b36      	ldr	r3, [pc, #216]	; (800690c <xTaskResumeAll+0x118>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d161      	bne.n	80068fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800683a:	4b35      	ldr	r3, [pc, #212]	; (8006910 <xTaskResumeAll+0x11c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d05d      	beq.n	80068fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006842:	e02e      	b.n	80068a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <xTaskResumeAll+0x120>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fd1c 	bl	800628e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fd17 	bl	800628e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	2201      	movs	r2, #1
 8006866:	409a      	lsls	r2, r3
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <xTaskResumeAll+0x124>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4313      	orrs	r3, r2
 800686e:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <xTaskResumeAll+0x124>)
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a27      	ldr	r2, [pc, #156]	; (800691c <xTaskResumeAll+0x128>)
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7ff fca3 	bl	80061d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	4b23      	ldr	r3, [pc, #140]	; (8006920 <xTaskResumeAll+0x12c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800689c:	4b21      	ldr	r3, [pc, #132]	; (8006924 <xTaskResumeAll+0x130>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <xTaskResumeAll+0x120>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1cc      	bne.n	8006844 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068b0:	f000 fa8c 	bl	8006dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068b4:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <xTaskResumeAll+0x134>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068c0:	f000 f836 	bl	8006930 <xTaskIncrementTick>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80068ca:	4b16      	ldr	r3, [pc, #88]	; (8006924 <xTaskResumeAll+0x130>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80068dc:	4b12      	ldr	r3, [pc, #72]	; (8006928 <xTaskResumeAll+0x134>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <xTaskResumeAll+0x130>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <xTaskResumeAll+0x138>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068fe:	f000 fbdf 	bl	80070c0 <vPortExitCritical>

	return xAlreadyYielded;
 8006902:	68bb      	ldr	r3, [r7, #8]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000174 	.word	0x20000174
 8006910:	20000154 	.word	0x20000154
 8006914:	2000012c 	.word	0x2000012c
 8006918:	2000015c 	.word	0x2000015c
 800691c:	20000098 	.word	0x20000098
 8006920:	20000094 	.word	0x20000094
 8006924:	20000168 	.word	0x20000168
 8006928:	20000164 	.word	0x20000164
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800693a:	4b4f      	ldr	r3, [pc, #316]	; (8006a78 <xTaskIncrementTick+0x148>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 808a 	bne.w	8006a58 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006944:	4b4d      	ldr	r3, [pc, #308]	; (8006a7c <xTaskIncrementTick+0x14c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800694c:	4a4b      	ldr	r2, [pc, #300]	; (8006a7c <xTaskIncrementTick+0x14c>)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d122      	bne.n	800699e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006958:	4b49      	ldr	r3, [pc, #292]	; (8006a80 <xTaskIncrementTick+0x150>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	b672      	cpsid	i
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	b662      	cpsie	i
 8006976:	603b      	str	r3, [r7, #0]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <xTaskIncrementTick+0x4a>
 800697c:	4b40      	ldr	r3, [pc, #256]	; (8006a80 <xTaskIncrementTick+0x150>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <xTaskIncrementTick+0x154>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a3e      	ldr	r2, [pc, #248]	; (8006a80 <xTaskIncrementTick+0x150>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4a3e      	ldr	r2, [pc, #248]	; (8006a84 <xTaskIncrementTick+0x154>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	4b3d      	ldr	r3, [pc, #244]	; (8006a88 <xTaskIncrementTick+0x158>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <xTaskIncrementTick+0x158>)
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	f000 fa17 	bl	8006dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800699e:	4b3b      	ldr	r3, [pc, #236]	; (8006a8c <xTaskIncrementTick+0x15c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d348      	bcc.n	8006a3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <xTaskIncrementTick+0x150>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b2:	4b36      	ldr	r3, [pc, #216]	; (8006a8c <xTaskIncrementTick+0x15c>)
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	601a      	str	r2, [r3, #0]
					break;
 80069ba:	e03e      	b.n	8006a3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069bc:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <xTaskIncrementTick+0x150>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d203      	bcs.n	80069dc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069d4:	4a2d      	ldr	r2, [pc, #180]	; (8006a8c <xTaskIncrementTick+0x15c>)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069da:	e02e      	b.n	8006a3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fc54 	bl	800628e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3318      	adds	r3, #24
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fc4b 	bl	800628e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	2201      	movs	r2, #1
 80069fe:	409a      	lsls	r2, r3
 8006a00:	4b23      	ldr	r3, [pc, #140]	; (8006a90 <xTaskIncrementTick+0x160>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <xTaskIncrementTick+0x160>)
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <xTaskIncrementTick+0x164>)
 8006a18:	441a      	add	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7ff fbd7 	bl	80061d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <xTaskIncrementTick+0x168>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d3b9      	bcc.n	80069a8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a38:	e7b6      	b.n	80069a8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a3a:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <xTaskIncrementTick+0x168>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4914      	ldr	r1, [pc, #80]	; (8006a94 <xTaskIncrementTick+0x164>)
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d907      	bls.n	8006a62 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e004      	b.n	8006a62 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a58:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <xTaskIncrementTick+0x16c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a0f      	ldr	r2, [pc, #60]	; (8006a9c <xTaskIncrementTick+0x16c>)
 8006a60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <xTaskIncrementTick+0x170>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a6e:	697b      	ldr	r3, [r7, #20]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000174 	.word	0x20000174
 8006a7c:	20000158 	.word	0x20000158
 8006a80:	20000124 	.word	0x20000124
 8006a84:	20000128 	.word	0x20000128
 8006a88:	2000016c 	.word	0x2000016c
 8006a8c:	20000170 	.word	0x20000170
 8006a90:	2000015c 	.word	0x2000015c
 8006a94:	20000098 	.word	0x20000098
 8006a98:	20000094 	.word	0x20000094
 8006a9c:	20000164 	.word	0x20000164
 8006aa0:	20000168 	.word	0x20000168

08006aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <vTaskSwitchContext+0xf0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ab2:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <vTaskSwitchContext+0xf4>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ab8:	e068      	b.n	8006b8c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8006aba:	4b37      	ldr	r3, [pc, #220]	; (8006b98 <vTaskSwitchContext+0xf4>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006ac0:	4b36      	ldr	r3, [pc, #216]	; (8006b9c <vTaskSwitchContext+0xf8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d111      	bne.n	8006afc <vTaskSwitchContext+0x58>
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3304      	adds	r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d10b      	bne.n	8006afc <vTaskSwitchContext+0x58>
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d105      	bne.n	8006afc <vTaskSwitchContext+0x58>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	330c      	adds	r3, #12
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d008      	beq.n	8006b0e <vTaskSwitchContext+0x6a>
 8006afc:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <vTaskSwitchContext+0xf8>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <vTaskSwitchContext+0xf8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3334      	adds	r3, #52	; 0x34
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7f9 fe25 	bl	8000758 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <vTaskSwitchContext+0xfc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	fab3 f383 	clz	r3, r3
 8006b1a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	f1c3 031f 	rsb	r3, r3, #31
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	491f      	ldr	r1, [pc, #124]	; (8006ba4 <vTaskSwitchContext+0x100>)
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10c      	bne.n	8006b52 <vTaskSwitchContext+0xae>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	b672      	cpsid	i
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	b662      	cpsie	i
 8006b4c:	607b      	str	r3, [r7, #4]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <vTaskSwitchContext+0xac>
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <vTaskSwitchContext+0x100>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3308      	adds	r3, #8
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <vTaskSwitchContext+0xde>
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <vTaskSwitchContext+0xf8>)
 8006b8a:	6013      	str	r3, [r2, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000174 	.word	0x20000174
 8006b98:	20000168 	.word	0x20000168
 8006b9c:	20000094 	.word	0x20000094
 8006ba0:	2000015c 	.word	0x2000015c
 8006ba4:	20000098 	.word	0x20000098

08006ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10c      	bne.n	8006bd2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	b672      	cpsid	i
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	b662      	cpsie	i
 8006bcc:	60fb      	str	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vTaskPlaceOnEventList+0x48>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fb1e 	bl	800621c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006be0:	2101      	movs	r1, #1
 8006be2:	6838      	ldr	r0, [r7, #0]
 8006be4:	f000 f9ba 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000094 	.word	0x20000094

08006bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10c      	bne.n	8006c24 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	b672      	cpsid	i
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	b662      	cpsie	i
 8006c1e:	60fb      	str	r3, [r7, #12]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	3318      	adds	r3, #24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fb30 	bl	800628e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <xTaskRemoveFromEventList+0xb0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d11c      	bne.n	8006c70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fb27 	bl	800628e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	2201      	movs	r2, #1
 8006c46:	409a      	lsls	r2, r3
 8006c48:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <xTaskRemoveFromEventList+0xb4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	4a16      	ldr	r2, [pc, #88]	; (8006ca8 <xTaskRemoveFromEventList+0xb4>)
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4a13      	ldr	r2, [pc, #76]	; (8006cac <xTaskRemoveFromEventList+0xb8>)
 8006c60:	441a      	add	r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7ff fab3 	bl	80061d4 <vListInsertEnd>
 8006c6e:	e005      	b.n	8006c7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3318      	adds	r3, #24
 8006c74:	4619      	mov	r1, r3
 8006c76:	480e      	ldr	r0, [pc, #56]	; (8006cb0 <xTaskRemoveFromEventList+0xbc>)
 8006c78:	f7ff faac 	bl	80061d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <xTaskRemoveFromEventList+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d905      	bls.n	8006c96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <xTaskRemoveFromEventList+0xc4>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	e001      	b.n	8006c9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c9a:	697b      	ldr	r3, [r7, #20]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000174 	.word	0x20000174
 8006ca8:	2000015c 	.word	0x2000015c
 8006cac:	20000098 	.word	0x20000098
 8006cb0:	2000012c 	.word	0x2000012c
 8006cb4:	20000094 	.word	0x20000094
 8006cb8:	20000168 	.word	0x20000168

08006cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <vTaskInternalSetTimeOutState+0x24>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <vTaskInternalSetTimeOutState+0x28>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	605a      	str	r2, [r3, #4]
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	2000016c 	.word	0x2000016c
 8006ce4:	20000158 	.word	0x20000158

08006ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	b672      	cpsid	i
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	b662      	cpsie	i
 8006d0c:	613b      	str	r3, [r7, #16]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10c      	bne.n	8006d32 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	60fb      	str	r3, [r7, #12]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006d32:	f000 f991 	bl	8007058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <xTaskCheckForTimeOut+0xc4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d102      	bne.n	8006d56 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e023      	b.n	8006d9e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <xTaskCheckForTimeOut+0xc8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d007      	beq.n	8006d72 <xTaskCheckForTimeOut+0x8a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d302      	bcc.n	8006d72 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e015      	b.n	8006d9e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d20b      	bcs.n	8006d94 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff97 	bl	8006cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e004      	b.n	8006d9e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d9e:	f000 f98f 	bl	80070c0 <vPortExitCritical>

	return xReturn;
 8006da2:	69fb      	ldr	r3, [r7, #28]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000158 	.word	0x20000158
 8006db0:	2000016c 	.word	0x2000016c

08006db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <vTaskMissedYield+0x14>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000168 	.word	0x20000168

08006dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006de4:	e008      	b.n	8006df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a04      	ldr	r2, [pc, #16]	; (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000124 	.word	0x20000124
 8006e08:	20000170 	.word	0x20000170

08006e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <xTaskGetSchedulerState+0x34>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	e008      	b.n	8006e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e20:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <xTaskGetSchedulerState+0x38>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	607b      	str	r3, [r7, #4]
 8006e2c:	e001      	b.n	8006e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e32:	687b      	ldr	r3, [r7, #4]
	}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000160 	.word	0x20000160
 8006e44:	20000174 	.word	0x20000174

08006e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d072      	beq.n	8006f44 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e5e:	4b3c      	ldr	r3, [pc, #240]	; (8006f50 <xTaskPriorityDisinherit+0x108>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d00c      	beq.n	8006e82 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	b672      	cpsid	i
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	b662      	cpsie	i
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	b672      	cpsid	i
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	b662      	cpsie	i
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d044      	beq.n	8006f44 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d140      	bne.n	8006f44 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f9e1 	bl	800628e <uxListRemove>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d115      	bne.n	8006efe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed6:	491f      	ldr	r1, [pc, #124]	; (8006f54 <xTaskPriorityDisinherit+0x10c>)
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xTaskPriorityDisinherit+0xb6>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	2201      	movs	r2, #1
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <xTaskPriorityDisinherit+0x110>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <xTaskPriorityDisinherit+0x110>)
 8006efc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f1c3 0207 	rsb	r2, r3, #7
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	2201      	movs	r2, #1
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <xTaskPriorityDisinherit+0x110>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <xTaskPriorityDisinherit+0x110>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <xTaskPriorityDisinherit+0x10c>)
 8006f32:	441a      	add	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7ff f94a 	bl	80061d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f44:	697b      	ldr	r3, [r7, #20]
	}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000094 	.word	0x20000094
 8006f54:	20000098 	.word	0x20000098
 8006f58:	2000015c 	.word	0x2000015c

08006f5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6c:	4b28      	ldr	r3, [pc, #160]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff f98b 	bl	800628e <uxListRemove>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f7e:	4b24      	ldr	r3, [pc, #144]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2201      	movs	r2, #1
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	4a20      	ldr	r2, [pc, #128]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d10a      	bne.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	481a      	ldr	r0, [pc, #104]	; (8007018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fae:	f7ff f911 	bl	80061d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fb2:	e026      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d209      	bcs.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7ff f91f 	bl	800621c <vListInsert>
}
 8006fde:	e010      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7ff f915 	bl	800621c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d202      	bcs.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6013      	str	r3, [r2, #0]
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000158 	.word	0x20000158
 8007010:	20000094 	.word	0x20000094
 8007014:	2000015c 	.word	0x2000015c
 8007018:	20000140 	.word	0x20000140
 800701c:	20000128 	.word	0x20000128
 8007020:	20000124 	.word	0x20000124
 8007024:	20000170 	.word	0x20000170
	...

08007030 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <pxCurrentTCBConst2>)
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	f380 8809 	msr	PSP, r0
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	4770      	bx	lr
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst2>:
 8007050:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	b672      	cpsid	i
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	b662      	cpsie	i
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007076:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <vPortEnterCritical+0x60>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <vPortEnterCritical+0x60>)
 800707e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <vPortEnterCritical+0x60>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d111      	bne.n	80070ac <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <vPortEnterCritical+0x64>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <vPortEnterCritical+0x54>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	603b      	str	r3, [r7, #0]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <vPortEnterCritical+0x52>
	}
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	2000000c 	.word	0x2000000c
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <vPortExitCritical+0x54>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <vPortExitCritical+0x28>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	b672      	cpsid	i
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	b662      	cpsie	i
 80070e2:	607b      	str	r3, [r7, #4]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <vPortExitCritical+0x54>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	4a09      	ldr	r2, [pc, #36]	; (8007114 <vPortExitCritical+0x54>)
 80070f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <vPortExitCritical+0x54>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <vPortExitCritical+0x46>
 80070fa:	2300      	movs	r3, #0
 80070fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f383 8811 	msr	BASEPRI, r3
}
 8007104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c
	...

08007120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007120:	f3ef 8009 	mrs	r0, PSP
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <pxCurrentTCBConst>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	f01e 0f10 	tst.w	lr, #16
 8007130:	bf08      	it	eq
 8007132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713a:	6010      	str	r0, [r2, #0]
 800713c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f380 8811 	msr	BASEPRI, r0
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	b662      	cpsie	i
 8007154:	f7ff fca6 	bl	8006aa4 <vTaskSwitchContext>
 8007158:	f04f 0000 	mov.w	r0, #0
 800715c:	f380 8811 	msr	BASEPRI, r0
 8007160:	bc09      	pop	{r0, r3}
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f01e 0f10 	tst.w	lr, #16
 800716e:	bf08      	it	eq
 8007170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007174:	f380 8809 	msr	PSP, r0
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <pxCurrentTCBConst>:
 8007180:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop

08007188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	b672      	cpsid	i
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	b662      	cpsie	i
 80071a2:	607b      	str	r3, [r7, #4]
}
 80071a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071a6:	f7ff fbc3 	bl	8006930 <xTaskIncrementTick>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <SysTick_Handler+0x44>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f383 8811 	msr	BASEPRI, r3
}
 80071c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071d6:	f3ef 8305 	mrs	r3, IPSR
 80071da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b0f      	cmp	r3, #15
 80071e0:	d916      	bls.n	8007210 <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071e2:	4a19      	ldr	r2, [pc, #100]	; (8007248 <vPortValidateInterruptPriority+0x78>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <vPortValidateInterruptPriority+0x7c>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	7afa      	ldrb	r2, [r7, #11]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d20c      	bcs.n	8007210 <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	b672      	cpsid	i
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	b662      	cpsie	i
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007210:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <vPortValidateInterruptPriority+0x80>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <vPortValidateInterruptPriority+0x84>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d90c      	bls.n	800723a <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	b672      	cpsid	i
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	b662      	cpsie	i
 8007234:	603b      	str	r3, [r7, #0]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <vPortValidateInterruptPriority+0x68>
	}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	e000e3f0 	.word	0xe000e3f0
 800724c:	20000178 	.word	0x20000178
 8007250:	e000ed0c 	.word	0xe000ed0c
 8007254:	2000017c 	.word	0x2000017c

08007258 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fe85 	bl	8005f76 <USBH_LL_IncTimer>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fec9 	bl	800601a <USBH_LL_Connect>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fede 	bl	8006060 <USBH_LL_Disconnect>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
 80072b8:	4613      	mov	r3, r2
 80072ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fefe 	bl	80060c4 <USBH_LL_NotifyURBChange>
#endif
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fe73 	bl	8005fca <USBH_LL_PortEnabled>
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fe7f 	bl	8005ffe <USBH_LL_PortDisabled>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa fb6a 	bl	80019f8 <HAL_HCD_Stop>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	4618      	mov	r0, r3
 800732c:	f000 f808 	bl	8007340 <USBH_Get_USB_Status>
 8007330:	4603      	mov	r3, r0
 8007332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007334:	7bbb      	ldrb	r3, [r7, #14]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d817      	bhi.n	8007384 <USBH_Get_USB_Status+0x44>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBH_Get_USB_Status+0x1c>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	0800736d 	.word	0x0800736d
 8007360:	08007373 	.word	0x08007373
 8007364:	08007379 	.word	0x08007379
 8007368:	0800737f 	.word	0x0800737f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e00b      	b.n	800738a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007372:	2302      	movs	r3, #2
 8007374:	73fb      	strb	r3, [r7, #15]
    break;
 8007376:	e008      	b.n	800738a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	e005      	b.n	800738a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800737e:	2302      	movs	r3, #2
 8007380:	73fb      	strb	r3, [r7, #15]
    break;
 8007382:	e002      	b.n	800738a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007384:	2302      	movs	r3, #2
 8007386:	73fb      	strb	r3, [r7, #15]
    break;
 8007388:	bf00      	nop
  }
  return usb_status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <__errno>:
 8007398:	4b01      	ldr	r3, [pc, #4]	; (80073a0 <__errno+0x8>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000010 	.word	0x20000010

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4d0d      	ldr	r5, [pc, #52]	; (80073dc <__libc_init_array+0x38>)
 80073a8:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073aa:	1b64      	subs	r4, r4, r5
 80073ac:	10a4      	asrs	r4, r4, #2
 80073ae:	2600      	movs	r6, #0
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	4d0b      	ldr	r5, [pc, #44]	; (80073e4 <__libc_init_array+0x40>)
 80073b6:	4c0c      	ldr	r4, [pc, #48]	; (80073e8 <__libc_init_array+0x44>)
 80073b8:	f000 fc4e 	bl	8007c58 <_init>
 80073bc:	1b64      	subs	r4, r4, r5
 80073be:	10a4      	asrs	r4, r4, #2
 80073c0:	2600      	movs	r6, #0
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	08007d00 	.word	0x08007d00
 80073e0:	08007d00 	.word	0x08007d00
 80073e4:	08007d00 	.word	0x08007d00
 80073e8:	08007d04 	.word	0x08007d04

080073ec <memcpy>:
 80073ec:	440a      	add	r2, r1
 80073ee:	4291      	cmp	r1, r2
 80073f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f4:	d100      	bne.n	80073f8 <memcpy+0xc>
 80073f6:	4770      	bx	lr
 80073f8:	b510      	push	{r4, lr}
 80073fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007402:	4291      	cmp	r1, r2
 8007404:	d1f9      	bne.n	80073fa <memcpy+0xe>
 8007406:	bd10      	pop	{r4, pc}

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <_free_r>:
 8007418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800741a:	2900      	cmp	r1, #0
 800741c:	d048      	beq.n	80074b0 <_free_r+0x98>
 800741e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007422:	9001      	str	r0, [sp, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f1a1 0404 	sub.w	r4, r1, #4
 800742a:	bfb8      	it	lt
 800742c:	18e4      	addlt	r4, r4, r3
 800742e:	f000 f8cd 	bl	80075cc <__malloc_lock>
 8007432:	4a20      	ldr	r2, [pc, #128]	; (80074b4 <_free_r+0x9c>)
 8007434:	9801      	ldr	r0, [sp, #4]
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	4615      	mov	r5, r2
 800743a:	b933      	cbnz	r3, 800744a <_free_r+0x32>
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	6014      	str	r4, [r2, #0]
 8007440:	b003      	add	sp, #12
 8007442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007446:	f000 b8c7 	b.w	80075d8 <__malloc_unlock>
 800744a:	42a3      	cmp	r3, r4
 800744c:	d90b      	bls.n	8007466 <_free_r+0x4e>
 800744e:	6821      	ldr	r1, [r4, #0]
 8007450:	1862      	adds	r2, r4, r1
 8007452:	4293      	cmp	r3, r2
 8007454:	bf04      	itt	eq
 8007456:	681a      	ldreq	r2, [r3, #0]
 8007458:	685b      	ldreq	r3, [r3, #4]
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	bf04      	itt	eq
 800745e:	1852      	addeq	r2, r2, r1
 8007460:	6022      	streq	r2, [r4, #0]
 8007462:	602c      	str	r4, [r5, #0]
 8007464:	e7ec      	b.n	8007440 <_free_r+0x28>
 8007466:	461a      	mov	r2, r3
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	b10b      	cbz	r3, 8007470 <_free_r+0x58>
 800746c:	42a3      	cmp	r3, r4
 800746e:	d9fa      	bls.n	8007466 <_free_r+0x4e>
 8007470:	6811      	ldr	r1, [r2, #0]
 8007472:	1855      	adds	r5, r2, r1
 8007474:	42a5      	cmp	r5, r4
 8007476:	d10b      	bne.n	8007490 <_free_r+0x78>
 8007478:	6824      	ldr	r4, [r4, #0]
 800747a:	4421      	add	r1, r4
 800747c:	1854      	adds	r4, r2, r1
 800747e:	42a3      	cmp	r3, r4
 8007480:	6011      	str	r1, [r2, #0]
 8007482:	d1dd      	bne.n	8007440 <_free_r+0x28>
 8007484:	681c      	ldr	r4, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	6053      	str	r3, [r2, #4]
 800748a:	4421      	add	r1, r4
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	e7d7      	b.n	8007440 <_free_r+0x28>
 8007490:	d902      	bls.n	8007498 <_free_r+0x80>
 8007492:	230c      	movs	r3, #12
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	e7d3      	b.n	8007440 <_free_r+0x28>
 8007498:	6825      	ldr	r5, [r4, #0]
 800749a:	1961      	adds	r1, r4, r5
 800749c:	428b      	cmp	r3, r1
 800749e:	bf04      	itt	eq
 80074a0:	6819      	ldreq	r1, [r3, #0]
 80074a2:	685b      	ldreq	r3, [r3, #4]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	bf04      	itt	eq
 80074a8:	1949      	addeq	r1, r1, r5
 80074aa:	6021      	streq	r1, [r4, #0]
 80074ac:	6054      	str	r4, [r2, #4]
 80074ae:	e7c7      	b.n	8007440 <_free_r+0x28>
 80074b0:	b003      	add	sp, #12
 80074b2:	bd30      	pop	{r4, r5, pc}
 80074b4:	20000180 	.word	0x20000180

080074b8 <_malloc_r>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	1ccd      	adds	r5, r1, #3
 80074bc:	f025 0503 	bic.w	r5, r5, #3
 80074c0:	3508      	adds	r5, #8
 80074c2:	2d0c      	cmp	r5, #12
 80074c4:	bf38      	it	cc
 80074c6:	250c      	movcc	r5, #12
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	4606      	mov	r6, r0
 80074cc:	db01      	blt.n	80074d2 <_malloc_r+0x1a>
 80074ce:	42a9      	cmp	r1, r5
 80074d0:	d903      	bls.n	80074da <_malloc_r+0x22>
 80074d2:	230c      	movs	r3, #12
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	2000      	movs	r0, #0
 80074d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074da:	f000 f877 	bl	80075cc <__malloc_lock>
 80074de:	4921      	ldr	r1, [pc, #132]	; (8007564 <_malloc_r+0xac>)
 80074e0:	680a      	ldr	r2, [r1, #0]
 80074e2:	4614      	mov	r4, r2
 80074e4:	b99c      	cbnz	r4, 800750e <_malloc_r+0x56>
 80074e6:	4f20      	ldr	r7, [pc, #128]	; (8007568 <_malloc_r+0xb0>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	b923      	cbnz	r3, 80074f6 <_malloc_r+0x3e>
 80074ec:	4621      	mov	r1, r4
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 f83c 	bl	800756c <_sbrk_r>
 80074f4:	6038      	str	r0, [r7, #0]
 80074f6:	4629      	mov	r1, r5
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 f837 	bl	800756c <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d123      	bne.n	800754a <_malloc_r+0x92>
 8007502:	230c      	movs	r3, #12
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f866 	bl	80075d8 <__malloc_unlock>
 800750c:	e7e3      	b.n	80074d6 <_malloc_r+0x1e>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	1b5b      	subs	r3, r3, r5
 8007512:	d417      	bmi.n	8007544 <_malloc_r+0x8c>
 8007514:	2b0b      	cmp	r3, #11
 8007516:	d903      	bls.n	8007520 <_malloc_r+0x68>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	441c      	add	r4, r3
 800751c:	6025      	str	r5, [r4, #0]
 800751e:	e004      	b.n	800752a <_malloc_r+0x72>
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	42a2      	cmp	r2, r4
 8007524:	bf0c      	ite	eq
 8007526:	600b      	streq	r3, [r1, #0]
 8007528:	6053      	strne	r3, [r2, #4]
 800752a:	4630      	mov	r0, r6
 800752c:	f000 f854 	bl	80075d8 <__malloc_unlock>
 8007530:	f104 000b 	add.w	r0, r4, #11
 8007534:	1d23      	adds	r3, r4, #4
 8007536:	f020 0007 	bic.w	r0, r0, #7
 800753a:	1ac2      	subs	r2, r0, r3
 800753c:	d0cc      	beq.n	80074d8 <_malloc_r+0x20>
 800753e:	1a1b      	subs	r3, r3, r0
 8007540:	50a3      	str	r3, [r4, r2]
 8007542:	e7c9      	b.n	80074d8 <_malloc_r+0x20>
 8007544:	4622      	mov	r2, r4
 8007546:	6864      	ldr	r4, [r4, #4]
 8007548:	e7cc      	b.n	80074e4 <_malloc_r+0x2c>
 800754a:	1cc4      	adds	r4, r0, #3
 800754c:	f024 0403 	bic.w	r4, r4, #3
 8007550:	42a0      	cmp	r0, r4
 8007552:	d0e3      	beq.n	800751c <_malloc_r+0x64>
 8007554:	1a21      	subs	r1, r4, r0
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f808 	bl	800756c <_sbrk_r>
 800755c:	3001      	adds	r0, #1
 800755e:	d1dd      	bne.n	800751c <_malloc_r+0x64>
 8007560:	e7cf      	b.n	8007502 <_malloc_r+0x4a>
 8007562:	bf00      	nop
 8007564:	20000180 	.word	0x20000180
 8007568:	20000184 	.word	0x20000184

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_sbrk_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7f9 fcda 	bl	8000f30 <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000d18 	.word	0x20000d18

0800758c <siprintf>:
 800758c:	b40e      	push	{r1, r2, r3}
 800758e:	b500      	push	{lr}
 8007590:	b09c      	sub	sp, #112	; 0x70
 8007592:	ab1d      	add	r3, sp, #116	; 0x74
 8007594:	9002      	str	r0, [sp, #8]
 8007596:	9006      	str	r0, [sp, #24]
 8007598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800759c:	4809      	ldr	r0, [pc, #36]	; (80075c4 <siprintf+0x38>)
 800759e:	9107      	str	r1, [sp, #28]
 80075a0:	9104      	str	r1, [sp, #16]
 80075a2:	4909      	ldr	r1, [pc, #36]	; (80075c8 <siprintf+0x3c>)
 80075a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	a902      	add	r1, sp, #8
 80075b0:	f000 f874 	bl	800769c <_svfiprintf_r>
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	b01c      	add	sp, #112	; 0x70
 80075bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c0:	b003      	add	sp, #12
 80075c2:	4770      	bx	lr
 80075c4:	20000010 	.word	0x20000010
 80075c8:	ffff0208 	.word	0xffff0208

080075cc <__malloc_lock>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__malloc_lock+0x8>)
 80075ce:	f000 baf9 	b.w	8007bc4 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20000d20 	.word	0x20000d20

080075d8 <__malloc_unlock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__malloc_unlock+0x8>)
 80075da:	f000 baf4 	b.w	8007bc6 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20000d20 	.word	0x20000d20

080075e4 <__ssputs_r>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	688e      	ldr	r6, [r1, #8]
 80075ea:	429e      	cmp	r6, r3
 80075ec:	4682      	mov	sl, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	4690      	mov	r8, r2
 80075f2:	461f      	mov	r7, r3
 80075f4:	d838      	bhi.n	8007668 <__ssputs_r+0x84>
 80075f6:	898a      	ldrh	r2, [r1, #12]
 80075f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075fc:	d032      	beq.n	8007664 <__ssputs_r+0x80>
 80075fe:	6825      	ldr	r5, [r4, #0]
 8007600:	6909      	ldr	r1, [r1, #16]
 8007602:	eba5 0901 	sub.w	r9, r5, r1
 8007606:	6965      	ldr	r5, [r4, #20]
 8007608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007610:	3301      	adds	r3, #1
 8007612:	444b      	add	r3, r9
 8007614:	106d      	asrs	r5, r5, #1
 8007616:	429d      	cmp	r5, r3
 8007618:	bf38      	it	cc
 800761a:	461d      	movcc	r5, r3
 800761c:	0553      	lsls	r3, r2, #21
 800761e:	d531      	bpl.n	8007684 <__ssputs_r+0xa0>
 8007620:	4629      	mov	r1, r5
 8007622:	f7ff ff49 	bl	80074b8 <_malloc_r>
 8007626:	4606      	mov	r6, r0
 8007628:	b950      	cbnz	r0, 8007640 <__ssputs_r+0x5c>
 800762a:	230c      	movs	r3, #12
 800762c:	f8ca 3000 	str.w	r3, [sl]
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	6921      	ldr	r1, [r4, #16]
 8007642:	464a      	mov	r2, r9
 8007644:	f7ff fed2 	bl	80073ec <memcpy>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800764e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	6126      	str	r6, [r4, #16]
 8007656:	6165      	str	r5, [r4, #20]
 8007658:	444e      	add	r6, r9
 800765a:	eba5 0509 	sub.w	r5, r5, r9
 800765e:	6026      	str	r6, [r4, #0]
 8007660:	60a5      	str	r5, [r4, #8]
 8007662:	463e      	mov	r6, r7
 8007664:	42be      	cmp	r6, r7
 8007666:	d900      	bls.n	800766a <__ssputs_r+0x86>
 8007668:	463e      	mov	r6, r7
 800766a:	4632      	mov	r2, r6
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	4641      	mov	r1, r8
 8007670:	f000 faaa 	bl	8007bc8 <memmove>
 8007674:	68a3      	ldr	r3, [r4, #8]
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	1b9b      	subs	r3, r3, r6
 800767a:	4432      	add	r2, r6
 800767c:	60a3      	str	r3, [r4, #8]
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	2000      	movs	r0, #0
 8007682:	e7db      	b.n	800763c <__ssputs_r+0x58>
 8007684:	462a      	mov	r2, r5
 8007686:	f000 fab9 	bl	8007bfc <_realloc_r>
 800768a:	4606      	mov	r6, r0
 800768c:	2800      	cmp	r0, #0
 800768e:	d1e1      	bne.n	8007654 <__ssputs_r+0x70>
 8007690:	6921      	ldr	r1, [r4, #16]
 8007692:	4650      	mov	r0, sl
 8007694:	f7ff fec0 	bl	8007418 <_free_r>
 8007698:	e7c7      	b.n	800762a <__ssputs_r+0x46>
	...

0800769c <_svfiprintf_r>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	4698      	mov	r8, r3
 80076a2:	898b      	ldrh	r3, [r1, #12]
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	b09d      	sub	sp, #116	; 0x74
 80076a8:	4607      	mov	r7, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	4614      	mov	r4, r2
 80076ae:	d50e      	bpl.n	80076ce <_svfiprintf_r+0x32>
 80076b0:	690b      	ldr	r3, [r1, #16]
 80076b2:	b963      	cbnz	r3, 80076ce <_svfiprintf_r+0x32>
 80076b4:	2140      	movs	r1, #64	; 0x40
 80076b6:	f7ff feff 	bl	80074b8 <_malloc_r>
 80076ba:	6028      	str	r0, [r5, #0]
 80076bc:	6128      	str	r0, [r5, #16]
 80076be:	b920      	cbnz	r0, 80076ca <_svfiprintf_r+0x2e>
 80076c0:	230c      	movs	r3, #12
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	e0d1      	b.n	800786e <_svfiprintf_r+0x1d2>
 80076ca:	2340      	movs	r3, #64	; 0x40
 80076cc:	616b      	str	r3, [r5, #20]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9309      	str	r3, [sp, #36]	; 0x24
 80076d2:	2320      	movs	r3, #32
 80076d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076dc:	2330      	movs	r3, #48	; 0x30
 80076de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007888 <_svfiprintf_r+0x1ec>
 80076e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e6:	f04f 0901 	mov.w	r9, #1
 80076ea:	4623      	mov	r3, r4
 80076ec:	469a      	mov	sl, r3
 80076ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f2:	b10a      	cbz	r2, 80076f8 <_svfiprintf_r+0x5c>
 80076f4:	2a25      	cmp	r2, #37	; 0x25
 80076f6:	d1f9      	bne.n	80076ec <_svfiprintf_r+0x50>
 80076f8:	ebba 0b04 	subs.w	fp, sl, r4
 80076fc:	d00b      	beq.n	8007716 <_svfiprintf_r+0x7a>
 80076fe:	465b      	mov	r3, fp
 8007700:	4622      	mov	r2, r4
 8007702:	4629      	mov	r1, r5
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff ff6d 	bl	80075e4 <__ssputs_r>
 800770a:	3001      	adds	r0, #1
 800770c:	f000 80aa 	beq.w	8007864 <_svfiprintf_r+0x1c8>
 8007710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007712:	445a      	add	r2, fp
 8007714:	9209      	str	r2, [sp, #36]	; 0x24
 8007716:	f89a 3000 	ldrb.w	r3, [sl]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 80a2 	beq.w	8007864 <_svfiprintf_r+0x1c8>
 8007720:	2300      	movs	r3, #0
 8007722:	f04f 32ff 	mov.w	r2, #4294967295
 8007726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800772a:	f10a 0a01 	add.w	sl, sl, #1
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	9307      	str	r3, [sp, #28]
 8007732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007736:	931a      	str	r3, [sp, #104]	; 0x68
 8007738:	4654      	mov	r4, sl
 800773a:	2205      	movs	r2, #5
 800773c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007740:	4851      	ldr	r0, [pc, #324]	; (8007888 <_svfiprintf_r+0x1ec>)
 8007742:	f7f8 fd6d 	bl	8000220 <memchr>
 8007746:	9a04      	ldr	r2, [sp, #16]
 8007748:	b9d8      	cbnz	r0, 8007782 <_svfiprintf_r+0xe6>
 800774a:	06d0      	lsls	r0, r2, #27
 800774c:	bf44      	itt	mi
 800774e:	2320      	movmi	r3, #32
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007754:	0711      	lsls	r1, r2, #28
 8007756:	bf44      	itt	mi
 8007758:	232b      	movmi	r3, #43	; 0x2b
 800775a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775e:	f89a 3000 	ldrb.w	r3, [sl]
 8007762:	2b2a      	cmp	r3, #42	; 0x2a
 8007764:	d015      	beq.n	8007792 <_svfiprintf_r+0xf6>
 8007766:	9a07      	ldr	r2, [sp, #28]
 8007768:	4654      	mov	r4, sl
 800776a:	2000      	movs	r0, #0
 800776c:	f04f 0c0a 	mov.w	ip, #10
 8007770:	4621      	mov	r1, r4
 8007772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007776:	3b30      	subs	r3, #48	; 0x30
 8007778:	2b09      	cmp	r3, #9
 800777a:	d94e      	bls.n	800781a <_svfiprintf_r+0x17e>
 800777c:	b1b0      	cbz	r0, 80077ac <_svfiprintf_r+0x110>
 800777e:	9207      	str	r2, [sp, #28]
 8007780:	e014      	b.n	80077ac <_svfiprintf_r+0x110>
 8007782:	eba0 0308 	sub.w	r3, r0, r8
 8007786:	fa09 f303 	lsl.w	r3, r9, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	46a2      	mov	sl, r4
 8007790:	e7d2      	b.n	8007738 <_svfiprintf_r+0x9c>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	1d19      	adds	r1, r3, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	9103      	str	r1, [sp, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfbb      	ittet	lt
 800779e:	425b      	neglt	r3, r3
 80077a0:	f042 0202 	orrlt.w	r2, r2, #2
 80077a4:	9307      	strge	r3, [sp, #28]
 80077a6:	9307      	strlt	r3, [sp, #28]
 80077a8:	bfb8      	it	lt
 80077aa:	9204      	strlt	r2, [sp, #16]
 80077ac:	7823      	ldrb	r3, [r4, #0]
 80077ae:	2b2e      	cmp	r3, #46	; 0x2e
 80077b0:	d10c      	bne.n	80077cc <_svfiprintf_r+0x130>
 80077b2:	7863      	ldrb	r3, [r4, #1]
 80077b4:	2b2a      	cmp	r3, #42	; 0x2a
 80077b6:	d135      	bne.n	8007824 <_svfiprintf_r+0x188>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	9203      	str	r2, [sp, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bfb8      	it	lt
 80077c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80077c8:	3402      	adds	r4, #2
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007898 <_svfiprintf_r+0x1fc>
 80077d0:	7821      	ldrb	r1, [r4, #0]
 80077d2:	2203      	movs	r2, #3
 80077d4:	4650      	mov	r0, sl
 80077d6:	f7f8 fd23 	bl	8000220 <memchr>
 80077da:	b140      	cbz	r0, 80077ee <_svfiprintf_r+0x152>
 80077dc:	2340      	movs	r3, #64	; 0x40
 80077de:	eba0 000a 	sub.w	r0, r0, sl
 80077e2:	fa03 f000 	lsl.w	r0, r3, r0
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	4303      	orrs	r3, r0
 80077ea:	3401      	adds	r4, #1
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f2:	4826      	ldr	r0, [pc, #152]	; (800788c <_svfiprintf_r+0x1f0>)
 80077f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f8:	2206      	movs	r2, #6
 80077fa:	f7f8 fd11 	bl	8000220 <memchr>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d038      	beq.n	8007874 <_svfiprintf_r+0x1d8>
 8007802:	4b23      	ldr	r3, [pc, #140]	; (8007890 <_svfiprintf_r+0x1f4>)
 8007804:	bb1b      	cbnz	r3, 800784e <_svfiprintf_r+0x1b2>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	3307      	adds	r3, #7
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	3308      	adds	r3, #8
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007814:	4433      	add	r3, r6
 8007816:	9309      	str	r3, [sp, #36]	; 0x24
 8007818:	e767      	b.n	80076ea <_svfiprintf_r+0x4e>
 800781a:	fb0c 3202 	mla	r2, ip, r2, r3
 800781e:	460c      	mov	r4, r1
 8007820:	2001      	movs	r0, #1
 8007822:	e7a5      	b.n	8007770 <_svfiprintf_r+0xd4>
 8007824:	2300      	movs	r3, #0
 8007826:	3401      	adds	r4, #1
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	4619      	mov	r1, r3
 800782c:	f04f 0c0a 	mov.w	ip, #10
 8007830:	4620      	mov	r0, r4
 8007832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007836:	3a30      	subs	r2, #48	; 0x30
 8007838:	2a09      	cmp	r2, #9
 800783a:	d903      	bls.n	8007844 <_svfiprintf_r+0x1a8>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0c5      	beq.n	80077cc <_svfiprintf_r+0x130>
 8007840:	9105      	str	r1, [sp, #20]
 8007842:	e7c3      	b.n	80077cc <_svfiprintf_r+0x130>
 8007844:	fb0c 2101 	mla	r1, ip, r1, r2
 8007848:	4604      	mov	r4, r0
 800784a:	2301      	movs	r3, #1
 800784c:	e7f0      	b.n	8007830 <_svfiprintf_r+0x194>
 800784e:	ab03      	add	r3, sp, #12
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	462a      	mov	r2, r5
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <_svfiprintf_r+0x1f8>)
 8007856:	a904      	add	r1, sp, #16
 8007858:	4638      	mov	r0, r7
 800785a:	f3af 8000 	nop.w
 800785e:	1c42      	adds	r2, r0, #1
 8007860:	4606      	mov	r6, r0
 8007862:	d1d6      	bne.n	8007812 <_svfiprintf_r+0x176>
 8007864:	89ab      	ldrh	r3, [r5, #12]
 8007866:	065b      	lsls	r3, r3, #25
 8007868:	f53f af2c 	bmi.w	80076c4 <_svfiprintf_r+0x28>
 800786c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786e:	b01d      	add	sp, #116	; 0x74
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	ab03      	add	r3, sp, #12
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462a      	mov	r2, r5
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <_svfiprintf_r+0x1f8>)
 800787c:	a904      	add	r1, sp, #16
 800787e:	4638      	mov	r0, r7
 8007880:	f000 f87a 	bl	8007978 <_printf_i>
 8007884:	e7eb      	b.n	800785e <_svfiprintf_r+0x1c2>
 8007886:	bf00      	nop
 8007888:	08007cc4 	.word	0x08007cc4
 800788c:	08007cce 	.word	0x08007cce
 8007890:	00000000 	.word	0x00000000
 8007894:	080075e5 	.word	0x080075e5
 8007898:	08007cca 	.word	0x08007cca

0800789c <_printf_common>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	4616      	mov	r6, r2
 80078a2:	4699      	mov	r9, r3
 80078a4:	688a      	ldr	r2, [r1, #8]
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	bfb8      	it	lt
 80078b0:	4613      	movlt	r3, r2
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b8:	4607      	mov	r7, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b10a      	cbz	r2, 80078c2 <_printf_common+0x26>
 80078be:	3301      	adds	r3, #1
 80078c0:	6033      	str	r3, [r6, #0]
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	0699      	lsls	r1, r3, #26
 80078c6:	bf42      	ittt	mi
 80078c8:	6833      	ldrmi	r3, [r6, #0]
 80078ca:	3302      	addmi	r3, #2
 80078cc:	6033      	strmi	r3, [r6, #0]
 80078ce:	6825      	ldr	r5, [r4, #0]
 80078d0:	f015 0506 	ands.w	r5, r5, #6
 80078d4:	d106      	bne.n	80078e4 <_printf_common+0x48>
 80078d6:	f104 0a19 	add.w	sl, r4, #25
 80078da:	68e3      	ldr	r3, [r4, #12]
 80078dc:	6832      	ldr	r2, [r6, #0]
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	dc26      	bgt.n	8007932 <_printf_common+0x96>
 80078e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e8:	1e13      	subs	r3, r2, #0
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	bf18      	it	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	0692      	lsls	r2, r2, #26
 80078f2:	d42b      	bmi.n	800794c <_printf_common+0xb0>
 80078f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d01e      	beq.n	8007940 <_printf_common+0xa4>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	68e5      	ldr	r5, [r4, #12]
 8007906:	6832      	ldr	r2, [r6, #0]
 8007908:	f003 0306 	and.w	r3, r3, #6
 800790c:	2b04      	cmp	r3, #4
 800790e:	bf08      	it	eq
 8007910:	1aad      	subeq	r5, r5, r2
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	6922      	ldr	r2, [r4, #16]
 8007916:	bf0c      	ite	eq
 8007918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800791c:	2500      	movne	r5, #0
 800791e:	4293      	cmp	r3, r2
 8007920:	bfc4      	itt	gt
 8007922:	1a9b      	subgt	r3, r3, r2
 8007924:	18ed      	addgt	r5, r5, r3
 8007926:	2600      	movs	r6, #0
 8007928:	341a      	adds	r4, #26
 800792a:	42b5      	cmp	r5, r6
 800792c:	d11a      	bne.n	8007964 <_printf_common+0xc8>
 800792e:	2000      	movs	r0, #0
 8007930:	e008      	b.n	8007944 <_printf_common+0xa8>
 8007932:	2301      	movs	r3, #1
 8007934:	4652      	mov	r2, sl
 8007936:	4649      	mov	r1, r9
 8007938:	4638      	mov	r0, r7
 800793a:	47c0      	blx	r8
 800793c:	3001      	adds	r0, #1
 800793e:	d103      	bne.n	8007948 <_printf_common+0xac>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007948:	3501      	adds	r5, #1
 800794a:	e7c6      	b.n	80078da <_printf_common+0x3e>
 800794c:	18e1      	adds	r1, r4, r3
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	2030      	movs	r0, #48	; 0x30
 8007952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007956:	4422      	add	r2, r4
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800795c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007960:	3302      	adds	r3, #2
 8007962:	e7c7      	b.n	80078f4 <_printf_common+0x58>
 8007964:	2301      	movs	r3, #1
 8007966:	4622      	mov	r2, r4
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d0e6      	beq.n	8007940 <_printf_common+0xa4>
 8007972:	3601      	adds	r6, #1
 8007974:	e7d9      	b.n	800792a <_printf_common+0x8e>
	...

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	4691      	mov	r9, r2
 8007980:	7e27      	ldrb	r7, [r4, #24]
 8007982:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007984:	2f78      	cmp	r7, #120	; 0x78
 8007986:	4680      	mov	r8, r0
 8007988:	469a      	mov	sl, r3
 800798a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	; 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d8 	beq.w	8007b4a <_printf_i+0x1d2>
 800799a:	2f58      	cmp	r7, #88	; 0x58
 800799c:	f000 80a3 	beq.w	8007ae6 <_printf_i+0x16e>
 80079a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a001      	add	r0, pc, #4	; (adr r0, 80079b8 <_printf_i+0x40>)
 80079b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b31 	.word	0x08007b31
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007b13 	.word	0x08007b13
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b53 	.word	0x08007b53
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007b1b 	.word	0x08007b1b
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	600a      	str	r2, [r1, #0]
 8007a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0a3      	b.n	8007b6c <_printf_i+0x1f4>
 8007a24:	6825      	ldr	r5, [r4, #0]
 8007a26:	6808      	ldr	r0, [r1, #0]
 8007a28:	062e      	lsls	r6, r5, #24
 8007a2a:	f100 0304 	add.w	r3, r0, #4
 8007a2e:	d50a      	bpl.n	8007a46 <_printf_i+0xce>
 8007a30:	6805      	ldr	r5, [r0, #0]
 8007a32:	600b      	str	r3, [r1, #0]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xc8>
 8007a38:	232d      	movs	r3, #45	; 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a40:	485e      	ldr	r0, [pc, #376]	; (8007bbc <_printf_i+0x244>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e019      	b.n	8007a7a <_printf_i+0x102>
 8007a46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a4a:	6805      	ldr	r5, [r0, #0]
 8007a4c:	600b      	str	r3, [r1, #0]
 8007a4e:	bf18      	it	ne
 8007a50:	b22d      	sxthne	r5, r5
 8007a52:	e7ef      	b.n	8007a34 <_printf_i+0xbc>
 8007a54:	680b      	ldr	r3, [r1, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	1d18      	adds	r0, r3, #4
 8007a5a:	6008      	str	r0, [r1, #0]
 8007a5c:	0628      	lsls	r0, r5, #24
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0xec>
 8007a60:	681d      	ldr	r5, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0xf2>
 8007a64:	0669      	lsls	r1, r5, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0xe8>
 8007a68:	881d      	ldrh	r5, [r3, #0]
 8007a6a:	4854      	ldr	r0, [pc, #336]	; (8007bbc <_printf_i+0x244>)
 8007a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a6e:	bf0c      	ite	eq
 8007a70:	2308      	moveq	r3, #8
 8007a72:	230a      	movne	r3, #10
 8007a74:	2100      	movs	r1, #0
 8007a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7a:	6866      	ldr	r6, [r4, #4]
 8007a7c:	60a6      	str	r6, [r4, #8]
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	bfa2      	ittt	ge
 8007a82:	6821      	ldrge	r1, [r4, #0]
 8007a84:	f021 0104 	bicge.w	r1, r1, #4
 8007a88:	6021      	strge	r1, [r4, #0]
 8007a8a:	b90d      	cbnz	r5, 8007a90 <_printf_i+0x118>
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	d04d      	beq.n	8007b2c <_printf_i+0x1b4>
 8007a90:	4616      	mov	r6, r2
 8007a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a96:	fb03 5711 	mls	r7, r3, r1, r5
 8007a9a:	5dc7      	ldrb	r7, [r0, r7]
 8007a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007aa0:	462f      	mov	r7, r5
 8007aa2:	42bb      	cmp	r3, r7
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	d9f4      	bls.n	8007a92 <_printf_i+0x11a>
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d10b      	bne.n	8007ac4 <_printf_i+0x14c>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	07df      	lsls	r7, r3, #31
 8007ab0:	d508      	bpl.n	8007ac4 <_printf_i+0x14c>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	6861      	ldr	r1, [r4, #4]
 8007ab6:	4299      	cmp	r1, r3
 8007ab8:	bfde      	ittt	le
 8007aba:	2330      	movle	r3, #48	; 0x30
 8007abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ac4:	1b92      	subs	r2, r2, r6
 8007ac6:	6122      	str	r2, [r4, #16]
 8007ac8:	f8cd a000 	str.w	sl, [sp]
 8007acc:	464b      	mov	r3, r9
 8007ace:	aa03      	add	r2, sp, #12
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	f7ff fee2 	bl	800789c <_printf_common>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d14c      	bne.n	8007b76 <_printf_i+0x1fe>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	b004      	add	sp, #16
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	4835      	ldr	r0, [pc, #212]	; (8007bbc <_printf_i+0x244>)
 8007ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	680e      	ldr	r6, [r1, #0]
 8007af0:	061f      	lsls	r7, r3, #24
 8007af2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007af6:	600e      	str	r6, [r1, #0]
 8007af8:	d514      	bpl.n	8007b24 <_printf_i+0x1ac>
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	bf44      	itt	mi
 8007afe:	f043 0320 	orrmi.w	r3, r3, #32
 8007b02:	6023      	strmi	r3, [r4, #0]
 8007b04:	b91d      	cbnz	r5, 8007b0e <_printf_i+0x196>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	f023 0320 	bic.w	r3, r3, #32
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	2310      	movs	r3, #16
 8007b10:	e7b0      	b.n	8007a74 <_printf_i+0xfc>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f043 0320 	orr.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	2378      	movs	r3, #120	; 0x78
 8007b1c:	4828      	ldr	r0, [pc, #160]	; (8007bc0 <_printf_i+0x248>)
 8007b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b22:	e7e3      	b.n	8007aec <_printf_i+0x174>
 8007b24:	065e      	lsls	r6, r3, #25
 8007b26:	bf48      	it	mi
 8007b28:	b2ad      	uxthmi	r5, r5
 8007b2a:	e7e6      	b.n	8007afa <_printf_i+0x182>
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	e7bb      	b.n	8007aa8 <_printf_i+0x130>
 8007b30:	680b      	ldr	r3, [r1, #0]
 8007b32:	6826      	ldr	r6, [r4, #0]
 8007b34:	6960      	ldr	r0, [r4, #20]
 8007b36:	1d1d      	adds	r5, r3, #4
 8007b38:	600d      	str	r5, [r1, #0]
 8007b3a:	0635      	lsls	r5, r6, #24
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0x1cc>
 8007b40:	6018      	str	r0, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0x1d2>
 8007b44:	0671      	lsls	r1, r6, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0x1c8>
 8007b48:	8018      	strh	r0, [r3, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	4616      	mov	r6, r2
 8007b50:	e7ba      	b.n	8007ac8 <_printf_i+0x150>
 8007b52:	680b      	ldr	r3, [r1, #0]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	600a      	str	r2, [r1, #0]
 8007b58:	681e      	ldr	r6, [r3, #0]
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7f8 fb5e 	bl	8000220 <memchr>
 8007b64:	b108      	cbz	r0, 8007b6a <_printf_i+0x1f2>
 8007b66:	1b80      	subs	r0, r0, r6
 8007b68:	6060      	str	r0, [r4, #4]
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	e7a8      	b.n	8007ac8 <_printf_i+0x150>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	47d0      	blx	sl
 8007b80:	3001      	adds	r0, #1
 8007b82:	d0ab      	beq.n	8007adc <_printf_i+0x164>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	079b      	lsls	r3, r3, #30
 8007b88:	d413      	bmi.n	8007bb2 <_printf_i+0x23a>
 8007b8a:	68e0      	ldr	r0, [r4, #12]
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	bfb8      	it	lt
 8007b92:	4618      	movlt	r0, r3
 8007b94:	e7a4      	b.n	8007ae0 <_printf_i+0x168>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d09b      	beq.n	8007adc <_printf_i+0x164>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dcf2      	bgt.n	8007b96 <_printf_i+0x21e>
 8007bb0:	e7eb      	b.n	8007b8a <_printf_i+0x212>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	f104 0619 	add.w	r6, r4, #25
 8007bb8:	e7f5      	b.n	8007ba6 <_printf_i+0x22e>
 8007bba:	bf00      	nop
 8007bbc:	08007cd5 	.word	0x08007cd5
 8007bc0:	08007ce6 	.word	0x08007ce6

08007bc4 <__retarget_lock_acquire_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <__retarget_lock_release_recursive>:
 8007bc6:	4770      	bx	lr

08007bc8 <memmove>:
 8007bc8:	4288      	cmp	r0, r1
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	eb01 0402 	add.w	r4, r1, r2
 8007bd0:	d902      	bls.n	8007bd8 <memmove+0x10>
 8007bd2:	4284      	cmp	r4, r0
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	d807      	bhi.n	8007be8 <memmove+0x20>
 8007bd8:	1e43      	subs	r3, r0, #1
 8007bda:	42a1      	cmp	r1, r4
 8007bdc:	d008      	beq.n	8007bf0 <memmove+0x28>
 8007bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be6:	e7f8      	b.n	8007bda <memmove+0x12>
 8007be8:	4402      	add	r2, r0
 8007bea:	4601      	mov	r1, r0
 8007bec:	428a      	cmp	r2, r1
 8007bee:	d100      	bne.n	8007bf2 <memmove+0x2a>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bfa:	e7f7      	b.n	8007bec <memmove+0x24>

08007bfc <_realloc_r>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	4607      	mov	r7, r0
 8007c00:	4614      	mov	r4, r2
 8007c02:	460e      	mov	r6, r1
 8007c04:	b921      	cbnz	r1, 8007c10 <_realloc_r+0x14>
 8007c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	f7ff bc54 	b.w	80074b8 <_malloc_r>
 8007c10:	b922      	cbnz	r2, 8007c1c <_realloc_r+0x20>
 8007c12:	f7ff fc01 	bl	8007418 <_free_r>
 8007c16:	4625      	mov	r5, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	f000 f814 	bl	8007c48 <_malloc_usable_size_r>
 8007c20:	42a0      	cmp	r0, r4
 8007c22:	d20f      	bcs.n	8007c44 <_realloc_r+0x48>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff fc46 	bl	80074b8 <_malloc_r>
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d0f2      	beq.n	8007c18 <_realloc_r+0x1c>
 8007c32:	4631      	mov	r1, r6
 8007c34:	4622      	mov	r2, r4
 8007c36:	f7ff fbd9 	bl	80073ec <memcpy>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff fbeb 	bl	8007418 <_free_r>
 8007c42:	e7e9      	b.n	8007c18 <_realloc_r+0x1c>
 8007c44:	4635      	mov	r5, r6
 8007c46:	e7e7      	b.n	8007c18 <_realloc_r+0x1c>

08007c48 <_malloc_usable_size_r>:
 8007c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4c:	1f18      	subs	r0, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfbc      	itt	lt
 8007c52:	580b      	ldrlt	r3, [r1, r0]
 8007c54:	18c0      	addlt	r0, r0, r3
 8007c56:	4770      	bx	lr

08007c58 <_init>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr

08007c64 <_fini>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr
